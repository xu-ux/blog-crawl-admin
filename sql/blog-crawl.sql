/*
 Navicat Premium Data Transfer

 Source Server         : 192.168.122.22
 Source Server Type    : MySQL
 Source Server Version : 50732
 Source Host           : 192.168.122.22:3306
 Source Schema         : blog-crawl

 Target Server Type    : MySQL
 Target Server Version : 50732
 File Encoding         : 65001

*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for QRTZ_BLOB_TRIGGERS
-- ----------------------------
DROP TABLE IF EXISTS `QRTZ_BLOB_TRIGGERS`;
CREATE TABLE `QRTZ_BLOB_TRIGGERS`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TRIGGER_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TRIGGER_GROUP` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `BLOB_DATA` blob NULL,
  PRIMARY KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) USING BTREE,
  CONSTRAINT `QRTZ_BLOB_TRIGGERS_ibfk_1` FOREIGN KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) REFERENCES `QRTZ_TRIGGERS` (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for QRTZ_CALENDARS
-- ----------------------------
DROP TABLE IF EXISTS `QRTZ_CALENDARS`;
CREATE TABLE `QRTZ_CALENDARS`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `CALENDAR_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `CALENDAR` blob NOT NULL,
  PRIMARY KEY (`SCHED_NAME`, `CALENDAR_NAME`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for QRTZ_CRON_TRIGGERS
-- ----------------------------
DROP TABLE IF EXISTS `QRTZ_CRON_TRIGGERS`;
CREATE TABLE `QRTZ_CRON_TRIGGERS`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TRIGGER_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TRIGGER_GROUP` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `CRON_EXPRESSION` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TIME_ZONE_ID` varchar(80) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) USING BTREE,
  CONSTRAINT `QRTZ_CRON_TRIGGERS_ibfk_1` FOREIGN KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) REFERENCES `QRTZ_TRIGGERS` (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of QRTZ_CRON_TRIGGERS
-- ----------------------------
INSERT INTO `QRTZ_CRON_TRIGGERS` VALUES ('BlogSearchSpiderScheduler', 'blog_1423178496812777472', 'DEFAULT', '0 1/10 * * * ?', 'Asia/Shanghai');

-- ----------------------------
-- Table structure for QRTZ_FIRED_TRIGGERS
-- ----------------------------
DROP TABLE IF EXISTS `QRTZ_FIRED_TRIGGERS`;
CREATE TABLE `QRTZ_FIRED_TRIGGERS`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `ENTRY_ID` varchar(95) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TRIGGER_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TRIGGER_GROUP` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `INSTANCE_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `FIRED_TIME` bigint(13) NOT NULL,
  `SCHED_TIME` bigint(13) NOT NULL,
  `PRIORITY` int(11) NOT NULL,
  `STATE` varchar(16) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `JOB_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `JOB_GROUP` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `IS_NONCONCURRENT` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `REQUESTS_RECOVERY` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`SCHED_NAME`, `ENTRY_ID`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for QRTZ_JOB_DETAILS
-- ----------------------------
DROP TABLE IF EXISTS `QRTZ_JOB_DETAILS`;
CREATE TABLE `QRTZ_JOB_DETAILS`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `JOB_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `JOB_GROUP` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `DESCRIPTION` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `JOB_CLASS_NAME` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `IS_DURABLE` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `IS_NONCONCURRENT` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `IS_UPDATE_DATA` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `REQUESTS_RECOVERY` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `JOB_DATA` blob NULL,
  PRIMARY KEY (`SCHED_NAME`, `JOB_NAME`, `JOB_GROUP`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of QRTZ_JOB_DETAILS
-- ----------------------------
INSERT INTO `QRTZ_JOB_DETAILS` VALUES ('BlogSearchSpiderScheduler', 'blog_1423178496812777472', 'DEFAULT', NULL, 'com.bs.modules.job.handler.ScheduleContext', '0', '0', '0', '0', 0x

-- ----------------------------
-- Table structure for QRTZ_LOCKS
-- ----------------------------
DROP TABLE IF EXISTS `QRTZ_LOCKS`;
CREATE TABLE `QRTZ_LOCKS`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `LOCK_NAME` varchar(40) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`SCHED_NAME`, `LOCK_NAME`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of QRTZ_LOCKS
-- ----------------------------
INSERT INTO `QRTZ_LOCKS` VALUES ('BlogSearchSpiderScheduler', 'TRIGGER_ACCESS');

-- ----------------------------
-- Table structure for QRTZ_PAUSED_TRIGGER_GRPS
-- ----------------------------
DROP TABLE IF EXISTS `QRTZ_PAUSED_TRIGGER_GRPS`;
CREATE TABLE `QRTZ_PAUSED_TRIGGER_GRPS`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TRIGGER_GROUP` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`SCHED_NAME`, `TRIGGER_GROUP`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for QRTZ_SCHEDULER_STATE
-- ----------------------------
DROP TABLE IF EXISTS `QRTZ_SCHEDULER_STATE`;
CREATE TABLE `QRTZ_SCHEDULER_STATE`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `INSTANCE_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `LAST_CHECKIN_TIME` bigint(13) NOT NULL,
  `CHECKIN_INTERVAL` bigint(13) NOT NULL,
  PRIMARY KEY (`SCHED_NAME`, `INSTANCE_NAME`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for QRTZ_SIMPLE_TRIGGERS
-- ----------------------------
DROP TABLE IF EXISTS `QRTZ_SIMPLE_TRIGGERS`;
CREATE TABLE `QRTZ_SIMPLE_TRIGGERS`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TRIGGER_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TRIGGER_GROUP` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `REPEAT_COUNT` bigint(7) NOT NULL,
  `REPEAT_INTERVAL` bigint(12) NOT NULL,
  `TIMES_TRIGGERED` bigint(10) NOT NULL,
  PRIMARY KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) USING BTREE,
  CONSTRAINT `QRTZ_SIMPLE_TRIGGERS_ibfk_1` FOREIGN KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) REFERENCES `QRTZ_TRIGGERS` (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for QRTZ_SIMPROP_TRIGGERS
-- ----------------------------
DROP TABLE IF EXISTS `QRTZ_SIMPROP_TRIGGERS`;
CREATE TABLE `QRTZ_SIMPROP_TRIGGERS`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TRIGGER_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TRIGGER_GROUP` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `STR_PROP_1` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `STR_PROP_2` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `STR_PROP_3` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `INT_PROP_1` int(11) NULL DEFAULT NULL,
  `INT_PROP_2` int(11) NULL DEFAULT NULL,
  `LONG_PROP_1` bigint(20) NULL DEFAULT NULL,
  `LONG_PROP_2` bigint(20) NULL DEFAULT NULL,
  `DEC_PROP_1` decimal(13, 4) NULL DEFAULT NULL,
  `DEC_PROP_2` decimal(13, 4) NULL DEFAULT NULL,
  `BOOL_PROP_1` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `BOOL_PROP_2` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) USING BTREE,
  CONSTRAINT `QRTZ_SIMPROP_TRIGGERS_ibfk_1` FOREIGN KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) REFERENCES `QRTZ_TRIGGERS` (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for QRTZ_TRIGGERS
-- ----------------------------
DROP TABLE IF EXISTS `QRTZ_TRIGGERS`;
CREATE TABLE `QRTZ_TRIGGERS`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TRIGGER_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TRIGGER_GROUP` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `JOB_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `JOB_GROUP` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `DESCRIPTION` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `NEXT_FIRE_TIME` bigint(13) NULL DEFAULT NULL,
  `PREV_FIRE_TIME` bigint(13) NULL DEFAULT NULL,
  `PRIORITY` int(11) NULL DEFAULT NULL,
  `TRIGGER_STATE` varchar(16) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TRIGGER_TYPE` varchar(8) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `START_TIME` bigint(13) NOT NULL,
  `END_TIME` bigint(13) NULL DEFAULT NULL,
  `CALENDAR_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `MISFIRE_INSTR` smallint(2) NULL DEFAULT NULL,
  `JOB_DATA` blob NULL,
  PRIMARY KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) USING BTREE,
  INDEX `SCHED_NAME`(`SCHED_NAME`, `JOB_NAME`, `JOB_GROUP`) USING BTREE,
  CONSTRAINT `QRTZ_TRIGGERS_ibfk_1` FOREIGN KEY (`SCHED_NAME`, `JOB_NAME`, `JOB_GROUP`) REFERENCES `QRTZ_JOB_DETAILS` (`SCHED_NAME`, `JOB_NAME`, `JOB_GROUP`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of QRTZ_TRIGGERS
-- ----------------------------
INSERT INTO `QRTZ_TRIGGERS` VALUES ('BlogSearchSpiderScheduler', 'blog_1423178496812777472', 'DEFAULT', 'blog_1423178496812777472', 'DEFAULT', NULL, 1628578260000, 1628577660000, 5, 'PAUSED', 'CRON', 1628147169000, 0, NULL, 2, '');

-- ----------------------------
-- Table structure for gen_table
-- ----------------------------
DROP TABLE IF EXISTS `gen_table`;
CREATE TABLE `gen_table`  (
  `table_id` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '编号',
  `table_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '表名称',
  `table_comment` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '表描述',
  `sub_table_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '关联子表的表名',
  `sub_table_fk_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '子表关联的外键名',
  `class_name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '实体类名称',
  `tpl_category` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT 'crud' COMMENT '使用的模板（crud单表操作 tree树表操作 sub主子表操作）',
  `package_name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '生成包路径',
  `module_name` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '生成模块名',
  `business_name` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '生成业务名',
  `function_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '生成功能名',
  `function_author` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '生成功能作者',
  `gen_type` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '0' COMMENT '生成代码方式（0zip压缩包 1自定义路径）',
  `gen_path` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '/' COMMENT '生成路径（不填默认项目路径）',
  `options` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '其它生成选项',
  `create_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '创建者',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '更新者',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '更新时间',
  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  `parent_menu_id` varchar(40) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '父级菜单',
  `parent_menu_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '父级菜单名称',
  PRIMARY KEY (`table_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '代码生成业务表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of gen_table
-- ----------------------------
INSERT INTO `gen_table` VALUES ('1328525218309734400', 'sys_user', 'App用户', NULL, NULL, 'SysUser', 'crud', 'com.bs.system', 'system', 'user', 'App用户', 'Jmys', '1', '/pear-system', 'null', '', '2020-11-17 10:24:33', '', '2021-04-02 16:07:18', '', '1', '系统管理');
INSERT INTO `gen_table` VALUES ('1370410322996756480', 'sys_notice', '站内消息', NULL, NULL, 'SysNotice', 'crud', 'com.bs.system', 'system', 'notice', 'notice', 'jmys', '1', 'D:\\openSource\\Pear-Admin-Boot\\pear-modules\\pear-system', 'null', '', '2021-03-12 16:24:16', '', '2021-03-30 18:04:17', '生成', '1', '系统管理');
INSERT INTO `gen_table` VALUES ('1423166554551353345', 't_run_task', '爬虫任务运行表', NULL, NULL, 'RunTask', 'crud', 'com.bs.modules.spider', 'spider', 'runTask', '爬虫任务运行', 'xucl', '0', '/', 'null', '', '2021-08-05 06:18:42', '', '2021-08-05 06:24:40', '', '1422390160183525376', '爬虫管理');
INSERT INTO `gen_table` VALUES ('1423201658132758528', 't_link_task', '标签任务信息表', NULL, NULL, 'LinkTask', 'crud', 'com.bs.modules.spider', 'spider', 'linkTask', '标签管理', 'xucl', '0', '/', 'null', '', '2021-08-05 08:38:11', '', '2021-08-05 08:40:41', '', '1422390160183525376', '爬虫管理');
INSERT INTO `gen_table` VALUES ('1423555284567064576', 't_topic', '主题专栏', NULL, NULL, 'Topic', 'crud', 'com.bs.modules.spider', 'spider', 'topic', '主题专栏', 'xucl', '0', '/', 'null', '', '2021-08-06 07:27:46', '', '2021-08-06 07:28:40', '', '1422390160183525376', '爬虫管理');

-- ----------------------------
-- Table structure for gen_table_column
-- ----------------------------
DROP TABLE IF EXISTS `gen_table_column`;
CREATE TABLE `gen_table_column`  (
  `column_id` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '编号',
  `table_id` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '归属表编号',
  `column_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '列名称',
  `column_comment` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '列描述',
  `column_type` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '列类型',
  `java_type` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'JAVA类型',
  `java_field` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'JAVA字段名',
  `is_pk` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否主键（1是）',
  `is_increment` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否自增（1是）',
  `is_required` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否必填（1是）',
  `is_insert` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否为插入字段（1是）',
  `is_edit` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否编辑字段（1是）',
  `is_list` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否列表字段（1是）',
  `is_query` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否查询字段（1是）',
  `query_type` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT 'EQ' COMMENT '查询方式（等于、不等于、大于、小于、范围）',
  `html_type` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '显示类型（文本框、文本域、下拉框、复选框、单选框、日期控件）',
  `dict_type` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '字典类型',
  `sort` int(11) NULL DEFAULT NULL COMMENT '排序',
  `create_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '创建者',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '更新者',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`column_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '代码生成业务表字段' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of gen_table_column
-- ----------------------------
INSERT INTO `gen_table_column` VALUES ('1328525219052126208', '1328525218309734400', 'user_id', '编号', 'char(19)', 'String', 'userId', '1', '0', NULL, '1', NULL, NULL, NULL, 'EQ', 'input', 'input', 1, '', '2020-11-17 10:24:33', NULL, '2021-04-02 16:07:18');
INSERT INTO `gen_table_column` VALUES ('1328525219400253440', '1328525218309734400', 'username', '账户', 'char(20)', 'String', 'username', '0', '0', NULL, '1', '1', '1', '1', 'LIKE', 'input', 'input', 2, '', '2020-11-17 10:24:33', NULL, '2021-04-02 16:07:18');
INSERT INTO `gen_table_column` VALUES ('1328525219786129408', '1328525218309734400', 'password', '密码', 'char(60)', 'String', 'password', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'input', 'input', 3, '', '2020-11-17 10:24:33', NULL, '2021-04-02 16:07:18');
INSERT INTO `gen_table_column` VALUES ('1328525220104896512', '1328525218309734400', 'salt', '姓名', 'char(10)', 'String', 'salt', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'input', 'input', 4, '', '2020-11-17 10:24:33', NULL, '2021-04-02 16:07:18');
INSERT INTO `gen_table_column` VALUES ('1328525220423663616', '1328525218309734400', 'status', '状态', 'char(1)', 'String', 'status', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'radio', 'input', 5, '', '2020-11-17 10:24:33', NULL, '2021-04-02 16:07:18');
INSERT INTO `gen_table_column` VALUES ('1328525220734042112', '1328525218309734400', 'real_name', '姓名', 'char(8)', 'String', 'realName', '0', '0', NULL, '1', '1', '1', '1', 'LIKE', 'input', 'input', 6, '', '2020-11-17 10:24:33', NULL, '2021-04-02 16:07:18');
INSERT INTO `gen_table_column` VALUES ('1328525221044420608', '1328525218309734400', 'email', '邮箱', 'char(20)', 'String', 'email', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'input', 'input', 7, '', '2020-11-17 10:24:34', NULL, '2021-04-02 16:07:18');
INSERT INTO `gen_table_column` VALUES ('1328525221363187712', '1328525218309734400', 'avatar', '头像', 'varchar(30)', 'String', 'avatar', '0', '0', '1', '1', '1', '1', '1', 'EQ', 'input', 'input', 8, '', '2020-11-17 10:24:34', NULL, '2021-04-02 16:07:18');
INSERT INTO `gen_table_column` VALUES ('1328525221677760512', '1328525218309734400', 'sex', '性别', 'char(1)', 'String', 'sex', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'select', 'user_sex', 9, '', '2020-11-17 10:24:34', NULL, '2021-04-02 16:07:18');
INSERT INTO `gen_table_column` VALUES ('1328525222000721920', '1328525218309734400', 'phone', '电话', 'char(11)', 'String', 'phone', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'input', 'input', 10, '', '2020-11-17 10:24:34', NULL, '2021-04-02 16:07:18');
INSERT INTO `gen_table_column` VALUES ('1328525222415958016', '1328525218309734400', 'create_time', '创建时间', 'datetime', 'Date', 'createTime', '0', '0', NULL, '1', NULL, NULL, NULL, 'EQ', 'datetime', 'input', 11, '', '2020-11-17 10:24:34', NULL, '2021-04-02 16:07:18');
INSERT INTO `gen_table_column` VALUES ('1328525222764085248', '1328525218309734400', 'create_by', '创建人', 'char(1)', 'String', 'createBy', '0', '0', NULL, '1', NULL, NULL, NULL, 'EQ', 'input', 'input', 12, '', '2020-11-17 10:24:34', NULL, '2021-04-02 16:07:18');
INSERT INTO `gen_table_column` VALUES ('1328525223091240960', '1328525218309734400', 'update_time', '修改时间', 'datetime', 'Date', 'updateTime', '0', '0', NULL, '1', '1', NULL, NULL, 'EQ', 'datetime', 'input', 13, '', '2020-11-17 10:24:34', NULL, '2021-04-02 16:07:18');
INSERT INTO `gen_table_column` VALUES ('1328525223552614400', '1328525218309734400', 'update_by', '修改人', 'char(1)', 'String', 'updateBy', '0', '0', NULL, '1', '1', NULL, NULL, 'EQ', 'input', 'input', 14, '', '2020-11-17 10:24:34', NULL, '2021-04-02 16:07:18');
INSERT INTO `gen_table_column` VALUES ('1328525223896547328', '1328525218309734400', 'remark', '备注', 'varchar(255)', 'String', 'remark', '0', '0', NULL, '1', '1', '1', NULL, 'EQ', 'input', 'input', 15, '', '2020-11-17 10:24:34', NULL, '2021-04-02 16:07:18');
INSERT INTO `gen_table_column` VALUES ('1328525224206925824', '1328525218309734400', 'enable', '是否启用', 'char(1)', 'String', 'enable', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'input', 'input', 16, '', '2020-11-17 10:24:34', NULL, '2021-04-02 16:07:18');
INSERT INTO `gen_table_column` VALUES ('1328525224542470144', '1328525218309734400', 'login', '是否登录', 'char(1)', 'String', 'login', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'input', 'input', 17, '', '2020-11-17 10:24:34', NULL, '2021-04-02 16:07:18');
INSERT INTO `gen_table_column` VALUES ('1328525224861237248', '1328525218309734400', 'dept_id', '部门编号', 'char(19)', 'String', 'deptId', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'input', 'input', 18, '', '2020-11-17 10:24:34', NULL, '2021-04-02 16:07:18');
INSERT INTO `gen_table_column` VALUES ('1370410323613319168', '1370410322996756480', 'id', '编号', 'char(20)', 'String', 'id', '1', '0', NULL, '1', NULL, NULL, NULL, 'EQ', 'input', 'input', 1, '', '2021-03-12 16:24:16', NULL, '2021-03-30 18:04:17');
INSERT INTO `gen_table_column` VALUES ('1370410323856588800', '1370410322996756480', 'title', '标题', 'varchar(255)', 'String', 'title', '0', '0', '1', '1', '1', '1', '1', 'LIKE', 'input', 'input', 2, '', '2021-03-12 16:24:16', NULL, '2021-03-30 18:04:17');
INSERT INTO `gen_table_column` VALUES ('1370410324095664128', '1370410322996756480', 'content', '内容', 'text', 'String', 'content', '0', '0', '1', '1', '1', '1', NULL, 'EQ', 'input', 'input', 3, '', '2021-03-12 16:24:16', NULL, '2021-03-30 18:04:17');
INSERT INTO `gen_table_column` VALUES ('1370410324317962240', '1370410322996756480', 'sender', '发送人', 'char(20)', 'String', 'sender', '0', '0', '1', '1', NULL, '1', NULL, 'EQ', 'select', 'input', 4, '', '2021-03-12 16:24:16', NULL, '2021-03-30 18:04:17');
INSERT INTO `gen_table_column` VALUES ('1370410324557037568', '1370410322996756480', 'accept', '接收者', 'char(20)', 'String', 'accept', '0', '0', '1', '1', '1', '1', NULL, 'EQ', 'input', 'input', 5, '', '2021-03-12 16:24:16', NULL, '2021-03-30 18:04:17');
INSERT INTO `gen_table_column` VALUES ('1370410324766752768', '1370410322996756480', 'type', '类型', 'char(10)', 'String', 'type', '0', '0', '1', '1', '1', '1', '1', 'EQ', 'select', 'sys_notice_type', 6, '', '2021-03-12 16:24:16', NULL, '2021-03-30 18:04:17');
INSERT INTO `gen_table_column` VALUES ('1370410325018411008', '1370410322996756480', 'create_by', '创建人', 'char(20)', 'String', 'createBy', '0', '0', NULL, '1', NULL, NULL, NULL, 'EQ', 'input', 'input', 7, '', '2021-03-12 16:24:16', NULL, '2021-03-30 18:04:17');
INSERT INTO `gen_table_column` VALUES ('1370410325240709120', '1370410322996756480', 'create_time', '创建时间', 'datetime', 'Date', 'createTime', '0', '0', NULL, '1', NULL, NULL, NULL, 'EQ', 'datetime', 'input', 8, '', '2021-03-12 16:24:16', NULL, '2021-03-30 18:04:17');
INSERT INTO `gen_table_column` VALUES ('1370410325471395840', '1370410322996756480', 'update_by', '修改人', 'char(20)', 'String', 'updateBy', '0', '0', NULL, '1', NULL, NULL, NULL, 'EQ', 'input', 'input', 9, '', '2021-03-12 16:24:16', NULL, '2021-03-30 18:04:17');
INSERT INTO `gen_table_column` VALUES ('1370410325702082560', '1370410322996756480', 'update_time', '修改时间', 'datetime', 'Date', 'updateTime', '0', '0', NULL, '1', NULL, NULL, NULL, 'EQ', 'datetime', 'input', 10, '', '2021-03-12 16:24:16', NULL, '2021-03-30 18:04:17');
INSERT INTO `gen_table_column` VALUES ('1370410325928574976', '1370410322996756480', 'remark', '备注', 'varchar(255)', 'String', 'remark', '0', '0', NULL, '1', NULL, NULL, NULL, 'EQ', 'input', 'input', 11, '', '2021-03-12 16:24:17', NULL, '2021-03-30 18:04:17');
INSERT INTO `gen_table_column` VALUES ('1423166555251802112', '1423166554551353345', 'id', '任务id', 'bigint(20) unsigned', 'Long', 'id', '1', '1', NULL, '1', NULL, '1', NULL, 'EQ', 'input', 'input', 1, '', '2021-08-05 06:18:42', NULL, '2021-08-05 06:24:40');
INSERT INTO `gen_table_column` VALUES ('1423166555260190720', '1423166554551353345', 'original_url', '原始地址', 'varchar(300)', 'String', 'originalUrl', '0', '0', NULL, '1', '1', '1', '1', 'LIKE', 'input', 'input', 2, '', '2021-08-05 06:18:42', NULL, '2021-08-05 06:24:40');
INSERT INTO `gen_table_column` VALUES ('1423166555268579328', '1423166554551353345', 'original_type', '来源类型', 'smallint(3)', 'Integer', 'originalType', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'select', 'input', 3, '', '2021-08-05 06:18:42', NULL, '2021-08-05 06:24:40');
INSERT INTO `gen_table_column` VALUES ('1423166555276967936', '1423166554551353345', 'run_status', '运行状态 0停止 1进行中 2异常 3完成(进入history)', 'smallint(3)', 'Integer', 'runStatus', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'select', 'input', 4, '', '2021-08-05 06:18:42', NULL, '2021-08-05 06:24:40');
INSERT INTO `gen_table_column` VALUES ('1423166555285356544', '1423166554551353345', 'error_msg', '错误信息', 'varchar(300)', 'String', 'errorMsg', '0', '0', NULL, '1', '1', '1', NULL, 'EQ', 'input', 'input', 5, '', '2021-08-05 06:18:42', NULL, '2021-08-05 06:24:40');
INSERT INTO `gen_table_column` VALUES ('1423166555293745152', '1423166554551353345', 'user_id', '提交用户', 'int(11)', 'Long', 'userId', '0', '0', NULL, '1', NULL, '1', NULL, 'EQ', 'input', 'input', 6, '', '2021-08-05 06:18:42', NULL, '2021-08-05 06:24:40');
INSERT INTO `gen_table_column` VALUES ('1423166555302133760', '1423166554551353345', 'create_time', '创建时间', 'datetime', 'Date', 'createTime', '0', '0', NULL, '1', NULL, NULL, NULL, 'EQ', 'datetime', 'input', 7, '', '2021-08-05 06:18:42', NULL, '2021-08-05 06:24:40');
INSERT INTO `gen_table_column` VALUES ('1423166555310522368', '1423166554551353345', 'update_time', '修改时间', 'datetime', 'Date', 'updateTime', '0', '0', NULL, '1', NULL, NULL, NULL, 'EQ', 'datetime', 'input', 8, '', '2021-08-05 06:18:42', NULL, '2021-08-05 06:24:40');
INSERT INTO `gen_table_column` VALUES ('1423201658430554112', '1423201658132758528', 'id', '标签id', 'int(10) unsigned', 'Integer', 'id', '1', '1', NULL, '1', NULL, '1', NULL, 'EQ', 'input', 'input', 1, '', '2021-08-05 08:38:11', NULL, '2021-08-05 08:40:41');
INSERT INTO `gen_table_column` VALUES ('1423201658501857280', '1423201658132758528', 'link_url', '标签地址', 'varchar(300)', 'String', 'linkUrl', '0', '0', NULL, '1', '1', '1', '1', 'LIKE', 'input', 'input', 2, '', '2021-08-05 08:38:11', NULL, '2021-08-05 08:40:41');
INSERT INTO `gen_table_column` VALUES ('1423201658564771840', '1423201658132758528', 'link_title', '标签标题', 'varchar(300)', 'String', 'linkTitle', '0', '0', NULL, '1', '1', '1', '1', 'LIKE', 'input', 'input', 3, '', '2021-08-05 08:38:11', NULL, '2021-08-05 08:40:41');
INSERT INTO `gen_table_column` VALUES ('1423201658581549056', '1423201658132758528', 'original_type', '来源类型', 'smallint(3)', 'Integer', 'originalType', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'select', 'input', 4, '', '2021-08-05 08:38:11', NULL, '2021-08-05 08:40:41');
INSERT INTO `gen_table_column` VALUES ('1423201658598326272', '1423201658132758528', 'run_status', '运行状态', 'smallint(3)', 'Integer', 'runStatus', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'select', 'input', 5, '', '2021-08-05 08:38:11', NULL, '2021-08-05 08:40:41');
INSERT INTO `gen_table_column` VALUES ('1423201658610909184', '1423201658132758528', 'error_msg', '错误信息', 'varchar(300)', 'String', 'errorMsg', '0', '0', NULL, '1', '1', '1', NULL, 'EQ', 'input', 'input', 6, '', '2021-08-05 08:38:11', NULL, '2021-08-05 08:40:41');
INSERT INTO `gen_table_column` VALUES ('1423201658619297792', '1423201658132758528', 'user_id', '提交用户', 'int(11)', 'Long', 'userId', '0', '0', NULL, '1', '1', NULL, NULL, 'EQ', 'input', 'input', 7, '', '2021-08-05 08:38:11', NULL, '2021-08-05 08:40:41');
INSERT INTO `gen_table_column` VALUES ('1423201658631880704', '1423201658132758528', 'file_key', '文件地址', 'varchar(255)', 'String', 'fileKey', '0', '0', NULL, '1', '1', '1', NULL, 'EQ', 'input', 'input', 8, '', '2021-08-05 08:38:11', NULL, '2021-08-05 08:40:41');
INSERT INTO `gen_table_column` VALUES ('1423201658640269312', '1423201658132758528', 'create_time', '创建时间', 'datetime', 'Date', 'createTime', '0', '0', NULL, '1', NULL, '1', NULL, 'EQ', 'datetime', 'input', 9, '', '2021-08-05 08:38:11', NULL, '2021-08-05 08:40:41');
INSERT INTO `gen_table_column` VALUES ('1423201658648657920', '1423201658132758528', 'update_time', '修改时间', 'datetime', 'Date', 'updateTime', '0', '0', NULL, '1', NULL, '1', NULL, 'EQ', 'datetime', 'input', 10, '', '2021-08-05 08:38:11', NULL, '2021-08-05 08:40:41');
INSERT INTO `gen_table_column` VALUES ('1423555284839694336', '1423555284567064576', 'topic_id', '主题id', 'int(11)', 'Long', 'topicId', '1', '0', NULL, '1', NULL, NULL, NULL, 'EQ', 'input', 'input', 1, '', '2021-08-06 07:27:46', NULL, '2021-08-06 07:28:40');
INSERT INTO `gen_table_column` VALUES ('1423555284902608896', '1423555284567064576', 'topic_name', '主题名称', 'varchar(255)', 'String', 'topicName', '0', '0', NULL, '1', '1', '1', '1', 'LIKE', 'input', 'input', 2, '', '2021-08-06 07:27:46', NULL, '2021-08-06 07:28:40');
INSERT INTO `gen_table_column` VALUES ('1423555284973912064', '1423555284567064576', 'original_url', '地址', 'varchar(255)', 'String', 'originalUrl', '0', '0', NULL, '1', '1', '1', '1', 'LIKE', 'input', 'input', 3, '', '2021-08-06 07:27:46', NULL, '2021-08-06 07:28:40');
INSERT INTO `gen_table_column` VALUES ('1423555285041020928', '1423555284567064576', 'original_type', '类型', 'smallint(3)', 'Integer', 'originalType', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'select', 'input', 4, '', '2021-08-06 07:27:46', NULL, '2021-08-06 07:28:40');
INSERT INTO `gen_table_column` VALUES ('1423555285053603840', '1423555284567064576', 'create_time', '创建时间', 'datetime', 'Date', 'createTime', '0', '0', NULL, '1', NULL, NULL, NULL, 'EQ', 'datetime', 'input', 5, '', '2021-08-06 07:27:46', NULL, '2021-08-06 07:28:40');
INSERT INTO `gen_table_column` VALUES ('1423555285061992448', '1423555284567064576', 'update_time', '修改时间', 'datetime', 'Date', 'updateTime', '0', '0', NULL, '1', NULL, NULL, NULL, 'EQ', 'datetime', 'input', 6, '', '2021-08-06 07:27:46', NULL, '2021-08-06 07:28:40');

-- ----------------------------
-- Table structure for schedule_job
-- ----------------------------
DROP TABLE IF EXISTS `schedule_job`;
CREATE TABLE `schedule_job`  (
  `job_id` char(19) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '任务id',
  `bean_name` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'spring bean名称',
  `params` varchar(2000) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '参数',
  `cron_expression` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'cron表达式',
  `status` tinyint(4) NULL DEFAULT NULL COMMENT '任务状态  0：正常  1：暂停',
  `remark` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '备注',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `job_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`job_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '定时任务' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of schedule_job
-- ----------------------------
INSERT INTO `schedule_job` VALUES ('1361202980476420096', 'commonTask', '123456', '/15 * * * * ?', 1, '测试任务', '2021-02-15 14:37:35', '测试任务');
INSERT INTO `schedule_job` VALUES ('1361243793570922496', 'exceptionTask', '123456', '0 /5 * * * ?', 1, '异常任务', '2021-02-15 17:19:46', '异常任务');
INSERT INTO `schedule_job` VALUES ('1423178496812777472', 'crawlerTask', '0', '0 1/10 * * * ?', 1, '扫描RunTask中的任务', '2021-08-05 15:06:10', '爬取任务');

-- ----------------------------
-- Table structure for schedule_log
-- ----------------------------
DROP TABLE IF EXISTS `schedule_log`;
CREATE TABLE `schedule_log`  (
  `log_id` char(19) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '任务日志id',
  `job_id` char(19) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '任务id',
  `bean_name` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'spring bean名称',
  `params` varchar(2000) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '参数',
  `status` tinyint(4) NOT NULL COMMENT '任务状态    0：成功    1：失败',
  `error` varchar(2000) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '失败信息',
  `times` int(11) NOT NULL COMMENT '耗时(单位：毫秒)',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`log_id`) USING BTREE,
  INDEX `job_id`(`job_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '定时任务日志' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for sys_config
-- ----------------------------
DROP TABLE IF EXISTS `sys_config`;
CREATE TABLE `sys_config`  (
  `config_id` varchar(19) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '配置标识',
  `config_name` char(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '配置名称',
  `config_code` char(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '配置标识',
  `config_value` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '配置值',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `create_by` char(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '创建人',
  `update_by` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '修改人',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  `remark` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  `config_type` char(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '配置类型',
  PRIMARY KEY (`config_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_config
-- ----------------------------
INSERT INTO `sys_config` VALUES ('1307313917164257280', '网站描述', 'system_desc', '网站描述', '2020-11-08 19:19:32', NULL, NULL, NULL, '网站描述', 'custom');
INSERT INTO `sys_config` VALUES ('1309118169381601280', '网站数据', 'system_meta', '网站数据', '2020-11-03 19:20:48', NULL, NULL, NULL, '网站数据', 'custom');
INSERT INTO `sys_config` VALUES ('1356140265433202688', '系统配置', 'main_from', '854085467@qq.com', NULL, NULL, NULL, NULL, NULL, 'system');
INSERT INTO `sys_config` VALUES ('1356140265865216000', '系统配置', 'main_user', '854085467', NULL, NULL, NULL, NULL, NULL, 'system');
INSERT INTO `sys_config` VALUES ('1356140266297229312', '系统配置', 'main_pass', '123456', NULL, NULL, NULL, NULL, NULL, 'system');
INSERT INTO `sys_config` VALUES ('1356140266754408448', '系统配置', 'main_port', '456', NULL, NULL, NULL, NULL, NULL, 'system');
INSERT INTO `sys_config` VALUES ('1356140267211587584', '系统配置', 'main_host', 'smtp.qq.com', NULL, NULL, NULL, NULL, NULL, 'system');
INSERT INTO `sys_config` VALUES ('1356178612746715136', '系统配置', 'oss_path', 'D://upload', NULL, NULL, NULL, NULL, NULL, 'system');
INSERT INTO `sys_config` VALUES ('1356178613115813888', '系统配置', 'oss_type', 'local', NULL, NULL, NULL, NULL, NULL, 'system');
INSERT INTO `sys_config` VALUES ('1370975131278508032', '上传方式', 'upload_kind', NULL, NULL, NULL, NULL, NULL, NULL, 'system');
INSERT INTO `sys_config` VALUES ('1370975131630829568', '上传路径', 'upload_path', NULL, NULL, NULL, NULL, NULL, NULL, 'system');

-- ----------------------------
-- Table structure for sys_dept
-- ----------------------------
DROP TABLE IF EXISTS `sys_dept`;
CREATE TABLE `sys_dept`  (
  `dept_id` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '部门名称',
  `parent_id` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '父级编号',
  `dept_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '部门名称',
  `sort` int(11) NULL DEFAULT NULL COMMENT '排序',
  `leader` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '负责人',
  `phone` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '联系方式',
  `email` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '邮箱',
  `status` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '部门状态',
  `create_by` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '创建人',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '修改人',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  `remark` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '备注',
  `address` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '详细地址',
  PRIMARY KEY (`dept_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_dept
-- ----------------------------
INSERT INTO `sys_dept` VALUES ('1', '0', '济南总公司', 1, '就眠仪式', '15553726531', 'pearadmin@gmail.com', '0', NULL, NULL, NULL, NULL, NULL, '山东济南');
INSERT INTO `sys_dept` VALUES ('10', '8', '设计部', 3, '就眠仪式', '15553726531', 'pearadmin@gmail.com', '0', NULL, NULL, NULL, NULL, NULL, '山东济南');
INSERT INTO `sys_dept` VALUES ('1316361008259792896', '1316360459930042368', '软件部', 1, '就眠仪式', '15553726531', 'pearadmin@gmail.com', '0', NULL, NULL, NULL, NULL, NULL, '山东济南');
INSERT INTO `sys_dept` VALUES ('1316361192645591040', '1316360459930042368', '市场部', 1, '就眠仪式', '15553726531', 'pearadmin@gmail.com', '0', NULL, NULL, NULL, NULL, NULL, '山东济南');
INSERT INTO `sys_dept` VALUES ('1377824449830584320', '3', '财务部', 1, '就眠仪式', '15553726531', '854085467@qq.com', '0', NULL, NULL, NULL, NULL, NULL, '山东济南');
INSERT INTO `sys_dept` VALUES ('1377825171905183744', '8', '财务部', 1, '就眠仪式', '15553726531', '854085467@qq.com', '0', NULL, NULL, NULL, NULL, NULL, '山东济南');
INSERT INTO `sys_dept` VALUES ('3', '1', '杭州分公司', 1, '就眠仪式', '15553726531', 'pearadmin@gmail.com', '0', NULL, NULL, NULL, NULL, NULL, '浙江杭州');
INSERT INTO `sys_dept` VALUES ('4', '2', '软件部', 2, '就眠仪式', '15553726531', 'pearadmin@gmail.com', '0', NULL, NULL, NULL, NULL, NULL, '山东济南');
INSERT INTO `sys_dept` VALUES ('5', '2', '市场部', 2, '就眠仪式', '15553726531', 'pearadmin@gmail.com', '0', NULL, NULL, NULL, NULL, NULL, '山东济南');
INSERT INTO `sys_dept` VALUES ('6', '3', '软件部', 3, '就眠仪式', '15553726531', 'pearadmin@gmail.com', '0', NULL, NULL, NULL, NULL, NULL, '浙江杭州');
INSERT INTO `sys_dept` VALUES ('7', '3', '设计部', 4, '就眠仪式', '15553726531', 'pearadmin@gmail.com', '0', NULL, NULL, NULL, NULL, NULL, '山东济南');
INSERT INTO `sys_dept` VALUES ('8', '1', '深圳分公司', 3, '就眠仪式', '15553726531', 'pearadmin@gmail.com', '0', NULL, NULL, NULL, NULL, NULL, '山东济南');
INSERT INTO `sys_dept` VALUES ('9', '8', '软件部', 3, '就眠仪式', '15553726531', 'pearadmin@gmail.com', '0', NULL, NULL, NULL, NULL, NULL, '山东济南');

-- ----------------------------
-- Table structure for sys_dict_data
-- ----------------------------
DROP TABLE IF EXISTS `sys_dict_data`;
CREATE TABLE `sys_dict_data`  (
  `data_id` char(19) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '标识',
  `data_label` char(19) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '字典标签',
  `data_value` char(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '字典值',
  `type_code` char(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '所属类型',
  `is_default` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否默认',
  `update_by` char(19) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '修改人',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  `create_by` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '创建人',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `remark` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  `enable` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否启用',
  PRIMARY KEY (`data_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_dict_data
-- ----------------------------
INSERT INTO `sys_dict_data` VALUES ('1', '男', '0', 'system_user_sex', '0', NULL, NULL, NULL, NULL, '描述', '1');
INSERT INTO `sys_dict_data` VALUES ('1302833449496739840', '字典名称', '字典值', 'dict_code', '1', NULL, NULL, NULL, NULL, 'aw', '0');
INSERT INTO `sys_dict_data` VALUES ('1317401149287956480', '男', 'boy', 'user_sex', NULL, NULL, NULL, NULL, NULL, '男 : body', '0');
INSERT INTO `sys_dict_data` VALUES ('1317402976670711808', '女', 'girl', 'user_sex', NULL, NULL, NULL, NULL, NULL, '女 : girl', '0');
INSERT INTO `sys_dict_data` VALUES ('1370411072367886336', '公告', 'public', 'sys_notice_type', NULL, NULL, NULL, NULL, NULL, '公告', '0');
INSERT INTO `sys_dict_data` VALUES ('1370411179544936448', '私信', 'private', 'sys_notice_type', NULL, NULL, NULL, NULL, NULL, '私信', '0');
INSERT INTO `sys_dict_data` VALUES ('1387076909438861312', '短信', 'smmm', 'sys_notice_type', NULL, NULL, NULL, NULL, NULL, NULL, '0');
INSERT INTO `sys_dict_data` VALUES ('2', '女', '1', 'system_user_sex', '1', NULL, NULL, NULL, NULL, '描述', '0');
INSERT INTO `sys_dict_data` VALUES ('447572898392182784', 'awd', 'awd', 'dict_code', '1', NULL, NULL, NULL, NULL, 'awd', '0');

-- ----------------------------
-- Table structure for sys_dict_type
-- ----------------------------
DROP TABLE IF EXISTS `sys_dict_type`;
CREATE TABLE `sys_dict_type`  (
  `id` char(19) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '标识',
  `type_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '字典类型名称',
  `type_code` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '字典类型标识',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '字典类型描述',
  `enable` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否启用',
  `create_by` char(19) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '创建人',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` char(19) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '修改人',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  `remark` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_dict_type
-- ----------------------------
INSERT INTO `sys_dict_type` VALUES ('1317360314219495424', '登录类型', 'sys_notice_type', '登录类型', '0', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_dict_type` VALUES ('1317400519127334912', '用户类型', 'user_status', '用户类型', '0', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_dict_type` VALUES ('1317400823096934400', '配置类型', 'config_type', '配置类型', '0', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_dict_type` VALUES ('1370410853110644736', '消息类型', 'sys_notice_type', '消息类型', '0', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_dict_type` VALUES ('455184568505470976', '用户性别', 'user_sex', '用户性别', '0', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_dict_type` VALUES ('455184935989415936', '全局状态', 'sys_status', '状态描述\n', '0', NULL, NULL, NULL, NULL, NULL);

-- ----------------------------
-- Table structure for sys_file
-- ----------------------------
DROP TABLE IF EXISTS `sys_file`;
CREATE TABLE `sys_file`  (
  `id` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '标识',
  `file_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '文件名称',
  `file_desc` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '文件描述',
  `file_path` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '文件路径',
  `file_type` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '文件类型',
  `create_by` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '创建人',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '修改人',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  `remark` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  `target_date` datetime(0) NULL DEFAULT NULL COMMENT '所属时间',
  `file_size` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '文件大小',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for sys_logging
-- ----------------------------
DROP TABLE IF EXISTS `sys_logging`;
CREATE TABLE `sys_logging`  (
  `id` char(19) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '相应消息体',
  `title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '标题',
  `method` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '请求方式',
  `business_type` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '业务类型',
  `request_method` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '请求方法',
  `operate_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '操作人',
  `operate_url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '操作路径',
  `operate_address` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '操作地址',
  `request_param` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '请求参数',
  `response_body` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '相应消息体',
  `success` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否成功',
  `error_msg` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '异常信息',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '描述',
  `request_body` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '请求消息体',
  `browser` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '使用浏览器',
  `system_os` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '操作系统',
  `logging_type` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '日志类型，登录日志，操作日志',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_logging
-- ----------------------------
INSERT INTO `sys_logging` VALUES ('1387093346635218944', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-04-28 01:16:39', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1387093352247197696', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-04-28 01:16:41', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1387093362711986176', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-04-28 01:16:43', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1419546340035133440', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-26 14:33:16', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1419546345684860928', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-26 14:33:17', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1419546429705158656', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-26 14:33:37', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1419549070069858304', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-26 14:44:07', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1419549074641649664', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-26 14:44:08', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1419549528591171584', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-26 14:45:56', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1419550322728108032', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-26 14:49:06', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1419550431968755712', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-26 14:49:32', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1419550492979101696', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-26 14:49:46', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1419550609446535168', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-26 14:50:14', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1419551519400787968', 'Remember Me', '/', 'OTHER', 'GET', 'admin', '/', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-26 14:53:51', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1419551594940203008', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-26 14:54:09', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1419552743185448960', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-26 14:58:43', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1419555507630243840', 'Remember Me', '/', 'OTHER', 'GET', 'admin', '/', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-26 15:09:42', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1419555928029528064', 'Remember Me', '/', 'OTHER', 'GET', 'admin', '/', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-26 15:11:22', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1419555965690183680', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-26 15:11:31', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1419556578108899328', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-26 15:13:57', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1419556583477608448', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-26 15:13:58', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1419556714625105920', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-26 15:14:30', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1419556719729573888', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-26 15:14:31', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1419556728239816704', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-26 15:14:33', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1419557004787056640', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-26 15:15:39', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1419557163528880128', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-26 15:16:17', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1419561230858715136', 'Remember Me', '/index', 'OTHER', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-26 15:32:26', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1419564882776293376', 'Remember Me', '/', 'OTHER', 'GET', 'admin', '/', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-26 15:46:57', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1419567391288852480', 'Remember Me', '/', 'OTHER', 'GET', 'admin', '/', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-26 15:56:55', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1419597359926476800', 'Remember Me', '/', 'OTHER', 'GET', 'admin', '/', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-26 17:56:00', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1419841569258733568', 'Remember Me', '/', 'OTHER', 'GET', 'admin', '/', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-27 10:06:24', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1420935078011207680', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-30 10:31:37', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1420935083786764288', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-30 10:31:38', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1420935768318148608', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-30 10:34:22', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1420936339511050240', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-30 10:36:38', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1420940531965362176', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-30 10:53:17', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1420940537459900416', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-30 10:53:19', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1420940770151497728', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-30 10:54:14', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1420941034422009856', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-07-30 10:55:17', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422384058616250368', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 10:29:21', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422384064232423424', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 10:29:22', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422384330914660352', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 10:30:26', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422385422461304832', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 10:34:46', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422385428173946880', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 10:34:47', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422386353651318784', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 10:38:28', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422386359426875392', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 10:38:29', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422387484418899968', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 10:42:58', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422387489967964160', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 10:42:59', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422387623648821248', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 10:43:31', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422387710437359616', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 10:43:52', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422391092963180544', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 10:57:18', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422391097933430784', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 10:57:19', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422391134033805312', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 10:57:28', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422391138723037184', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 10:57:29', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422392148258455552', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 11:01:30', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422392153912377344', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 11:01:31', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422392163840294912', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 11:01:33', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422394841102286848', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 11:12:12', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422394846831706112', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 11:12:13', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422394858252795904', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 11:12:16', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422397285815287808', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 11:21:54', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422397291582455808', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 11:21:56', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422397298813435904', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 11:21:58', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422399685619875840', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 11:31:27', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422399691491901440', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 11:31:28', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422399698886459392', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 11:31:30', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422400431924969472', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 11:34:25', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422400437553725440', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 11:34:26', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422400444327526400', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 11:34:28', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422400468184727552', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 11:34:33', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422400474430046208', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 11:34:35', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422405730996060160', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 11:55:28', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422405736784199680', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 11:55:29', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422405743713189888', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 11:55:31', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422406860174000128', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 11:59:57', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422406865916002304', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 11:59:59', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422406872706580480', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 12:00:00', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422408294412058624', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 12:05:39', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422408300196003840', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 12:05:40', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422408307498287104', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 12:05:42', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422409227510480896', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 12:09:22', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422409233143431168', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 12:09:23', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422409240064032768', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 12:09:25', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422410065981210624', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 12:12:41', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422410071647715328', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 12:12:43', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422410078052417536', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 12:12:44', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422413667395174400', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 12:27:00', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422413672877129728', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 12:27:01', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422413679139225600', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 12:27:03', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422414495266897920', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 12:30:18', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422414501109563392', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 12:30:19', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422414508701253632', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 12:30:21', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422415007739543552', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 12:32:20', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422415013909364736', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 12:32:21', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422416065421377536', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 12:36:32', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422416071163379712', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 12:36:33', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422416077127680000', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 12:36:35', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422416280438177792', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 12:37:23', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422416286117265408', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 12:37:24', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422416293193056256', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 12:37:26', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422417108590919680', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 12:40:41', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422417114479722496', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 12:40:42', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422417123174514688', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 12:40:44', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422430969876447232', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 13:35:45', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422430975756861440', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 13:35:47', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422430984262909952', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 13:35:49', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422433062267912192', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 13:44:04', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422433067926028288', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 13:44:06', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422433076276887552', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 13:44:08', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422433690801143808', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 13:46:34', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422433733083922432', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 13:46:44', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422434081873854464', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 13:48:07', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422434087569719296', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 13:48:09', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422434108029534208', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 13:48:14', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422434753058963456', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 13:50:47', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422434758750633984', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 13:50:49', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422434767676112896', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 13:50:51', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422444811188699136', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 14:30:45', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422444816905535488', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 14:30:47', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422445341541662720', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 14:32:52', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422446184953282560', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 14:36:13', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422446190800142336', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 14:36:14', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422447084082036736', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 14:39:47', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422447089970839552', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 14:39:49', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422448135023624192', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 14:43:58', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422448375575347200', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 14:44:55', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422448381376069632', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 14:44:57', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422448604693397504', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 14:45:50', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422448611412672512', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 14:45:51', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422448834260238336', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 14:46:45', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422448839951908864', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 14:46:46', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422449538307719168', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 14:49:32', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422449544053915648', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 14:49:34', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422450434022309888', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 14:53:06', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422450439562985472', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 14:53:07', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422450649387237376', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 14:53:57', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422451604442841088', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 14:57:45', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422451610134511616', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 14:57:46', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422451696377790464', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 14:58:07', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422452995534094336', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 15:03:17', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422453001284485120', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 15:03:18', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422453908491468800', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 15:06:54', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422453914141196288', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 15:06:56', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422454971818835968', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 15:11:08', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422454977586003968', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 15:11:09', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422455402129260544', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 15:12:50', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422455407795765248', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 15:12:52', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422456207041363968', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 15:16:02', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422456212837892096', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 15:16:04', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422456972623478784', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 15:19:05', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422460592148447232', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 15:33:28', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422460598016278528', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 15:33:29', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422460608011304960', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 15:33:32', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422464491328634880', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 15:48:58', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422464497162911744', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 15:48:59', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422464502586146816', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 15:49:00', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422464862872666112', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 15:50:26', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422464868644028416', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 15:50:27', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422464874046291968', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 15:50:29', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422465617801248768', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 15:53:26', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422465624377917440', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 15:53:28', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422465627716583424', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 15:53:28', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422466346674814976', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 15:56:20', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422466353322786816', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 15:56:21', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422466357147992064', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 15:56:22', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422470698009362432', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 16:13:37', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422479555632824320', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 16:48:49', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422479562809278464', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 16:48:51', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422479565392969728', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 16:48:51', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422479854447624192', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 16:50:00', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422480340739424256', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 16:51:56', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422480346263322624', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 16:51:58', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422480782923923456', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 16:53:42', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422480788716257280', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 16:53:43', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422480796383444992', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 16:53:45', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422481401097224192', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 16:56:09', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422481406822449152', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 16:56:10', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422481409427111936', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 16:56:11', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422481459775537152', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 16:56:23', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422482221763133440', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 16:59:25', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422482637267664896', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:01:04', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422482642992889856', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:01:05', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422482664887156736', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:01:10', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422482751059132416', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:01:31', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422484248434049024', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:07:28', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422484257212727296', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:07:30', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422484258764619776', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:07:30', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422484616274509824', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:08:56', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422484621991346176', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:08:57', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422484883854327808', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:09:59', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422484889726353408', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:10:01', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422484914544050176', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:10:07', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422485226474438656', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:11:21', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422485232413573120', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:11:23', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422485242014334976', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:11:25', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422485698509799424', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:13:14', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422485704314716160', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:13:15', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422486225809309696', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:15:19', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422486233845596160', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:15:21', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422486234361495552', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:15:21', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422486949058314240', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:18:12', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422486954917756928', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:18:13', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422486963348307968', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:18:15', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422487238033276928', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:19:21', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422487243670421504', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:19:22', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422487263761137664', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:19:27', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422487494082953216', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:20:22', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422487499783012352', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:20:23', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422487532762824704', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:20:31', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422488378187710464', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:23:53', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422488383829049344', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:23:54', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422488399180201984', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:23:58', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422488951368712192', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:26:09', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422488957228154880', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:26:11', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422488983287365632', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:26:17', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422490112335282176', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:30:46', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422490118102450176', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:30:47', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422490168891277312', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:31:00', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422496368366190592', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:55:38', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422496374171107328', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:55:39', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422496383708954624', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:55:41', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422496410661552128', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-03 17:55:48', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422726654668570624', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 09:10:42', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422726660465098752', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 09:10:44', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422728243932299264', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 09:17:01', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422728249552666624', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 09:17:02', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422729875436863488', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 09:23:30', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422729881061425152', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 09:23:31', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422730294749822976', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 09:25:10', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422730300449882112', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 09:25:11', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422731838241112064', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 09:31:18', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422748811326914560', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 10:38:45', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422748817010196480', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 10:38:46', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422749403923349504', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 10:41:06', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422749409573076992', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 10:41:07', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422750530953805824', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 10:45:35', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422750536637087744', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 10:45:36', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422751448352948224', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 10:49:13', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422751454036230144', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 10:49:15', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422761056777797632', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 11:27:24', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422761062431719424', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 11:27:26', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422767395885285376', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 11:52:36', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422767401593733120', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 11:52:37', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422767963215233024', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 11:54:51', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422767968953040896', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 11:54:52', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422768077359022080', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 11:55:18', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422768403738787840', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 11:56:36', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422783300908351488', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 12:55:48', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422824425270542336', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 15:39:12', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422824431117402112', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 15:39:14', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422824706347630592', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 15:40:19', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422824711779254272', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 15:40:21', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422825525834940416', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 15:43:35', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422825531551776768', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 15:43:36', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422828256582696960', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 15:54:26', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422828262085623808', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 15:54:27', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422828266477060096', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 15:54:28', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422828312568266752', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 15:54:39', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422830325624471552', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 16:02:39', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422830331165147136', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 16:02:41', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422834657191264256', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 16:19:52', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422834662966820864', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 16:19:53', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422834667161124864', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 16:19:54', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422836915186434048', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 16:28:50', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422836920974573568', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 16:28:52', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422836925454090240', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 16:28:53', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422837034870898688', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 16:29:19', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422838452038139904', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 16:34:57', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422859979940954112', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 18:00:29', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422859985771036672', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 18:00:31', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422860745695035392', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 18:03:32', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422860750057111552', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 18:03:33', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1422862121460301824', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 18:09:00', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1422862127101640704', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-04 18:09:01', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423091390698487808', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 09:20:02', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423091396532764672', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 09:20:03', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423096911010725888', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 09:41:58', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423096916681424896', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 09:41:59', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423097796470243328', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 09:45:29', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423097802191273984', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 09:45:31', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423097819824128000', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 09:45:35', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423097833765994496', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 09:45:38', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423099771081457664', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 09:53:20', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423099776890568704', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 09:53:21', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423099779767861248', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 09:53:22', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423100462634106880', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 09:56:05', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423100470133522432', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 09:56:07', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423100473501548544', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 09:56:07', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423100479864307712', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 09:56:09', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423108043373019136', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 10:26:12', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423108049077272576', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 10:26:14', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423108052101365760', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 10:26:14', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423108066999533568', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 10:26:18', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423110986931372032', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 10:37:54', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423110992644014080', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 10:37:55', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423111267559669760', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 10:39:01', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423111273352003584', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 10:39:02', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423111293639852032', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 10:39:07', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423111440998334464', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 10:39:42', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423111593092186112', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 10:40:19', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423111688529379328', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 10:40:41', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423111694242021376', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 10:40:43', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423111707051425792', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 10:40:46', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423136819272220672', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 12:20:33', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423136825072943104', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 12:20:34', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423136828721987584', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 12:20:35', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423137522711527424', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 12:23:21', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423137527019077632', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 12:23:22', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423143690007740416', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 12:47:51', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423143695829434368', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 12:47:52', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423143727001501696', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 12:48:00', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423155839975292928', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 13:36:08', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423155845771821056', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 13:36:09', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423155849051766784', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 13:36:10', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423159014069370880', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 13:48:45', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423159019668766720', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 13:48:46', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423159022843854848', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 13:48:47', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423160757121449984', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 13:55:40', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423160762867646464', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 13:55:42', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423160769041661952', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 13:55:43', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423161218633302016', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 13:57:30', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423161224186560512', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 13:57:32', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423161227546198016', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 13:57:32', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423164772366417920', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 14:11:38', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423164778100031488', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 14:11:39', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423164781791019008', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 14:11:40', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423168409645875200', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 14:26:05', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423168413395582976', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 14:26:06', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423168798722097152', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 14:27:37', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423168803709124608', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 14:27:39', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423171170835890176', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 14:37:03', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423171176531755008', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 14:37:04', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423171182647050240', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 14:37:06', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423175007080546304', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 14:52:18', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423175012919017472', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 14:52:19', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423175020007391232', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 14:52:21', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423176051688734720', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 14:56:27', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423176057279741952', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 14:56:28', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423176069237702656', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 14:56:31', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423176767337660416', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 14:59:17', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423176772970610688', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 14:59:19', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423176781824786432', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 14:59:21', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423178614739828736', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 15:06:38', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423178729152053248', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 15:07:05', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423178798022524928', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 15:07:21', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423192951265165312', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 16:03:36', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423192957032333312', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 16:03:37', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423193402941374464', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 16:05:24', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423193408679182336', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 16:05:25', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423194302699274240', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 16:08:58', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423194308328030208', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 16:08:59', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423195009863122944', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 16:11:47', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423195018947985408', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 16:11:49', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423195245931134976', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 16:12:43', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423195250658115584', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 16:12:44', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423199327127339008', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 16:28:56', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423199332827398144', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 16:28:57', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423201473780514816', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 16:37:28', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423201479660929024', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 16:37:29', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423202736857415680', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 16:42:29', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423211391413649408', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 17:16:52', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423211397155651584', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 17:16:54', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423212380665413632', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 17:20:48', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423212387476963328', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 17:20:50', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423212591999614976', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 17:21:39', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423213338870939648', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 17:24:37', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423213344587776000', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 17:24:38', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423214085385748480', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 17:27:35', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423214096823615488', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 17:27:37', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423214100371996672', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 17:27:38', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423214110291525632', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 17:27:41', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423216875122196480', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 17:38:40', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423216880834838528', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-05 17:38:41', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423480366789820416', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 11:05:41', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423480373790113792', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 11:05:43', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423480915408977920', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 11:07:52', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423480922237304832', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 11:07:54', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423484713640656896', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 11:22:57', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423484720531898368', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 11:22:59', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423495426585133056', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 12:05:32', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423495432482324480', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 12:05:33', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423504171167907840', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 12:40:16', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423504176951853056', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 12:40:18', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423519466330783744', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 13:41:03', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423519471812739072', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 13:41:04', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423525648537747456', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 14:05:37', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423525654569156608', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 14:05:39', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423549643362402304', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 15:40:58', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423549649284759552', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 15:40:59', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423554737071980544', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 16:01:12', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423554742751068160', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 16:01:14', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423555913096101888', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 16:05:53', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423556042846896128', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 16:06:24', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423556067236773888', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 16:06:29', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423556260619354112', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 16:07:16', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423558540643008512', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 16:16:19', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423558546410176512', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 16:16:21', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423558843224293376', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 16:17:31', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423558848882409472', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 16:17:33', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423559515688665088', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 16:20:12', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423559521388724224', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 16:20:13', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423559876470112256', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 16:21:38', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423559882220503040', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 16:21:39', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423563739902246912', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 16:36:59', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423563745602306048', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 16:37:00', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423565332383006720', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 16:43:18', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423565417992945664', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 16:43:39', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423570269485662208', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 17:02:56', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423570275261218816', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 17:02:57', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423572745412673536', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 17:12:46', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423572751221784576', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 17:12:47', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423572810457939968', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 17:13:01', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423577630921195520', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 17:32:11', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423577636495425536', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 17:32:12', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423577887709069312', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 17:33:12', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423577893652398080', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 17:33:13', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423578277192138752', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 17:34:45', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423579413903048704', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 17:39:16', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423579419733131264', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 17:39:17', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1423579878078283776', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 17:41:06', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1423579885443481600', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-06 17:41:08', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424556106671194112', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 10:20:17', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424556112375447552', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 10:20:19', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424556363945607168', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 10:21:19', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424556369624694784', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 10:21:20', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424556865219461120', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 10:23:18', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424556870961463296', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 10:23:20', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424557935115108352', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 10:27:33', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424557940785807360', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 10:27:35', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424579590977748992', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 11:53:37', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424579596669419520', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 11:53:38', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424606099419430912', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 13:38:57', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424606105039798272', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 13:38:58', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424608006489767936', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 13:46:31', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424608012030443520', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 13:46:33', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424608947905495040', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 13:50:16', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424608953525862400', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 13:50:17', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424615475832160256', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 14:16:12', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424615481486082048', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 14:16:14', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424616625306337280', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 14:20:46', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424618275148398592', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 14:27:20', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424618281070755840', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 14:27:21', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424619797450063872', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 14:33:23', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424619803011710976', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 14:33:24', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424620573153034240', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 14:36:27', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424620578593046528', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 14:36:29', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424623053354041344', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 14:46:19', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424623058827608064', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 14:46:20', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424623677126737920', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 14:48:48', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424623682755493888', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 14:48:49', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424624132120641536', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 14:50:36', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424628237325041664', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 15:06:55', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424629142090940416', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 15:10:30', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424629147757445120', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 15:10:32', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424631173203623936', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 15:18:35', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424631178693967872', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 15:18:36', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424662358248128512', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 17:22:30', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424662363822358528', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 17:22:31', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424663078129106944', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 17:25:21', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424663083736891392', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-09 17:25:23', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424912186752368640', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 09:55:14', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424912192595034112', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 09:55:15', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424924055575724032', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 10:42:23', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424924061254811648', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 10:42:25', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424924659253510144', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 10:44:47', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424924665012289536', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 10:44:49', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424925215355305984', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 10:47:00', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424925221030199296', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 10:47:01', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424927059792101376', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 10:54:20', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424927065441828864', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 10:54:21', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424927384951324672', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 10:55:37', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424927506552586240', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 10:56:06', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424927512000987136', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 10:56:07', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424928165897175040', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 10:58:43', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424928171437850624', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 10:58:45', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424929307586723840', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 11:03:15', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424929313211285504', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 11:03:17', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424929645475659776', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 11:04:36', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424929651108610048', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 11:04:37', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424930695880376320', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 11:08:46', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424930701563658240', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 11:08:48', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424931234173157376', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 11:10:55', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424931239810301952', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 11:10:56', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424931822109720576', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 11:13:15', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424931827725893632', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 11:13:16', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424933215604310016', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 11:18:47', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424933221237260288', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 11:18:49', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424935249124524032', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 11:26:52', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424935254686171136', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 11:26:53', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424936297037824000', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 11:31:02', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424936302712717312', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 11:31:03', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424936757727592448', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 11:32:52', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424936763352154112', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 11:32:53', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424941151810486272', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 11:50:19', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424941157426659328', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 11:50:21', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424942931038437376', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 11:57:24', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424942936381980672', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 11:57:25', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424950270495817728', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 12:26:33', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424950276149739520', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 12:26:35', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424957564042346496', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 12:55:32', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424957569452998656', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 12:55:34', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424968870677970944', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 13:40:28', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424968876071845888', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 13:40:29', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424972800212336640', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 13:56:05', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424972805748817920', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 13:56:06', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424979092268122112', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 14:21:05', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424979097951404032', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 14:21:06', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424981207447240704', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 14:29:29', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424981213063413760', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 14:29:31', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424982948943233024', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 14:36:25', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424982954551017472', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 14:36:26', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424983132167208960', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 14:37:08', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424984346887979008', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 14:41:58', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424984352525123584', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 14:41:59', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424985491182190592', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 14:46:31', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424985496831918080', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 14:46:32', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424985521897078784', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 14:46:38', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424986571509071872', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 14:50:48', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424986577062330368', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 14:50:50', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424986789197643776', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 14:51:40', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424986794901897216', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 14:51:42', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424986948446978048', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 14:52:18', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1424986954180591616', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 14:52:20', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1424987858397036544', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 14:55:55', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425027370120642560', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 17:32:55', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425027375883616256', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 17:32:57', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425027931398209536', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 17:35:09', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425027937031159808', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 17:35:11', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425028371162595328', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 17:36:54', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425028376778768384', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 17:36:55', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425029328151773184', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 17:40:42', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425029333784723456', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 17:40:44', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425029829169774592', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 17:42:42', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425029834865639424', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 17:42:43', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425030126537539584', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 17:43:53', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425030132178878464', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 17:43:54', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425030956594495488', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 17:47:11', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425030962156142592', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 17:47:12', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425031450893221888', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 17:49:08', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425031456568115200', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-10 17:49:10', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425335919765880832', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-11 13:58:59', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425335925725986816', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-11 13:59:01', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425339395728211968', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-11 14:12:48', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425339401436659712', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-11 14:12:49', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425342061845938176', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-11 14:23:24', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425342067520831488', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-11 14:23:25', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425344310382952448', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-11 14:32:20', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425344316091400192', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-11 14:32:21', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425345464806408192', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-11 14:36:55', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425345470183505920', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-11 14:36:56', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425348194782412800', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-11 14:47:46', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425348200457306112', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-11 14:47:47', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425663848014151680', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 11:42:04', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425663854037172224', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 11:42:05', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425664072010956800', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 11:42:57', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425664077685850112', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 11:42:58', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425678054222462976', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 12:38:31', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425678059524063232', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 12:38:32', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425696517825495040', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 13:51:53', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425698319761408000', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 13:59:02', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425698325499215872', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 13:59:04', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425698328842076160', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 13:59:04', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425698386954158080', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 13:59:18', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425698390104080384', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 13:59:19', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425698457326190592', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 13:59:35', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425698505443246080', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 13:59:47', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425698513336926208', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 13:59:48', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425698907383398400', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 14:01:22', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425698915100917760', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 14:01:24', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425699181426638848', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 14:02:28', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425699230969757696', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 14:02:40', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425699391007621120', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 14:03:18', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425699695795109888', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 14:04:30', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425699701398700032', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 14:04:32', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425699728758145024', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 14:04:38', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425715573811052544', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 15:07:36', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425715579313979392', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 15:07:37', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425715584619773952', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 15:07:39', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425717367043784704', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 15:14:44', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425717372467019776', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 15:14:45', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425717397557346304', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 15:14:51', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425718243108061184', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 15:18:12', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425718248665513984', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 15:18:14', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425718254067777536', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 15:18:15', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425718956278153216', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 15:21:02', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425718962020155392', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 15:21:04', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425732340822310912', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 16:14:14', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425732346409123840', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 16:14:15', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425732361982574592', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 16:14:19', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425733725051682816', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 16:19:44', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425733727400493056', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 16:19:44', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425734382068432896', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 16:22:20', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425735640774868992', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 16:27:20', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425735646583980032', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 16:27:22', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425737506615197696', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 16:34:45', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425737512273313792', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 16:34:47', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425738559247089664', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 16:38:56', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425738565358190592', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 16:38:58', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425739847582089216', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 16:44:03', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425739853336674304', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 16:44:05', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425741015758667776', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 16:48:42', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425741022167564288', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 16:48:43', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425749721040814080', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 17:23:17', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425749726170447872', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 17:23:19', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425749757648699392', '查询用户', '/system/user/data', 'QUERY', 'GET', 'admin', '/system/user/data', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 17:23:26', '查询用户', 'page=1&limit=10', '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425754363938209792', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 17:41:44', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425754369323696128', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 17:41:46', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1425754712837193728', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 17:43:07', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1425754718528864256', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-12 17:43:09', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1426061315385851904', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-13 14:01:27', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1426061321178185728', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-13 14:01:29', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1426081305388384256', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-13 15:20:53', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1426081310564155392', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-13 15:20:54', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1426083297376600064', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-13 15:28:48', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1426083303093436416', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-13 15:28:49', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');
INSERT INTO `sys_logging` VALUES ('1426084363333795840', '登录', '/login', 'OTHER', 'POST', 'admin', '/login', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-13 15:33:02', '登录成功', NULL, '谷歌浏览器', 'Windows', 'LOGIN');
INSERT INTO `sys_logging` VALUES ('1426084369038049280', '主页', '/index', 'ADD', 'GET', 'admin', '/index', '127.0.0.1', NULL, NULL, '1', NULL, '2021-08-13 15:33:04', '返回 Index 主页视图', NULL, '谷歌浏览器', 'Windows', 'OPERATE');

-- ----------------------------
-- Table structure for sys_mail
-- ----------------------------
DROP TABLE IF EXISTS `sys_mail`;
CREATE TABLE `sys_mail`  (
  `mail_id` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '邮件id(主键)',
  `receiver` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '0' COMMENT '收件人邮箱',
  `subject` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '邮件主体',
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '邮件正文',
  `create_by` varchar(16) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '发送人',
  `create_time` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  PRIMARY KEY (`mail_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_mail
-- ----------------------------
INSERT INTO `sys_mail` VALUES ('1349598576807772160', '1218600762@qq.com', 'macbook pro', '13.3寸\nm1处理器\n16G内存', 'admin', '2021-01-14 06:06:23');
INSERT INTO `sys_mail` VALUES ('1357215518368464896', 'BoscoKuo@aliyun.com', '湖人总冠军', '湖人总冠军', 'admin', '2021-02-04 06:33:36');
INSERT INTO `sys_mail` VALUES ('1357219037586653184', 'BoscoKuo@aliyun.com', 'LebronJames', 'Lakers', 'admin', '2021-02-04 06:47:35');

-- ----------------------------
-- Table structure for sys_notice
-- ----------------------------
DROP TABLE IF EXISTS `sys_notice`;
CREATE TABLE `sys_notice`  (
  `id` char(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '编号',
  `title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '标题',
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '内容',
  `sender` char(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '发送人',
  `accept` char(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '接收者',
  `type` char(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '类型',
  `create_by` char(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '创建人',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` char(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '修改人',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  `remark` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_notice
-- ----------------------------
INSERT INTO `sys_notice` VALUES ('1370769290961092608', '公告测试', '公告测试', '1309861917694623744', NULL, 'public', NULL, '2021-03-14 00:10:41', NULL, NULL, NULL);
INSERT INTO `sys_notice` VALUES ('1370769348204953600', '私信测试', '私信测试', '1309861917694623744', '1310409555649232897', 'private', NULL, '2021-03-14 00:10:55', NULL, NULL, NULL);
INSERT INTO `sys_notice` VALUES ('1370771980034244608', '公告测试', '公告测试', '1309861917694623744', NULL, 'public', NULL, '2021-03-14 00:21:22', NULL, NULL, NULL);
INSERT INTO `sys_notice` VALUES ('1370772014771470336', '公告测试', '公告测试', '1309861917694623744', NULL, 'public', NULL, '2021-03-14 00:21:31', NULL, NULL, NULL);
INSERT INTO `sys_notice` VALUES ('1370772050439831552', '公告测试', '公告测试', '1309861917694623744', NULL, 'public', NULL, '2021-03-14 00:21:39', NULL, NULL, NULL);
INSERT INTO `sys_notice` VALUES ('1370772089446858752', '私信测试', '私信测试', '1309861917694623744', '1310409555649232897', 'private', NULL, '2021-03-14 00:21:48', NULL, NULL, NULL);
INSERT INTO `sys_notice` VALUES ('1370772143918284800', '私信测试', '私信测试', '1309861917694623744', '1310409555649232897', 'private', NULL, '2021-03-14 00:22:01', NULL, NULL, NULL);
INSERT INTO `sys_notice` VALUES ('1370772363838226432', '私信测试', '私信测试', '1309861917694623744', '1349021166525743105', 'private', NULL, '2021-03-14 00:22:54', NULL, NULL, NULL);
INSERT INTO `sys_notice` VALUES ('1370772466212798464', '私信测试', '私信测试', '1309861917694623744', '1349021166525743105', 'private', NULL, '2021-03-14 00:23:18', NULL, NULL, NULL);
INSERT INTO `sys_notice` VALUES ('1370971086266564608', '私信测试', '私信测试', '1309861917694623744', '1309861917694623744', 'private', NULL, '2021-03-14 13:32:33', NULL, NULL, NULL);

-- ----------------------------
-- Table structure for sys_power
-- ----------------------------
DROP TABLE IF EXISTS `sys_power`;
CREATE TABLE `sys_power`  (
  `power_id` char(19) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '权限编号',
  `power_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '权限名称',
  `power_type` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '权限类型',
  `power_code` char(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '权限标识',
  `power_url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '权限路径',
  `open_type` char(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '打开方式',
  `parent_id` char(19) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '父类编号',
  `icon` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '图标',
  `sort` int(11) NULL DEFAULT NULL COMMENT '排序',
  `create_by` char(19) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '创建人',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` char(19) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '修改人',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  `remark` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  `enable` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否开启',
  PRIMARY KEY (`power_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_power
-- ----------------------------
INSERT INTO `sys_power` VALUES ('1', '系统管理', '0', '', '', NULL, '0', 'layui-icon layui-icon-set-fill', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1284020948269268992', '用户列表', '2', 'sys:user:data', '', '', '2', 'layui-icon-username', 0, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1284022967767924736', '用户保存', '2', 'sys:user:add', '', '', '2', 'layui-icon-username', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1302180351979814912', '布局构建', '1', 'generator:from:main', 'component/code/index.html', '_iframe', '442417411065516032', 'layui-icon-senior', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1304387665067507712', '数据字典', '1', 'sys:dictType:main', '/system/dictType/main', '_iframe', '1', 'layui-icon layui-icon layui-icon layui-icon layui-icon-flag', 4, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1304793451996381184', '文件管理', '1', 'sys:file:main', '/system/file/main', '_iframe', '1', 'layui-icon layui-icon layui-icon-read', 5, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1305875436139446272', '百度一下', '1', 'http://www.baidu.com', 'http://www.baidu.com', '0', '451002662209589248', 'layui-icon-search', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1307299332784914432', '系统配置', '1', 'sys:config:main', '/system/config/main', '0', '1', 'layui-icon layui-icon layui-icon-note', 6, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310206853057085440', '用户修改', '2', 'sys:user:edit', '', '', '2', 'layui-icon-vercode', 0, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310208636370288640', '用户删除', '2', 'sys:user:remove', '', '', '2', 'layui-icon-vercode', 0, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310209696916832256', '角色新增', '2', 'sys:role:add', '', '', '3', 'layui-icon-vercode', 0, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310209900478988288', '角色删除', '2', 'sys:role:remove', '', '', '3', 'layui-icon-vercode', 0, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310210054728712192', '角色修改', '2', 'sys:role:edit', '', '', '3', 'layui-icon-vercode', 0, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310211965188046848', '角色授权', '2', 'sys:role:power', '', '', '3', 'layui-icon-vercode', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310226416867999744', '权限列表', '2', 'sys:power:data', '', '', '4', 'layui-icon-vercode', 0, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310226976593674240', '权限新增', '2', 'sys:power:add', '', '', '4', 'layui-icon-vercode', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310227130998587392', '权限修改', '2', 'sys:power:edit', '', '', '4', 'layui-icon-vercode', 2, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310227300935008256', '权限删除', '2', 'sys:power:remove', '', '', '4', 'layui-icon-vercode', 3, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310232350285627392', '操作日志', '2', 'sys:log:operateLog', '', '', '450300705362808832', 'layui-icon layui-icon-vercode', 0, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310232462562951168', '登录日志', '2', 'sys:log:loginLog', '', '', '450300705362808832', 'layui-icon layui-icon-vercode', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310238229588344832', '配置列表', '2', 'sys:config:data', '', '', '1307299332784914432', 'layui-icon-vercode', 0, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310238417082122240', '配置新增', '2', 'sys:config:add', '', '', '1307299332784914432', 'layui-icon-vercode', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310238574355939328', '配置修改', '2', 'sys:config:edit', '', '', '1307299332784914432', 'layui-icon-vercode', 2, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310238700705153024', '配置删除', '2', 'sys:config:remove', '', '', '1307299332784914432', 'layui-icon-vercode', 3, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310243862937075712', '文件列表', '2', 'sys:file:data', '', '', '1304793451996381184', 'layui-icon-vercode', 0, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310244103824343040', '文件新增', '2', 'sys:file:add', '', '', '1304793451996381184', 'layui-icon-vercode', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310244248884346880', '文件删除', '2', 'sys:file:remove', '', '', '1304793451996381184', 'layui-icon-vercode', 3, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310390699333517312', '任务列表', '2', 'sch:job:data', '', '', '442650770626711552', 'layui-icon-vercode', 0, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310390994826428416', '任务新增', '2', 'sch:job:add', '', '', '442650770626711552', 'layui-icon-vercode', 0, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310391095670079488', '任务修改', '2', 'sch:job:edit', '', '', '442650770626711552', 'layui-icon-vercode', 2, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310391707069579264', '任务删除', '2', 'sch:job:remove', '', '', '442650770626711552', 'layui-icon-vercode', 3, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310395250908332032', '日志列表', '2', 'sch:log:data', '', '', '442651158935375872', 'layui-icon-vercode', 0, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310397832091402240', '任务恢复', '2', 'sch:job:resume', '', '', '442650770626711552', 'layui-icon-vercode', NULL, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310398020692475904', '任务停止', '2', 'sch:job:pause', '', '', '442650770626711552', 'layui-icon-vercode', 3, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310398158974484480', '任务运行', '2', 'sch:job:run', '', '', '442650770626711552', 'layui-icon-vercode', 4, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310402491631796224', '数据类型列表', '2', 'sys:dictType:data', '', '', '1304387665067507712', 'layui-icon-vercode', 0, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310402688881524736', '数据类型新增', '2', 'sys:dictType:add', '', '', '1304387665067507712', 'layui-icon-vercode', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310402817776680960', '数据类型修改', '2', 'sys:dictType:edit', '', '', '1304387665067507712', 'layui-icon-vercode', 3, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310403004406431744', '数据类型删除', '2', 'sys:dictType:remove', '', '', '1304387665067507712', 'layui-icon-vercode', 3, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310404584291696640', '数据字典视图', '2', 'sys:dictData:main', '', '', '1304387665067507712', 'layui-icon-vercode', 0, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310404705934901248', '数据字典列表', '2', 'sys:dictData:data', '', '', '1304387665067507712', 'layui-icon-vercode', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310404831407505408', '数据字典新增', '2', 'sys:dictData:add', '', '', '1304387665067507712', 'layui-icon-vercode', 5, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310404999599095808', '数据字典删除', '2', 'sys:dictData:remove', '', '', '1304387665067507712', 'layui-icon-vercode', 6, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1310405161587310592', '数据字典修改', '2', 'sys:dictData:edit', '', '', '1304387665067507712', 'layui-icon-vercode', 0, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1313142510486290432', '公告列表', '1', 'sys:notice:data', '/system/notice/data', '0', '1313142171393589248', 'layui-icon-notice', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1313482983558086656', '公告新增', '2', 'sys:notice:add', '', '', '1313142171393589248', 'layui-icon-vercode', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1313483090852577280', '公告修改', '2', 'sys:notice:edit', '', '', '1313142171393589248', 'layui-icon-vercode', 2, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1313483189850734592', '公告删除', '2', 'sys:notice:remove', '', '', '1313142171393589248', 'layui-icon-vercode', 3, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1315584471046553600', '部门管理', '1', 'sys:dept:main', '/system/dept/main', '_iframe', '1', 'layui-icon layui-icon layui-icon layui-icon-vercode', 3, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1316558444790022144', '部门新增', '2', 'sys:dept:add', '', '', '1315584471046553600', 'layui-icon layui-icon-vercode', 0, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1316558556102656000', '部门修改', '2', 'sys:dept:edit', '', '', '1315584471046553600', 'layui-icon layui-icon-vercode', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1316558685442408448', '部门删除', '2', 'sys:dept:remove', '', '', '1315584471046553600', 'layui-icon layui-icon-vercode', 3, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1317555660455411712', '部门列表', '2', 'sys:dept:data', '', '', '1315584471046553600', 'layui-icon layui-icon layui-icon layui-icon-vercode', 2, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1318229908526202880', '模型新增', '2', 'pro:model:add', '', '', '1307562519451140096', 'layui-icon layui-icon-vercode', 0, NULL, NULL, NULL, NULL, NULL, '0');
INSERT INTO `sys_power` VALUES ('1318230013262168064', '模型修改', '2', 'pro:model:edit', '', '', '1307562519451140096', 'layui-icon layui-icon-vercode', 1, NULL, NULL, NULL, NULL, NULL, '0');
INSERT INTO `sys_power` VALUES ('1318230265385975808', '模型删除', '2', 'pro:model:remove', '', '', '1307562519451140096', 'layui-icon layui-icon-vercode', 2, NULL, NULL, NULL, NULL, NULL, '0');
INSERT INTO `sys_power` VALUES ('1320969572051845120', '111111', '2', '', '', '', '1284020948269268992', 'layui-icon-login-qq', NULL, NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_power` VALUES ('1322085079861690368', '用户管理', '1', 'sys:user:main', '/system/user/main', '_iframe', '1', 'layui-icon layui-icon layui-icon layui-icon layui-icon-rate', 0, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1322085270392143872', '用户列表', '2', 'sys:user:data', '', '', '1322085079861690368', 'layui-icon layui-icon layui-icon layui-icon-vercode', 0, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1322085393021009920', '用户新增', '2', 'sys:user:add', '', '', '1322085079861690368', 'layui-icon layui-icon-vercode', NULL, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1322085497798918144', '用户修改', '2', 'sys:user:edit', '', '', '1322085079861690368', 'layui-icon layui-icon layui-icon-vercode', 2, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1322085659766161408', '用户删除', '2', 'sys:user:remove', '', '', '1322085079861690368', 'layui-icon layui-icon-rate', 3, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1329349076189184000', '', '1', '', '', '', '451002662209589248', 'layui-icon', NULL, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1330865171429588992', '在线用户', '1', 'sys:online:main', '/system/online/main', '_iframe', '694203021537574912', 'layui-icon layui-icon layui-icon-username', 0, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1348562759603716096', '在线列表', '1', 'sys:online:data', '/system/online/data', '_iframe', '1330865171429588992', 'layui-icon layui-icon-username', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1349016358033031168', '环境监控', '1', 'sys:monitor:main', '/system/monitor/main', '_iframe', '694203021537574912', 'layui-icon layui-icon-vercode', 9, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1349279791521464320', '电子邮件', '1', 'sys:mail:main', '/system/mail/main', '_iframe', '1', 'layui-icon layui-icon layui-icon layui-icon-list', 7, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1349636574442160128', '邮件发送', '2', 'sys:mail:save', '', '', '1349279791521464320', 'layui-icon layui-icon layui-icon layui-icon layui-icon layui-icon-vercode', 3, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1349636919478190080', '邮件删除', '2', 'sys:mail:remove', '', '', '1349279791521464320', 'layui-icon layui-icon layui-icon layui-icon layui-icon-vercode', 2, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1349637786285637632', '邮件列表', '2', 'sys:mail:data', '', '', '1349279791521464320', 'layui-icon layui-icon layui-icon-vercode', 0, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1349638479767666688', '邮件新增', '2', 'sys:mail:add', '', '', '1349279791521464320', 'layui-icon layui-icon layui-icon-vercode', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1355962888132493312', '系统设置', '1', 'sys:setup:main', '/system/setup/main', '_iframe', '1', 'layui-icon layui-icon layui-icon-set', 11, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1370412169610395648', '站内消息', '1', 'system:notice:main', '/system/notice/main', '_iframe', '1', 'layui-icon layui-icon layui-icon layui-icon-set-fill', 8, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1370412169610395649', '消息列表', '2', 'system:notice:data', '', NULL, '1370412169610395648', 'layui-icon layui-icon-set-fill', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1370412169610395650', '消息新增', '2', 'system:notice:add', '', NULL, '1370412169610395648', 'layui-icon layui-icon-set-fill', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1370412169610395651', '消息修改', '2', 'system:notice:edit', '', NULL, '1370412169610395648', 'layui-icon layui-icon-set-fill', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1370412169610395652', '消息删除', '2', 'system:notice:remove', '', NULL, '1370412169610395648', 'layui-icon layui-icon-set-fill', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1370974716822552576', '修改设置', '2', 'sys:setup:add', '', '', '1355962888132493312', 'layui-icon layui-icon-vercode', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1422390160183525376', '爬虫管理', '0', '', '', '', '0', 'layui-icon layui-icon layui-icon-website', 2, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1422391074944450560', '文章管理', '1', 'spider:article:main', '/spider/article/main', '_iframe', '1422390160183525376', 'layui-icon layui-icon-edit', NULL, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1422392176217686017', '文章列表', '2', 'spider:article:data', '', NULL, '1422391074944450560', 'layui-icon layui-icon-set-fill', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1422392176217686018', '文章新增', '2', 'spider:article:add', '', NULL, '1422391074944450560', 'layui-icon layui-icon-set-fill', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1422392176217686019', '文章修改', '2', 'spider:article:edit', '', NULL, '1422391074944450560', 'layui-icon layui-icon-set-fill', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1422392176217686020', '文章删除', '2', 'spider:article:remove', '', NULL, '1422391074944450560', 'layui-icon layui-icon-set-fill', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1422445257269706752', '实时日志', '1', 'logging', '/system/monitor/logging', '_iframe', '694203021537574912', 'layui-icon layui-icon-auz', 5, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1423168075099799552', '任务管理', '1', 'spider:runTask:main', '/spider/runTask/main', '_iframe', '1422390160183525376', 'layui-icon layui-icon-set-fill', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1423168075099799553', '爬虫任务运行列表', '2', 'spider:runTask:data', '', NULL, '1423168075099799552', 'layui-icon layui-icon-set-fill', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1423168075099799554', '爬虫任务运行新增', '2', 'spider:runTask:add', '', NULL, '1423168075099799552', 'layui-icon layui-icon-set-fill', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1423168075099799555', '爬虫任务运行修改', '2', 'spider:runTask:edit', '', NULL, '1423168075099799552', 'layui-icon layui-icon-set-fill', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1423168075099799556', '爬虫任务运行删除', '2', 'spider:runTask:remove', '', NULL, '1423168075099799552', 'layui-icon layui-icon-set-fill', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1423202404785979392', '标签管理', '1', 'spider:linkTask:main', '/spider/linkTask/main', '_iframe', '1422390160183525376', 'layui-icon layui-icon-set-fill', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1423202404785979393', '标签管理列表', '2', 'spider:linkTask:data', '', NULL, '1423202404785979392', 'layui-icon layui-icon-set-fill', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1423202404785979394', '标签管理新增', '2', 'spider:linkTask:add', '', NULL, '1423202404785979392', 'layui-icon layui-icon-set-fill', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1423202404785979395', '标签管理修改', '2', 'spider:linkTask:edit', '', NULL, '1423202404785979392', 'layui-icon layui-icon-set-fill', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1423202404785979396', '标签管理删除', '2', 'spider:linkTask:remove', '', NULL, '1423202404785979392', 'layui-icon layui-icon-set-fill', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1423555526892978176', '主题专栏', '1', 'spider:topic:main', '/spider/topic/main', '_iframe', '1422390160183525376', 'layui-icon layui-icon-set-fill', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1423555526892978177', '主题专栏列表', '2', 'spider:topic:data', '', NULL, '1423555526892978176', 'layui-icon layui-icon-set-fill', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1423555526892978178', '主题专栏新增', '2', 'spider:topic:add', '', NULL, '1423555526892978176', 'layui-icon layui-icon-set-fill', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1423555526892978179', '主题专栏修改', '2', 'spider:topic:edit', '', NULL, '1423555526892978176', 'layui-icon layui-icon-set-fill', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('1423555526892978180', '主题专栏删除', '2', 'spider:topic:remove', '', NULL, '1423555526892978176', 'layui-icon layui-icon-set-fill', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('2', '用户管理', '2', '', '', '_iframe', '1320969572051845120', 'layui-icon layui-icon layui-icon-username', 0, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('3', '角色管理', '1', 'sys:role:main', '/system/role/main', '_iframe', '1', 'layui-icon layui-icon-user', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('4', '权限管理', '1', 'sys:power:main', '/system/power/main', '_iframe', '1', 'layui-icon layui-icon-vercode', 2, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('442359447487123456', '角色列表', '2', 'sys:role:data', '', '', '3', 'layui-icon layui-icon-rate', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('442417411065516032', '开发工具', '0', '', '', '', '0', 'layui-icon layui-icon layui-icon-senior', 4, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('442418188639145984', '代码生成', '1', 'exp:template:main', '/generate/main', '_iframe', '442417411065516032', 'layui-icon layui-icon layui-icon layui-icon layui-icon layui-icon-template-1', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('442650770626711552', '定时任务', '1', 'sch:job:main', '/schedule/job/main', '_iframe', '694203021537574912', 'layui-icon layui-icon layui-icon layui-icon  layui-icon-chat', 0, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('442651158935375872', '任务日志', '1', 'sch:log:main', '/schedule/log/main', '_iframe', '694203021537574912', 'layui-icon layui-icon layui-icon  layui-icon-file', 1, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('450300705362808832', '行为日志', '1', 'sys:log:main', '/system/log/main', '_iframe', '694203021537574912', 'layui-icon layui-icon layui-icon layui-icon  layui-icon-chart', 7, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('451002662209589248', '工作空间', '1', '', '', '', '451002662209589248', 'layui-icon layui-icon layui-icon-home', 0, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('451003242072117248', '项目总览', '1', 'process:model:main', '/console', '_iframe', '451002662209589248', 'layui-icon  layui-icon-component', 0, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('474356363552755712', '项目介绍', '1', 'home', '/console', '_iframe', '474356044148117504', 'layui-icon layui-icon-home', 1, NULL, NULL, NULL, NULL, NULL, '0');
INSERT INTO `sys_power` VALUES ('694203021537574912', '系统监控', '0', '', '', '', '0', 'layui-icon  layui-icon-console', 3, NULL, NULL, NULL, NULL, NULL, '1');
INSERT INTO `sys_power` VALUES ('694203311615639552', '接口文档', '1', 'sys:doc:main', '/system/doc/main', '_iframe', '442417411065516032', 'layui-icon layui-icon layui-icon layui-icon  layui-icon-chart', 9, NULL, NULL, NULL, NULL, NULL, '1');

-- ----------------------------
-- Table structure for sys_role
-- ----------------------------
DROP TABLE IF EXISTS `sys_role`;
CREATE TABLE `sys_role`  (
  `role_id` char(19) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '角色编号',
  `role_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '角色名称',
  `role_code` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '角色标识',
  `enable` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否启用',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `create_by` char(19) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '创建人',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  `update_by` char(19) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '修改人',
  `remark` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  `details` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '详情',
  `sort` int(11) NULL DEFAULT NULL COMMENT '排序',
  PRIMARY KEY (`role_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_role
-- ----------------------------
INSERT INTO `sys_role` VALUES ('1309851245195821056', '超级管理员', 'admin', '0', NULL, NULL, NULL, NULL, NULL, '超级管理员', 1);
INSERT INTO `sys_role` VALUES ('1313761100243664896', '普通管理员', 'manager', '0', NULL, NULL, NULL, NULL, NULL, '普通管理员', 2);
INSERT INTO `sys_role` VALUES ('1356112133691015168', '应急管理员', 'users', '0', NULL, NULL, NULL, NULL, NULL, '应急管理员', 2);

-- ----------------------------
-- Table structure for sys_role_power
-- ----------------------------
DROP TABLE IF EXISTS `sys_role_power`;
CREATE TABLE `sys_role_power`  (
  `id` char(19) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `role_id` char(19) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `power_id` char(19) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `create_by` char(19) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `create_time` datetime(0) NULL DEFAULT NULL,
  `update_by` char(19) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `update_time` datetime(0) NULL DEFAULT NULL,
  `remark` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_role_power
-- ----------------------------
INSERT INTO `sys_role_power` VALUES ('1284022485632679936', '3', '474356044148117504', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1284022485632679937', '3', '474356363552755712', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1284022485632679938', '3', '1', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1284022485632679939', '3', '3', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1284022485632679940', '3', '442359447487123456', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1284022485632679941', '3', '4', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1284022485632679942', '3', '442722702474743808', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1284022485632679943', '3', '2', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1284022485632679944', '3', '1284020948269268992', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1284022485632679945', '3', '442417411065516032', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1284022485632679946', '3', '442418188639145984', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1284022485632679947', '3', '694203021537574912', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1284022485632679948', '3', '450300705362808832', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1284022485632679949', '3', '442520236248403968', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1284022485632679950', '3', '694203311615639552', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1284022485632679951', '3', '442650387514789888', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1284022485632679952', '3', '442650770626711552', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1284022485632679953', '3', '442651158935375872', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1284022485632679954', '3', '451002662209589248', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1284022485632679955', '3', '451003242072117248', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1305379650364506112', '2', '474356044148117504', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1305379650368700416', '2', '474356363552755712', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1305379650368700417', '2', '2', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1305379650368700418', '2', '1284020948269268992', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1305379650368700419', '2', '450300705362808832', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1305379650368700420', '2', '442417411065516032', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1305379650368700421', '2', '442418188639145984', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1305379650368700422', '2', '694203021537574912', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1305379650368700423', '2', '442520236248403968', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1305379650368700424', '2', '694203311615639552', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1305379650368700425', '2', '442650387514789888', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1305379650368700426', '2', '442650770626711552', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1305379650368700427', '2', '442651158935375872', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1305379650368700428', '2', '451002662209589248', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1305379650368700429', '2', '451003242072117248', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1308571532737380352', '1', '451002662209589248', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1308571532737380353', '1', '451003242072117248', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1308571532737380354', '1', '1305875436139446272', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1308571532737380355', '1', '1', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1308571532737380356', '1', '2', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1308571532737380357', '1', '1284020948269268992', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1308571532737380358', '1', '1284022967767924736', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1308571532737380359', '1', '3', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1308571532737380360', '1', '442359447487123456', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1308571532737380361', '1', '4', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1308571532737380362', '1', '1304387665067507712', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1308571532737380363', '1', '450300705362808832', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1308571532737380364', '1', '1304793451996381184', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1308571532737380365', '1', '1307299332784914432', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1308571532737380366', '1', '442650387514789888', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1308571532737380367', '1', '442650770626711552', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1308571532737380368', '1', '442651158935375872', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1308571532737380369', '1', '694203021537574912', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1308571532737380370', '1', '442520236248403968', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1308571532737380371', '1', '694203311615639552', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1308571532737380372', '1', '442417411065516032', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1308571532737380373', '1', '442418188639145984', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1308571532737380374', '1', '1302180351979814912', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1313147486356897792', '1310215420371795968', '451002662209589248', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1313147486356897793', '1310215420371795968', '1', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1313147486356897794', '1310215420371795968', '2', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1313147486356897795', '1310215420371795968', '3', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1313147486356897796', '1310215420371795968', '4', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1313147486356897797', '1310215420371795968', '1304387665067507712', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1313147486356897798', '1310215420371795968', '450300705362808832', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1313147486356897799', '1310215420371795968', '1304793451996381184', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1313147486356897800', '1310215420371795968', '1307299332784914432', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1313147486356897801', '1310215420371795968', '1313142171393589248', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1313147486356897802', '1310215420371795968', '1313142510486290432', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1313147486356897803', '1310215420371795968', '442650387514789888', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1313147486356897804', '1310215420371795968', '694203021537574912', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1313147486356897805', '1310215420371795968', '442417411065516032', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1320969221462556672', '1320969145759563776', '451002662209589248', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1320969221462556673', '1320969145759563776', '451003242072117248', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1320969221462556674', '1320969145759563776', '1305875436139446272', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778112', '1309851245195821056', '1', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778113', '1309851245195821056', '1322085079861690368', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778114', '1309851245195821056', '1322085393021009920', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778115', '1309851245195821056', '1322085270392143872', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778116', '1309851245195821056', '1322085497798918144', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778117', '1309851245195821056', '1322085659766161408', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778118', '1309851245195821056', '3', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778119', '1309851245195821056', '1310209696916832256', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778120', '1309851245195821056', '1310209900478988288', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778121', '1309851245195821056', '1310210054728712192', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778122', '1309851245195821056', '442359447487123456', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778123', '1309851245195821056', '1310211965188046848', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778124', '1309851245195821056', '4', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778125', '1309851245195821056', '1310226416867999744', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778126', '1309851245195821056', '1310226976593674240', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778127', '1309851245195821056', '1310227130998587392', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778128', '1309851245195821056', '1310227300935008256', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778134', '1309851245195821056', '1304387665067507712', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778135', '1309851245195821056', '1310405161587310592', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778136', '1309851245195821056', '1310402491631796224', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778137', '1309851245195821056', '1310404584291696640', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778138', '1309851245195821056', '1310404705934901248', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778139', '1309851245195821056', '1310402688881524736', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778140', '1309851245195821056', '1310402817776680960', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778141', '1309851245195821056', '1310403004406431744', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778142', '1309851245195821056', '1310404831407505408', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778143', '1309851245195821056', '1310404999599095808', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778144', '1309851245195821056', '1304793451996381184', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778145', '1309851245195821056', '1310243862937075712', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778146', '1309851245195821056', '1310244103824343040', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778147', '1309851245195821056', '1310244248884346880', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778148', '1309851245195821056', '1307299332784914432', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778149', '1309851245195821056', '1310238229588344832', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778150', '1309851245195821056', '1310238417082122240', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778151', '1309851245195821056', '1310238574355939328', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778152', '1309851245195821056', '1310238700705153024', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778153', '1309851245195821056', '1349279791521464320', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778154', '1309851245195821056', '1349637786285637632', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778155', '1309851245195821056', '1349638479767666688', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778156', '1309851245195821056', '1349636919478190080', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778157', '1309851245195821056', '1349636574442160128', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778158', '1309851245195821056', '1355962888132493312', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778159', '1309851245195821056', '694203021537574912', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778160', '1309851245195821056', '1330865171429588992', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778161', '1309851245195821056', '1348562759603716096', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778162', '1309851245195821056', '442650770626711552', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778163', '1309851245195821056', '1310397832091402240', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778164', '1309851245195821056', '1310390699333517312', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778165', '1309851245195821056', '1310390994826428416', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778166', '1309851245195821056', '1310391095670079488', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778167', '1309851245195821056', '1310391707069579264', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778168', '1309851245195821056', '1310398020692475904', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778169', '1309851245195821056', '1310398158974484480', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778170', '1309851245195821056', '442651158935375872', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778171', '1309851245195821056', '1310395250908332032', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778172', '1309851245195821056', '450300705362808832', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778173', '1309851245195821056', '1310232350285627392', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778174', '1309851245195821056', '1310232462562951168', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778175', '1309851245195821056', '1349016358033031168', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778176', '1309851245195821056', '442417411065516032', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778177', '1309851245195821056', '442418188639145984', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778178', '1309851245195821056', '1302180351979814912', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778179', '1309851245195821056', '694203311615639552', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778182', '1309851245195821056', '1318229908526202880', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778183', '1309851245195821056', '1318230013262168064', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1355962953458778184', '1309851245195821056', '1318230265385975808', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712128', '1313761100243664896', '1', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712129', '1313761100243664896', '1322085079861690368', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712130', '1313761100243664896', '1322085393021009920', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712131', '1313761100243664896', '1322085270392143872', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712132', '1313761100243664896', '1322085497798918144', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712133', '1313761100243664896', '1322085659766161408', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712134', '1313761100243664896', '3', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712135', '1313761100243664896', '1310209696916832256', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712136', '1313761100243664896', '1310209900478988288', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712137', '1313761100243664896', '1310210054728712192', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712138', '1313761100243664896', '442359447487123456', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712139', '1313761100243664896', '1310211965188046848', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712140', '1313761100243664896', '4', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712141', '1313761100243664896', '1310226416867999744', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712142', '1313761100243664896', '1310226976593674240', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712143', '1313761100243664896', '1310227130998587392', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712144', '1313761100243664896', '1310227300935008256', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712150', '1313761100243664896', '1304387665067507712', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712151', '1313761100243664896', '1310402491631796224', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712152', '1313761100243664896', '1310404584291696640', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712153', '1313761100243664896', '1310405161587310592', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712154', '1313761100243664896', '1310402688881524736', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712155', '1313761100243664896', '1310404705934901248', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712156', '1313761100243664896', '1310402817776680960', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712157', '1313761100243664896', '1310403004406431744', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712158', '1313761100243664896', '1310404831407505408', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712159', '1313761100243664896', '1310404999599095808', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712160', '1313761100243664896', '1304793451996381184', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712161', '1313761100243664896', '1310243862937075712', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712162', '1313761100243664896', '1310244103824343040', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712163', '1313761100243664896', '1310244248884346880', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712164', '1313761100243664896', '1307299332784914432', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712165', '1313761100243664896', '1310238229588344832', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712166', '1313761100243664896', '1310238417082122240', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712167', '1313761100243664896', '1310238574355939328', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712168', '1313761100243664896', '1310238700705153024', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712169', '1313761100243664896', '1349279791521464320', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712170', '1313761100243664896', '1349637786285637632', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712171', '1313761100243664896', '1349638479767666688', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712172', '1313761100243664896', '1349636919478190080', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712173', '1313761100243664896', '1349636574442160128', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712174', '1313761100243664896', '1355962888132493312', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712175', '1313761100243664896', '1370974716822552576', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712176', '1313761100243664896', '694203021537574912', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712177', '1313761100243664896', '1330865171429588992', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712178', '1313761100243664896', '442650770626711552', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712179', '1313761100243664896', '442651158935375872', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712180', '1313761100243664896', '450300705362808832', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712181', '1313761100243664896', '1349016358033031168', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712182', '1313761100243664896', '442417411065516032', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712183', '1313761100243664896', '442418188639145984', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712184', '1313761100243664896', '1302180351979814912', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712185', '1313761100243664896', '694203311615639552', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712188', '1313761100243664896', '1318229908526202880', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712189', '1313761100243664896', '1318230013262168064', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('1370974927745712190', '1313761100243664896', '1318230265385975808', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('442062615250866176', '693913251020275712', '1', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('442062615250866177', '693913251020275712', '2', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('442062615250866178', '693913251020275712', '3', NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role_power` VALUES ('442062615250866179', '693913251020275712', '4', NULL, NULL, NULL, NULL, NULL);

-- ----------------------------
-- Table structure for sys_user
-- ----------------------------
DROP TABLE IF EXISTS `sys_user`;
CREATE TABLE `sys_user`  (
  `user_id` char(19) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '编号',
  `username` char(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '账户',
  `password` char(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '密码',
  `salt` char(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '姓名',
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '状态',
  `real_name` char(8) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '姓名',
  `email` char(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '邮箱',
  `avatar` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '头像',
  `sex` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '性别',
  `phone` char(11) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '电话',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `create_by` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '创建人',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  `update_by` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '修改人',
  `remark` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  `enable` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否启用',
  `login` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否登录',
  `dept_id` char(19) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '部门编号',
  `last_time` datetime(0) NULL DEFAULT NULL COMMENT '最后一次登录时间',
  PRIMARY KEY (`user_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_user
-- ----------------------------
INSERT INTO `sys_user` VALUES ('1306230031168569344', 'feng', '$2a$10$jjf2h8Cx2lkFMKy3NY9pguADYAMewyPr2IJw8YAI5zSH2/0R/9Kra', NULL, '1', '风筝', 'feng@gmail.com', NULL, '0', '15553726531', '2000-02-09 00:00:00', NULL, NULL, NULL, '被岁月镂空，亦受其雕琢', '1', NULL, '1', NULL);
INSERT INTO `sys_user` VALUES ('1309861917694623744', 'admin', '$2a$10$6T.NGloFO.mD/QOAUelMTOcjAH8N49h34TsXduDVlnNMrASIGBNz6', NULL, '1', '管理', 'Jmys1992@qq.com', '1378647938930049024', '0', '15553726531', '2020-09-26 22:26:32', NULL, NULL, NULL, '被岁月镂空，亦受其雕琢', '1', NULL, '1', '2021-08-13 15:33:02');
INSERT INTO `sys_user` VALUES ('1310409555649232897', 'ruhua', '$2a$10$pkvLdCLdFp2sXZpmK34wveekbWvHinW2ldBnic4SqjiKO8jK4Etka', NULL, '1', '如花', 'ruhua@gmail.com', NULL, '0', '15553726531', '2020-09-28 10:42:39', NULL, NULL, NULL, NULL, '1', NULL, '1', NULL);
INSERT INTO `sys_user` VALUES ('1349016976730619905', 'mwj', '$2a$10$mD0pnwOGjmOKihboidaTveUdrqcDYoluzfCOA0Ho87iwr9PKrDA6i', NULL, '1', '风筝', '', NULL, '1', '666666666', '2021-01-12 23:34:45', NULL, NULL, NULL, NULL, '1', NULL, '6', '2021-01-12 23:35:12');
INSERT INTO `sys_user` VALUES ('1349021166525743105', 'xiana', '$2a$10$6VuyGmiEbIix/gPDU8oe3O7DZSxGVByjXCHQGtyEMoRAt74M/daee', NULL, '1', '夏娜', 'xiana@gmail.com', NULL, '0', '15553726531', '2021-01-12 23:51:24', NULL, NULL, NULL, NULL, '1', NULL, '1', NULL);
INSERT INTO `sys_user` VALUES ('1355966975355912193', 'sanman', '$2a$10$AD3QnQMRhYY7RUDHd1EEL.KHaDW8/S66SsESwh.9ta8bLiUXrZcJe', NULL, '1', '散漫', 'sanman@gmail.com', NULL, '0', '15553726531', '2021-02-01 03:51:34', NULL, NULL, NULL, NULL, '1', NULL, '1', NULL);
INSERT INTO `sys_user` VALUES ('1355967204012589057', 'langhua', '$2a$10$MNbf6dSvvncpoPsNFyMW6ObPwfj3jCKsZa7LvVAiXco1DWtgA46he', NULL, '1', '浪花', 'langhua@gmail.com', NULL, '0', '15553726531', '2021-02-01 03:52:29', NULL, NULL, NULL, NULL, '1', NULL, '1', NULL);
INSERT INTO `sys_user` VALUES ('1355967579994193921', 'zidian', '$2a$10$c9OatFOMGnj37A6UJTwfGOKqCwCx50K8eZsjV5YoBRlpYHcz8WfyW', NULL, '1', '字典', 'zidian', NULL, '0', '15553726531', '2021-02-01 03:53:58', NULL, NULL, NULL, NULL, '1', NULL, '1', NULL);
INSERT INTO `sys_user` VALUES ('1370973608502886401', 'duanlang', '$2a$10$XNcKlX3AnXR/Gh2g8aLX5OFtLD69Yjl1O8PDLmITH4WCQT.shsrWe', NULL, '1', '断浪', 'duanlang@gmail.com', NULL, '0', '15553726531', '2021-03-14 13:42:34', NULL, NULL, NULL, NULL, '1', NULL, '1', '2021-03-14 13:47:28');

-- ----------------------------
-- Table structure for sys_user_role
-- ----------------------------
DROP TABLE IF EXISTS `sys_user_role`;
CREATE TABLE `sys_user_role`  (
  `id` char(19) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '标识',
  `user_id` char(19) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '用户编号',
  `role_id` char(19) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '角色编号',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_user_role
-- ----------------------------
INSERT INTO `sys_user_role` VALUES ('1302196622322565120', '1302196622007992320', '1');
INSERT INTO `sys_user_role` VALUES ('1304443027040763904', '1304443026482921472', '1');
INSERT INTO `sys_user_role` VALUES ('1304443027044958208', '1304443026482921472', '2');
INSERT INTO `sys_user_role` VALUES ('1304443027044958209', '1304443026482921472', '3');
INSERT INTO `sys_user_role` VALUES ('1304443307404820480', '1304443306888921088', '1');
INSERT INTO `sys_user_role` VALUES ('1304443307404820481', '1304443306888921088', '2');
INSERT INTO `sys_user_role` VALUES ('1305359805342285824', '1305359804906078208', '');
INSERT INTO `sys_user_role` VALUES ('1305359807724650496', '1305359807296831488', '');
INSERT INTO `sys_user_role` VALUES ('1305390235135246336', '1305390234694844416', '');
INSERT INTO `sys_user_role` VALUES ('1306229860422647808', '1306229859755753472', '1');
INSERT INTO `sys_user_role` VALUES ('1306229892144168960', '1306229891624075264', '1');
INSERT INTO `sys_user_role` VALUES ('1306243520893288448', '1306243520482246656', '');
INSERT INTO `sys_user_role` VALUES ('1308074663896678400', '1308074663313670144', '1');
INSERT INTO `sys_user_role` VALUES ('1308074663896678401', '1308074663313670144', '1306230258952830976');
INSERT INTO `sys_user_role` VALUES ('1308074663896678402', '1308074663313670144', '2');
INSERT INTO `sys_user_role` VALUES ('1308075167091523584', '1308075166433017856', '1');
INSERT INTO `sys_user_role` VALUES ('1308075167091523585', '1308075166433017856', '1306230258952830976');
INSERT INTO `sys_user_role` VALUES ('1308075241188098048', '1308074939114323968', '1');
INSERT INTO `sys_user_role` VALUES ('1308075241188098049', '1308074939114323968', '1306230258952830976');
INSERT INTO `sys_user_role` VALUES ('1308075407685189632', '1308075407114764288', '1');
INSERT INTO `sys_user_role` VALUES ('1308075407685189633', '1308075407114764288', '1306230258952830976');
INSERT INTO `sys_user_role` VALUES ('1308075638158000128', '1308075637621129216', '1306230258952830976');
INSERT INTO `sys_user_role` VALUES ('1308328954523811840', '1308328954045661184', '1');
INSERT INTO `sys_user_role` VALUES ('1308328954523811841', '1308328954045661184', '1306230258952830976');
INSERT INTO `sys_user_role` VALUES ('1308328954523811842', '1308328954045661184', '2');
INSERT INTO `sys_user_role` VALUES ('1308571264494862336', '1308076162903179264', '1306230258952830976');
INSERT INTO `sys_user_role` VALUES ('1309445423668133888', '1309444883659882496', '1306230258952830976');
INSERT INTO `sys_user_role` VALUES ('1309445423668133889', '1309444883659882496', '1309121036125470720');
INSERT INTO `sys_user_role` VALUES ('1309445423668133890', '1309444883659882496', '2');
INSERT INTO `sys_user_role` VALUES ('1309752526945386496', '1', '1306230258952830976');
INSERT INTO `sys_user_role` VALUES ('1309752526945386497', '1', '1309121036125470720');
INSERT INTO `sys_user_role` VALUES ('1309752526945386498', '1', '2');
INSERT INTO `sys_user_role` VALUES ('1309860016655695872', '1309860016043327488', '1309851245195821056');
INSERT INTO `sys_user_role` VALUES ('1309860554432577536', '1309860553891512320', '1309851245195821056');
INSERT INTO `sys_user_role` VALUES ('1309861324494209024', '1309861323898617856', '1309851245195821056');
INSERT INTO `sys_user_role` VALUES ('1309861325593116672', '1309861324909445120', '1309851245195821056');
INSERT INTO `sys_user_role` VALUES ('1310080380040118272', '1310080379331280896', '1306230258952830976');
INSERT INTO `sys_user_role` VALUES ('1310080380589572096', '1310080379935260672', '1306230258952830976');
INSERT INTO `sys_user_role` VALUES ('1310080718918909952', '1310080718256209920', '1306230258952830976');
INSERT INTO `sys_user_role` VALUES ('1310080719917154304', '1310080719208316928', '1306230258952830976');
INSERT INTO `sys_user_role` VALUES ('1310082314557980672', '1310082313954000896', '1306230258952830976');
INSERT INTO `sys_user_role` VALUES ('1310082315195514880', '1310082314545397760', '1306230258952830976');
INSERT INTO `sys_user_role` VALUES ('1310083089153654784', '1310083088511926272', '1309121036125470720');
INSERT INTO `sys_user_role` VALUES ('1310083089828937728', '1310083089216569344', '1309121036125470720');
INSERT INTO `sys_user_role` VALUES ('1310083324709961728', '1310083324110176256', '1306230258952830976');
INSERT INTO `sys_user_role` VALUES ('1310208453033066496', '1310208452424892416', '1309121036125470720');
INSERT INTO `sys_user_role` VALUES ('1310209026096627712', '1310209025576534016', '1306230258952830976');
INSERT INTO `sys_user_role` VALUES ('1310209026096627713', '1310209025576534016', '1309121036125470720');
INSERT INTO `sys_user_role` VALUES ('1310381721815875584', '1306229381332467712', '1309851245195821056');
INSERT INTO `sys_user_role` VALUES ('1310424875067768832', '1310421836906889217', '1310421428759166976');
INSERT INTO `sys_user_role` VALUES ('1314015448013996032', '1304491590080790528', '1309851245195821056');
INSERT INTO `sys_user_role` VALUES ('1314410103465574400', '1314410059245027329', '1309851245195821056');
INSERT INTO `sys_user_role` VALUES ('1314416691479838720', '1314416690875858945', '');
INSERT INTO `sys_user_role` VALUES ('1316251185065230336', '1306230031168569344', '1309851245195821056');
INSERT INTO `sys_user_role` VALUES ('1316275764227735552', '1316275763711836161', '1309851245195821056');
INSERT INTO `sys_user_role` VALUES ('1316275764227735553', '1316275763711836161', '1313761100243664896');
INSERT INTO `sys_user_role` VALUES ('1316275899439513600', '1315827004456566785', '1309851245195821056');
INSERT INTO `sys_user_role` VALUES ('1316275899439513601', '1315827004456566785', '1313761100243664896');
INSERT INTO `sys_user_role` VALUES ('1316275930657718272', '1315829324519047169', '1309851245195821056');
INSERT INTO `sys_user_role` VALUES ('1316276059032780800', '1310409555649232897', '');
INSERT INTO `sys_user_role` VALUES ('1316410619078901760', '1306229606205882368', '1309851245195821056');
INSERT INTO `sys_user_role` VALUES ('1316410619078901761', '1306229606205882368', '1313761100243664896');
INSERT INTO `sys_user_role` VALUES ('1316410619078901762', '1306229606205882368', '1316407534105395200');
INSERT INTO `sys_user_role` VALUES ('1316410619078901763', '1306229606205882368', '1316408008376320000');
INSERT INTO `sys_user_role` VALUES ('1318205966671413248', '1318205965996130305', '');
INSERT INTO `sys_user_role` VALUES ('1320899195875360768', '1320899195225243649', '');
INSERT INTO `sys_user_role` VALUES ('1329795580615983104', '1329795579919728641', '1309851245195821056');
INSERT INTO `sys_user_role` VALUES ('1329795580615983105', '1329795579919728641', '1313761100243664896');
INSERT INTO `sys_user_role` VALUES ('1329795614484987904', '1329795613730013185', '1309851245195821056');
INSERT INTO `sys_user_role` VALUES ('1329795688124383232', '1329795687465877505', '1313761100243664896');
INSERT INTO `sys_user_role` VALUES ('1329795704863850496', '1329795703882383361', '1313761100243664896');
INSERT INTO `sys_user_role` VALUES ('1329795716930863104', '1329795716255580161', '1313761100243664896');
INSERT INTO `sys_user_role` VALUES ('1329795741211688960', '1329795740536406017', '1309851245195821056');
INSERT INTO `sys_user_role` VALUES ('1349021014649995264', '1349016976730619905', '1313761100243664896');
INSERT INTO `sys_user_role` VALUES ('1349021167326855168', '1349021166525743105', '1309851245195821056');
INSERT INTO `sys_user_role` VALUES ('1349021167326855169', '1349021166525743105', '1313761100243664896');
INSERT INTO `sys_user_role` VALUES ('1355967256000987136', '1355966975355912193', '1309851245195821056');
INSERT INTO `sys_user_role` VALUES ('1355967256000987137', '1355966975355912193', '1313761100243664896');
INSERT INTO `sys_user_role` VALUES ('1355967330718318592', '1355967204012589057', '1309851245195821056');
INSERT INTO `sys_user_role` VALUES ('1355967330718318593', '1355967204012589057', '1313761100243664896');
INSERT INTO `sys_user_role` VALUES ('1355967580686254080', '1355967579994193921', '1309851245195821056');
INSERT INTO `sys_user_role` VALUES ('1355967580686254081', '1355967579994193921', '1313761100243664896');
INSERT INTO `sys_user_role` VALUES ('1360858458609418240', '1309861917694623744', '1309851245195821056');
INSERT INTO `sys_user_role` VALUES ('1360858458609418241', '1309861917694623744', '1313761100243664896');
INSERT INTO `sys_user_role` VALUES ('1370973609278832640', '1370973608502886401', '1313761100243664896');
INSERT INTO `sys_user_role` VALUES ('442110794142978048', NULL, '1');
INSERT INTO `sys_user_role` VALUES ('442110794142978049', NULL, '2');
INSERT INTO `sys_user_role` VALUES ('442110794142978050', NULL, '3');
INSERT INTO `sys_user_role` VALUES ('442114944884936704', '442114944884936704', '1');
INSERT INTO `sys_user_role` VALUES ('442114944884936705', '442114944884936704', '2');
INSERT INTO `sys_user_role` VALUES ('442114944884936706', '442114944884936704', '3');
INSERT INTO `sys_user_role` VALUES ('442114944884936707', '442114944884936704', '693913251020275712');
INSERT INTO `sys_user_role` VALUES ('442114944884936708', '442114944884936704', '693949793801601024');
INSERT INTO `sys_user_role` VALUES ('442114944884936709', '442114944884936704', '694106517393113088');
INSERT INTO `sys_user_role` VALUES ('442127724396548096', '3', '1');
INSERT INTO `sys_user_role` VALUES ('442127724396548097', '3', '2');
INSERT INTO `sys_user_role` VALUES ('442127724396548098', '3', '3');
INSERT INTO `sys_user_role` VALUES ('445004989551742976', '442492965651353600', '1');
INSERT INTO `sys_user_role` VALUES ('445004989551742977', '442492965651353600', '2');
INSERT INTO `sys_user_role` VALUES ('445005010271604736', '444226209941950464', '1');
INSERT INTO `sys_user_role` VALUES ('445005010271604737', '444226209941950464', '2');
INSERT INTO `sys_user_role` VALUES ('445005010271604738', '444226209941950464', '3');
INSERT INTO `sys_user_role` VALUES ('447196043407396864', '447196042723725312', '1');
INSERT INTO `sys_user_role` VALUES ('447196043407396865', '447196042723725312', '2');
INSERT INTO `sys_user_role` VALUES ('447197132043194368', '447197131518906368', '1');
INSERT INTO `sys_user_role` VALUES ('447197773046091776', '447197772274339840', '1');
INSERT INTO `sys_user_role` VALUES ('447200144400715776', '447199996320813056', '1');
INSERT INTO `sys_user_role` VALUES ('447200144400715777', '447199996320813056', '2');
INSERT INTO `sys_user_role` VALUES ('449248198469488640', '449248198058446848', '3');
INSERT INTO `sys_user_role` VALUES ('463926002653990912', '463926002318446592', '3');
INSERT INTO `sys_user_role` VALUES ('463926371165540352', '442488661347536896', '3');

-- ----------------------------
-- Table structure for t_article
-- ----------------------------
DROP TABLE IF EXISTS `t_article`;
CREATE TABLE `t_article`  (
  `article_id` bigint(20) UNSIGNED NOT NULL,
  `tag` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '标签,使用\',\'拼接',
  `cover` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '封面,使用“,”拼接',
  `title` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '标题',
  `original_id` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '原始id',
  `original_url` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '原始地址',
  `original_type` smallint(3) NULL DEFAULT NULL COMMENT '类型',
  `digest` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '摘要',
  `text_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '原文字内容',
  `original_html_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '原html内容',
  `html_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '已处理图片的html内容',
  `original_md_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '未处理图片的md',
  `md_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '已处理图片的md',
  `original_date_str` varchar(25) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '发布时间',
  `original_date` datetime(0) NULL DEFAULT NULL COMMENT '发布时间',
  `original_author` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '作者',
  `create_date` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `topic_id` int(11) NULL DEFAULT NULL COMMENT '主题id',
  PRIMARY KEY (`article_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for t_article_0
-- ----------------------------
DROP TABLE IF EXISTS `t_article_0`;
CREATE TABLE `t_article_0`  (
  `article_id` bigint(20) UNSIGNED NOT NULL,
  `tag` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '标签,使用\',\'拼接',
  `cover` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '封面,使用“,”拼接',
  `title` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '标题',
  `original_id` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '原始id',
  `original_url` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '原始地址',
  `original_type` smallint(3) NULL DEFAULT NULL COMMENT '类型',
  `digest` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '摘要',
  `text_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '原文字内容',
  `original_html_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '原html内容',
  `html_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '已处理图片的html内容',
  `original_md_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '未处理图片的md',
  `md_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '已处理图片的md',
  `original_date_str` varchar(25) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '发布时间',
  `original_author` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '作者',
  `create_date` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `original_date` datetime(0) NULL DEFAULT NULL COMMENT '发布时间',
  `topic_id` int(11) NULL DEFAULT NULL COMMENT '主题id',
  PRIMARY KEY (`article_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_article_0
-- ----------------------------
INSERT INTO `t_article_0` VALUES (1425741082653757440, 'Java,8 月日更,Mybatis-Plus', NULL, '【Mybatis-Plus 学习笔记】2、日志配置及常用 CRUD', '1b10dd84c1c9d7b969022607b', 'https://xie.infoq.cn/article/1b10dd84c1c9d7b969022607b', 13, '上一篇文章中我们讲了 Mybatis-Plus 的定义以及相关特点，并从零开始编写了一个 SpringBoot + Mybatis-Plus 的实例。今天我们就来看看，如何利用 MP 来实现对数据库的增删改查。', '前言\n上一篇文章中我们讲了 Mybatis-Plus 的定义以及相关特点，并从零开始编写了一个 SpringBoot + Mybatis-Plus 的实例。今天我们就来看看，如何利用 MP 来实现对数据库的增删改查。\n日志配置\n使用 MP 时，默认是不打印任何 SQL 语句的。而为了方便日常开发工作的调试，我们需要联合控制台和各种数据可视化工具进行语句的拼接检查，因此我们利用 MP 自带的日志功能，在控制台输出我们的 SQL 语句，从而方便我们调试。\n\n在配置文件 application.yml （IDEA 默认生成的配置文件为 application.properties）中，加入一下配置，这样 MP 就会在控制台中打印完整带参数的 SQL 语句，方便我们查看。\n\nmybatis-plus:\n  configuration:\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n\n复制代码\nMapper CRUD 使用方法\n首先我们来看 Mapper 层 CRUD 涉及的一些方法，Mapper 层主要继承自 BaseMapper 接口，里边实现了各种用于操作数据库的增删改查的方法，以下我们就来看看日常我们常用的一些方法。\n\npackage com.cunyu.employee.mapper;\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport com.cunyu.employee.entity.Employee;\n\n/**\n * Created with IntelliJ IDEA.\n *\n * @author : cunyu\n * @version : 1.0\n * @project : Employee\n * @package : com.cunyu.employee.mapper\n * @className : EmployeeMapper\n * @createTime : 2021/8/7 17:45\n * @description : 员工 Mapper 类\n */\npublic interface EmployeeMapper extends BaseMapper<Employee> {\n}\n\n复制代码\ninsert 操作\n首先是插入数据，insert 方法中，传入我们所要插入数据库的实体对象作为参数即可。\n\n方法声明\n\n/**\n     * 插入一条记录\n     *\n     * @param entity 实体对象\n     */\nint insert(T entity);\n\n复制代码\n\n插入实例\n\npackage com.cunyu.employee;\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n    @Test\n    void contextLoads() {\n    }\n\n    @Autowired\n    private EmployeeMapper employeeMapper;\n\n    @Test\n    void testInsert() {\n        Employee employee = new Employee();\n        employee.setId(4L);\n        employee.setName(\"赵六\");\n        employee.setSex(\"男\");\n        employee.setEmail(\"zhaoliu@cunyu1943.com\");\n\n        Assert.assertEquals(1, employeeMapper.insert(employee));\n        System.out.println(\"插入成功\");\n    }\n\n}\n\n复制代码\n\n测试结果\n\n\n数据插入后的数据库\n\nselect 操作\n相比于插入数据操作，查询数据的方法就要更多，而且还能实现批量查询和条件查询。\n\n根据主键查询\n\n将所要查询数据的主键作为参数传入我们的 selectById 方法中，即可实现。\n\n方法声明\n\n/**\n     * 根据 ID 查询\n     *\n     * @param id 主键ID\n     */\nT selectById(Serializable id);\n\n复制代码\n\n查询实例\n\npackage com.cunyu.employee;\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n    @Test\n    void contextLoads() {\n    }\n\n    @Autowired\n    private EmployeeMapper employeeMapper;\n\n    @Test\n    void testSelectById() {\n        Employee employee = employeeMapper.selectById(3);\n        System.out.println(employee);\n    }\n}\n\n复制代码\n\n测试结果\n\n\n根据主键批量查询\n\n上一个方法每次只能查询一条记录，如果我们想要查询多条数据记录，那么就可以将要查询数据的主键列表传入 selectBatchIds 方法即可。\n\n方法声明\n\n/**\n     * 查询（根据ID 批量查询）\n     *\n     * @param idList 主键ID列表(不能为 null 以及 empty)\n     */\nList<T> selectBatchIds(@Param(Constants.COLLECTION) Collection<? extends Serializable> idList);\n\n复制代码\n\n批量查询实例\n\npackage com.cunyu.employee;\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n    @Test\n    void contextLoads() {\n    }\n\n    @Autowired\n    private EmployeeMapper employeeMapper;\n\n    @Test\n    void testSelectBatchIds() {\n        List<Integer> ids = new ArrayList<>();\n        ids.add(1);\n        ids.add(4);\n        List<Employee> employeeList = employeeMapper.selectBatchIds(ids);\n        System.out.println(employeeList);\n    }\n}\n\n复制代码\n\n测试结果\n\n\n根据多条件查询\n\n除开支持主键查询外，MP 还支持条件查询，只要将我们的条件传入 Map  列表中，然后将其作为 selectByMap 方法的参数即可，其中传入 Map 的 key 对应我们数据库中的字段，而 value 则对应字段的值。\n\n方法声明\n\n/**\n     * 查询（根据 columnMap 条件）\n     *\n     * @param columnMap 表字段 map 对象\n     */\nList<T> selectByMap(@Param(Constants.COLUMN_MAP) Map<String, Object> columnMap);\n\n复制代码\n\n条件查询实例\n\npackage com.cunyu.employee;\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n    @Test\n    void contextLoads() {\n    }\n\n    @Autowired\n    private EmployeeMapper employeeMapper;\n\n    @Test\n    void testSelectByMap() {\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"sex\", \"男\");\n        map.put(\"name\", \"张三\");\n        System.out.println(employeeMapper.selectByMap(map));\n    }\n}\n\n复制代码\n\n测试结果\n\nupdate 操作\n更新操作，主要是根据我们数据库的主键进行查询，将对应主键的实体对象传入 updateById 方法即可。\n\n方法声明\n\n/**\n     * 根据 ID 修改\n     *\n     * @param entity 实体对象\n     */\nint updateById(@Param(Constants.ENTITY) T entity);\n\n复制代码\n\n更新实例\n\npackage com.cunyu.employee;\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n    @Autowired\n    private EmployeeMapper employeeMapper;\n\n    @Test\n    void testUpdate() {\n        Employee employee = new Employee();\n\n        employee.setEmail(\"zhao6@cunyu1943.com\");\n        employee.setName(\"赵 6\");\n        employee.setSex(\"女\");\n        employee.setId(4L);\n\n        Assert.assertEquals(1, employeeMapper.updateById(employee));\n        System.out.println(\"更新成功\");\n    }\n\n}\n\n复制代码\n\n测试结果\n\n\n数据更新后的数据库\n\ndelete 操作\n删除操作，既可以根据主键删除一条记录，也能根据主键列表实现批量删除，还能根据条件来进行删除。\n\n根据主键删除一条数据\n\n将所要删除记录的主键作为参数传入 deleteById 方法即可。\n\n方法声明\n\n/**\n     * 根据 ID 删除\n     *\n     * @param id 主键ID\n     */\nint deleteById(Serializable id);\n\n复制代码\n\n删除实例\n\npackage com.cunyu.employee;\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n    @Autowired\n    private EmployeeMapper employeeMapper;\n\n    @Test\n    void testDeleteById() {\n        Assert.assertEquals(1, employeeMapper.deleteById(2L));\n        System.out.println(\"删除成功\");\n    }\n}\n\n复制代码\n\n测试结果\n\n\n删除数据后的数据库\n\n\n根据条件删除\n\n根据条件删除同样是讲条件传入 Map 中，然后将 Map 作为参数传入 deleteByMap 方法，其中 key 对应数据库中的字段，value 对应字段的值。\n\n方法声明\n\n/**\n     * 根据 columnMap 条件，删除记录\n     *\n     * @param columnMap 表字段 map 对象\n     */\nint deleteByMap(@Param(Constants.COLUMN_MAP) Map<String, Object> columnMap);\n\n复制代码\n\n删除实例\n\npackage com.cunyu.employee;\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n    @Autowired\n    private EmployeeMapper employeeMapper;\n\n    @Test\n    void testDeleteByMap() {\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"name\", \"赵 6\");\n        Assert.assertEquals(1, employeeMapper.deleteByMap(map));\n        System.out.println(\"删除成功\");\n    }\n}\n\n复制代码\n\n测试结果\n\n\n删除数据后的数据库\n\n\n根据主键批量删除\n\n将要删除记录的主键传入集合中，然后将集合作为 deleteBatchIds 方法的参数即可。\n\n方法声明\n\n/**\n     * 删除（根据ID 批量删除）\n     *\n     * @param idList 主键ID列表(不能为 null 以及 empty)\n     */\nint deleteBatchIds(@Param(Constants.COLLECTION) Collection<? extends Serializable> idList);\n\n复制代码\n\n批量删除实例\n\npackage com.cunyu.employee;\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n    @Autowired\n    private EmployeeMapper employeeMapper;\n\n    @Test\n    void testDeleteBatchIds() {\n        List<Integer> ids = new ArrayList<>();\n        ids.add(1);\n        ids.add(3);\n        Assert.assertEquals(2, employeeMapper.deleteBatchIds(ids));\n        System.out.println(\"删除成功\");\n    }\n}\n\n复制代码\n\n测试结果\n\n\n删除数据后的数据库\n\nService CRUD 接口\nService 层继承自 IService 接口，其中的方法和 Mapper 层中所提供的方法功能是一致的，除了方法名有所不同外，其他基本类似，但 Service 层中提供了更为丰富的方法，两者的继承结构如下图所示。\n\n<img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/12764416856e4a9194c4b7046683ecd4~tplv-k3u1fbpfcp-zoom-1.image\" style=\"zoom:150%;\" />\n\npackage com.cunyu.employee.service;\n\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport com.cunyu.employee.entity.Employee;\n\n/**\n * Created with IntelliJ IDEA.\n *\n * @author : cunyu\n * @version : 1.0\n * @project : Employee\n * @package : com.cunyu.employee.service\n * @className : EmployeeService\n * @createTime : 2021/8/8 7:52\n * @description : 员工服务接口\n */\n@Service\npublic interface EmployeeService extends IService<Employee> {\n}\n\n复制代码\n\npackage com.cunyu.employee.service.Impl;\n\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\n\n/**\n * Created with IntelliJ IDEA.\n *\n * @author : cunyu\n * @version : 1.0\n * @project : Employee\n * @package : com.cunyu.employee.service.Impl\n * @className : EmployeeServiceImpl\n * @createTime : 2021/8/8 7:53\n * @description : 员工服务类实现\n */\n\n@Service\npublic class EmployeeServiceImpl extends ServiceImpl<EmployeeMapper, Employee> implements EmployeeService {\n}\n\n复制代码\nSave\n插入一条记录\n\n功能同 Mapper 层中的 insert 方法，只不过方法名不同。\n\n方法声明\n\n// 插入一条记录（选择字段，策略插入）\nboolean save(T entity);\n\n复制代码\n\n插入实例\n\npackage com.cunyu.employee;\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n    @Autowired\n    private EmployeeService employeeService;\n\n    @Test\n    void testSave() {\n        Employee employee = new Employee();\n        employee.setId(5L);\n        employee.setName(\"周七\");\n        employee.setEmail(\"zhouqi@cunyu1943.com\");\n        employee.setSex(\"女\");\n        Assert.assertTrue(employeeService.save(employee));\n        System.out.println(\"插入成功\");\n    }\n}\n\n复制代码\n\n测试结果\n\n\n插入数据后的数据库\n\n\n批量插入\n\n这里就和 Mapper 层中所有区别，Mapper 层中只支持单次插入，而 Service 层中支持批量插入，而传入的参数就是我们所要传入实体的集合，而且还可以分批次插入和统一插入。\n\n2.1 统一插入\n\n方法声明\n\n// 插入（批量）\nboolean saveBatch(Collection<T> entityList);\n\n复制代码\n\n插入实例\n\npackage com.cunyu.employee;\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n    @Autowired\n    private EmployeeService employeeService;\n\n    @Test\n    void testSaveBatch() {\n        Employee employee1 = new Employee();\n        employee1.setId(6L);\n        employee1.setEmail(\"zhangliang@cunyu1943.com\");\n        employee1.setSex(\"男\");\n        employee1.setName(\"张良\");\n\n        Employee employee2 = new Employee();\n        employee2.setId(7L);\n        employee2.setEmail(\"zhouyu@cunyu1943.com\");\n        employee2.setName(\"周瑜\");\n        employee2.setSex(\"男\");\n\n        List<Employee> employeeList = new ArrayList<>();\n        employeeList.add(employee1);\n        employeeList.add(employee2);\n\n        Assert.assertTrue(employeeService.saveBatch(employeeList));\n        System.out.println(\"批量插入成功\");\n    }\n}\n\n复制代码\n\n测试结果\n\n\n统一插入后的数据库\n\n\n2.2 分批次插入\n\n方法声明\n\n// 插入（批量）\nboolean saveBatch(Collection<T> entityList, int batchSize);\n\n复制代码\n\n分批次插入实例\n\npackage com.cunyu.employee;\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n    @Autowired\n    private EmployeeService employeeService;\n\n    @Test\n    void testSaveBatch() {\n        Employee employee1 = new Employee();\n        employee1.setId(8L);\n        employee1.setEmail(\"jialuo@cunyu1943.com\");\n        employee1.setSex(\"女\");\n        employee1.setName(\"迦罗\");\n\n        Employee employee2 = new Employee();\n        employee2.setId(9L);\n        employee2.setEmail(\"zhugeliang@cunyu1943.com\");\n        employee2.setName(\"诸葛亮\");\n        employee2.setSex(\"男\");\n\n        List<Employee> employeeList = new ArrayList<>();\n        employeeList.add(employee1);\n        employeeList.add(employee2);\n\n        Assert.assertTrue(employeeService.saveBatch(employeeList,2));\n        System.out.println(\"批量插入成功\");\n    }\n}\n\n复制代码\n\n测试结果\n\n\n分批次插入后的数据库\n\nSaveOrUpdate\n单条修改插入\n\n方法声明\n\n// TableId 注解存在更新记录，否插入一条记录\nboolean saveOrUpdate(T entity);\n\n复制代码\n\n单条修改插入实例\n\npackage com.cunyu.employee;\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n    @Autowired\n    private EmployeeService employeeService;\n\n    @Test\n    void testSaveOrUpdate() {\n        Employee employee = new Employee();\n        employee.setId(5L);\n        employee.setName(\"周武\");\n        employee.setEmail(\"zhouwu@cunyu1943.com\");\n        employee.setSex(\"男\");\n\n        Assert.assertTrue(employeeService.saveOrUpdate(employee));\n        System.out.println(\"更新成功\");\n    }\n}\n\n复制代码\n\n测试结果\n\n\n修改插入后的数据库\n\n\n批量修改插入\n\n2.1 统一插入\n\n方法声明\n\n// 批量修改插入\nboolean saveOrUpdateBatch(Collection<T> entityList);\n\n复制代码\n\n统一插入实例\n\npackage com.cunyu.employee;\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n    @Autowired\n    private EmployeeService employeeService;\n\n    @Test\n    void testSaveOrUpdateBatch() {\n        Employee employee1 = new Employee();\n        employee1.setId(10L);\n        employee1.setEmail(\"zhongwuyan@cunyu1943.com\");\n        employee1.setSex(\"女\");\n        employee1.setName(\"钟无艳\");\n\n        Employee employee2 = new Employee();\n        employee2.setId(11L);\n        employee2.setEmail(\"direnjie@cunyu1943.com\");\n        employee2.setName(\"狄仁杰\");\n        employee2.setSex(\"男\");\n\n        List<Employee> employeeList = new ArrayList<>();\n        employeeList.add(employee1);\n        employeeList.add(employee2);\n\n        Assert.assertTrue(employeeService.saveOrUpdateBatch(employeeList));\n        System.out.println(\"批量修改插入成功\");\n    }\n}\n\n复制代码\n\n测试结果\n\n\n统一插入数据后的数据库\n\n\n2.2 分批次插入\n\n方法声明\n\n// 批量修改插入\nboolean saveOrUpdateBatch(Collection<T> entityList, int batchSize);\n\n复制代码\n\n方法实例\n\npackage com.cunyu.employee;\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n    @Autowired\n    private EmployeeService employeeService;\n\n    @Test\n    void testSaveOrUpdateBatch() {\n        Employee employee1 = new Employee();\n        employee1.setId(12L);\n        employee1.setEmail(\"yuji@cunyu1943.com\");\n        employee1.setSex(\"女\");\n        employee1.setName(\"虞姬\");\n\n        Employee employee2 = new Employee();\n        employee2.setId(13L);\n        employee2.setEmail(\"sulie@cunyu1943.com\");\n        employee2.setName(\"苏烈\");\n        employee2.setSex(\"男\");\n\n        List<Employee> employeeList = new ArrayList<>();\n        employeeList.add(employee1);\n        employeeList.add(employee2);\n\n        Assert.assertTrue(employeeService.saveOrUpdateBatch(employeeList, 2));\n        System.out.println(\"批量修改插入成功\");\n    }\n}\n\n复制代码\n\n测试结果\n\n\n分批次插入数据后的数据库\n\nRemove\n根据 ID 删除\n\n方法实例\n\n// 根据 ID 删除\nboolean removeById(Serializable id);\n\n复制代码\n\n删除实例\n\npackage com.cunyu.employee;\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n    @Autowired\n    private EmployeeService employeeService;\n\n    @Test\n    void testRemoveById() {\n        Assert.assertTrue(employeeService.removeById(5));\n        System.out.println(\"删除成功\");\n    }\n}\n\n复制代码\n\n测试结果\n\n\n\n根据条件删除\n\n方法声明\n\n// 根据 columnMap 条件，删除记录\nboolean removeByMap(Map<String, Object> columnMap);\n\n复制代码\n\n按条件删除实例\n\npackage com.cunyu.employee;\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n    @Autowired\n    private EmployeeService employeeService;\n\n    @Test\n    void testRemoveByMap() {\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"sex\", \"女\");\n        Assert.assertTrue(employeeService.removeByMap(map));\n        System.out.println(\"删除成功\");\n    }\n}\n\n复制代码\n\n测试结果\n\n\n按条件删除后的数据库\n\n\n根据 ID 批量删除\n\n方法声明\n\n// 删除（根据ID 批量删除）\nboolean removeByIds(Collection<? extends Serializable> idList);\n\n复制代码\n\n批量删除实例\n\npackage com.cunyu.employee;\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n    @Autowired\n    private EmployeeService employeeService;\n\n    @Test\n    void testRemoveByIds() {\n        List<Integer> ids = new ArrayList<>();\n        ids.add(1);\n        ids.add(4);\n        Assert.assertTrue(employeeService.removeByIds(ids));\n        System.out.println(\"批量删除成功\");\n    }\n}\n\n复制代码\n\n测试结果\n\n\n批量删除后的数据库\n\nUpdate\n根据 ID 选择修改\n\n方法声明\n\n// 根据 ID 选择修改\nboolean updateById(T entity);\n\n复制代码\n\n根据 ID 修改实例\n\npackage com.cunyu.employee;\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n    @Autowired\n    private EmployeeService employeeService;\n\n    @Test\n    void testUpdateById() {\n        Employee employee = new Employee();\n        employee.setId(3L);\n        employee.setName(\"程咬金\");\n        employee.setSex(\"男\");\n        employee.setEmail(\"chengyaojin@cunyu1943.com\");\n\n        Assert.assertTrue(employeeService.updateById(employee));\n        System.out.println(\"更新成功\");\n    }\n}\n\n复制代码\n\n测试结果\n\n\n更新后的数据库\n\n\n根据 ID 批量更新\n\n2.1 统一更新\n\n方法声明\n\n// 根据ID 批量更新\nboolean updateBatchById(Collection<T> entityList);\n\n复制代码\n\n批量更新实例\n\npackage com.cunyu.employee;\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n    @Autowired\n    private EmployeeService employeeService;\n\n    @Test\n    void testUpdateBatchById() {\n        Employee employee1 = new Employee();\n        employee1.setId(6L);\n        employee1.setName(\"妲己\");\n        employee1.setSex(\"女\");\n        employee1.setEmail(\"daji@cunyu1943.com\");\n\n        Employee employee2 = new Employee();\n        employee2.setId(13L);\n        employee2.setName(\"小乔\");\n        employee2.setSex(\"女\");\n        employee2.setEmail(\"xiaoqiao@cunyu1943.com\");\n\n        List<Employee> employeeList = new ArrayList<>();\n        employeeList.add(employee1);\n        employeeList.add(employee2);\n\n        Assert.assertTrue(employeeService.updateBatchById(employeeList));\n        System.out.println(\"更新成功\");\n    }\n}\n\n复制代码\n\n测试结果\n\n\n批量更新后的数据库\n\n\n2.2 分批次更新\n\n方法声明\n\n// 根据ID 批量更新\nboolean updateBatchById(Collection<T> entityList, int batchSize);\n\n复制代码\n\n分批次更新实例\n\npackage com.cunyu.employee;\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n    @Autowired\n    private EmployeeService employeeService;\n\n    @Test\n    void testUpdateBatchById() {\n        Employee employee1 = new Employee();\n        employee1.setId(7L);\n        employee1.setName(\"武则天\");\n        employee1.setSex(\"女\");\n        employee1.setEmail(\"wuzetian@cunyu1943.com\");\n\n        Employee employee2 = new Employee();\n        employee2.setId(3L);\n        employee2.setName(\"李元芳\");\n        employee2.setSex(\"男\");\n        employee2.setEmail(\"liyuanfang@cunyu1943.com\");\n\n        List<Employee> employeeList = new ArrayList<>();\n        employeeList.add(employee1);\n        employeeList.add(employee2);\n\n        Assert.assertTrue(employeeService.updateBatchById(employeeList, 2));\n        System.out.println(\"更新成功\");\n    }\n}\n\n复制代码\n\n测试结果\n\n\n分批次更新后的数据库\n\nGet\n根据 ID 查询\n\n将所要查询记录的 id 作为参数，然后将查询到的实体返回。\n\n方法声明\n\n// 根据 ID 查询\nT getById(Serializable id);\n\n复制代码\n\n查询实例\n\npackage com.cunyu.employee;\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n    @Autowired\n    private EmployeeService employeeService;\n\n    @Test\n    void testGetById() {\n        Employee employee = employeeService.getById(9);\n        System.out.println(employee);\n    }\n}\n\n复制代码\n\n测试结果\n\nList\n查询所有\n\n查询所有记录，然后返回到一个集合中。\n\n方法声明\n\n// 查询所有\nList<T> list();\n\n复制代码\n\n查询实例\n\npackage com.cunyu.employee;\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n    @Autowired\n    private EmployeeService employeeService;\n\n    @Test\n    void testList() {\n        List<Employee> employeeLists = new ArrayList<>();\n        employeeLists = employeeService.list();\n        Assert.assertEquals(6, employeeLists.size());\n        System.out.println(\"查询成功\");\n    }\n}\n\n复制代码\n\n测试结果\n\n\n根据 ID 批量查询\n\n讲所要查询的记录 id 传入集合，然后座位方法参数，最后返回查询到的结果到一个集合中。\n\n方法声明\n\n// 查询（根据ID 批量查询）\nCollection<T> listByIds(Collection<? extends Serializable> idList);\n\n复制代码\n\n批量查询实例\n\npackage com.cunyu.employee;\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n    @Autowired\n    private EmployeeService employeeService;\n\n    @Test\n    void testListByIds() {\n        List<Long> ids = new ArrayList<>();\n\n        ids.add(6L);\n        ids.add(7L);\n\n        Assert.assertEquals(2, employeeService.listByIds(ids).size());\n        System.out.println(\"查询成功\");\n\n    }\n}\n\n复制代码\n\n测试结果\n\n\n根据条件查询\n\n条件传入 Map 集合，key 对应字段，value 对应值，然后返回集合。\n\n方法声明\n\n// 查询（根据 columnMap 条件）\nCollection<T> listByMap(Map<String, Object> columnMap);\n\n复制代码\n\n根据条件查询实例\n\npackage com.cunyu.employee;\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n    @Autowired\n    private EmployeeService employeeService;\n    @Test\n    void testListByMap() {\n        Map<String, Object> map = new HashMap<>();\n\n        map.put(\"sex\", \"女\");\n\n        Assert.assertEquals(3, employeeService.listByMap(map).size());\n        System.out.println(\"查询成功\");\n    }\n}\n\n复制代码\n\n测试结果\n\n\n查询所有列表\n\n方法声明\n\n// 查询所有列表\nList<Map<String, Object>> listMaps();\n\n复制代码\n\n查询实例\n\npackage com.cunyu.employee;\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n    @Autowired\n    private EmployeeService employeeService;\n\n    @Test\n    void testListMaps() {\n        Assert.assertEquals(6, employeeService.listMaps());\n        System.out.println(\"查询成功\");\n    }\n}\n\n复制代码\n\n测试结果\n\n\n查询所有记录\n\n用于查询所有数据记录，并将其返回到一个集合中。\n\n方法声明\n\n// 查询全部记录\nList<Object> listObjs();\n\n复制代码\n\n查询实例\n\npackage com.cunyu.employee;\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n    @Autowired\n    private EmployeeService employeeService;\n\n    @Test\n    void testListObjs() {\n        Assert.assertEquals(6, employeeService.listObjs().size());\n        System.out.println(\"查询成功\");\n    }\n}\n\n复制代码\n\n测试结果\n\nCount\n查询记录总数\n\n用于统计数据控中的记录总条数，方法返回记录条数。\n\n方法声明\n\n// 查询总记录数\nint count();\n\n复制代码\n\n查询记录总数实例\n\npackage com.cunyu.employee;\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n    @Autowired\n    private EmployeeService employeeService;\n\n    @Test\n    void testCount() {\n        Assert.assertEquals(6, employeeService.count());\n        System.out.println(\"查询成功\");\n    }\n}\n\n复制代码\n\n测试结果\n\n总结\n好了，以上就是关于 Mybatis-Plus 的日志配置以及如何进行 CRUD 的相关内容了，这里 CRUD 主要又分为 Mapper 层和 Service 层，我们可以根据自己的需要进行选择。当然，在我们日常使用中，常常都是两个接口一起使用，关于更多 MP 的使用技巧，我们下期文章再见！', '<div contenteditable=\"false\" class=\"ProseMirror\"><h2 data-id=\"heading0\" data-type=\"heading\" top=\"268\">前言</h2><p data-type=\"paragraph\">上一篇文章中我们讲了 Mybatis-Plus 的定义以及相关特点，并从零开始编写了一个 SpringBoot + Mybatis-Plus 的实例。今天我们就来看看，如何利用 MP 来实现对数据库的增删改查。</p><h2 data-id=\"heading1\" data-type=\"heading\" top=\"402\">日志配置</h2><p data-type=\"paragraph\">使用 MP 时，默认是不打印任何 SQL 语句的。而为了方便日常开发工作的调试，我们需要联合控制台和各种数据可视化工具进行语句的拼接检查，因此我们利用 MP 自带的日志功能，在控制台输出我们的 SQL 语句，从而方便我们调试。</p><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">在配置文件 <code data-type=\"codeinline\">application.yml</code> （IDEA 默认生成的配置文件为 <code data-type=\"codeinline\">application.properties</code>）中，加入一下配置，这样 MP 就会在控制台中打印完整带参数的 SQL 语句，方便我们查看。</p><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"cpp\"><code data-type=\"codeline\">mybatis-plus:</code><code data-type=\"codeline\">  configuration:</code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-built_in\">log</span>-impl: org.apache.ibatis.logging.<span data-type=\"markclass\" class=\"hljs-built_in\">stdout</span>.StdOutImpl</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 90px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div></div></div></div><h2 data-id=\"heading2\" data-type=\"heading\" top=\"840\">Mapper CRUD 使用方法</h2><p data-type=\"paragraph\">首先我们来看 <code data-type=\"codeinline\">Mapper</code> 层 CRUD 涉及的一些方法，<code data-type=\"codeinline\">Mapper</code> 层主要继承自 <code data-type=\"codeinline\">BaseMapper</code> 接口，里边实现了各种用于操作数据库的增删改查的方法，以下我们就来看看日常我们常用的一些方法。</p><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee.mapper;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">/**</span></code><code data-type=\"codeline\"> * Created with IntelliJ IDEA.</code><code data-type=\"codeline\"> *</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@author</span> : cunyu</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@version</span> : 1.0</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@project</span> : Employee</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@package</span> : com.cunyu.employee.mapper</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@className</span> : EmployeeMapper</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@createTime</span> : 2021/8/7 17:45</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@description</span> : 员工 Mapper 类</code><code data-type=\"codeline\"> */</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">public</span> <span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">interface</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeMapper</span> <span data-type=\"markclass\" class=\"hljs-keyword\">extends</span> <span data-type=\"markclass\" class=\"hljs-title\">BaseMapper</span>&lt;<span data-type=\"markclass\" class=\"hljs-title\">Employee</span>&gt; </span>{</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 390px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div></div></div></div><h3 data-id=\"heading3\" data-type=\"heading\" top=\"1458\">insert 操作</h3><p data-type=\"paragraph\">首先是插入数据，<code data-type=\"codeinline\">insert</code> 方法中，传入我们所要插入数据库的实体对象作为参数即可。</p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">/**</span></code><code data-type=\"codeline\">     * 插入一条记录</code><code data-type=\"codeline\">     *</code><code data-type=\"codeline\">     * <span data-type=\"markclass\" class=\"hljs-doctag\">@param</span> entity 实体对象</code><code data-type=\"codeline\">     */</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">int</span> <span data-type=\"markclass\" class=\"hljs-title\">insert</span><span data-type=\"markclass\" class=\"hljs-params\">(T entity)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 150px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">插入实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">contextLoads</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeMapper employeeMapper;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testInsert</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Employee employee = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee.setId(<span data-type=\"markclass\" class=\"hljs-number\">4L</span>);</code><code data-type=\"codeline\">        employee.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"赵六\"</span>);</code><code data-type=\"codeline\">        employee.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"男\"</span>);</code><code data-type=\"codeline\">        employee.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"zhaoliu@cunyu1943.com\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Assert.assertEquals(<span data-type=\"markclass\" class=\"hljs-number\">1</span>, employeeMapper.insert(employee));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"插入成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 690px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div><div data-codeblock-number=\"29\"></div><div data-codeblock-number=\"30\"></div><div data-codeblock-number=\"31\"></div><div data-codeblock-number=\"32\"></div><div data-codeblock-number=\"33\"></div><div data-codeblock-number=\"34\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/16/162f0ad2bbc06fd97314e6b7e560724a.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">数据插入后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/32/321f7a08cc843dc05c7cafdc33331be5.png\"> <!----></div></div><h3 data-id=\"heading4\" data-type=\"heading\" top=\"2922\">select 操作</h3><p data-type=\"paragraph\">相比于插入数据操作，查询数据的方法就要更多，而且还能实现批量查询和条件查询。</p><p data-type=\"paragraph\"><br></p><ol data-type=\"numberedlist\"><li><p data-number=\"1\" data-type=\"paragraph\"><strong data-type=\"strong\">根据主键查询</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">将所要查询数据的主键作为参数传入我们的 <code data-type=\"codeinline\">selectById</code> 方法中，即可实现。</p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">/**</span></code><code data-type=\"codeline\">     * 根据 ID 查询</code><code data-type=\"codeline\">     *</code><code data-type=\"codeline\">     * <span data-type=\"markclass\" class=\"hljs-doctag\">@param</span> id 主键ID</code><code data-type=\"codeline\">     */</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\">T <span data-type=\"markclass\" class=\"hljs-title\">selectById</span><span data-type=\"markclass\" class=\"hljs-params\">(Serializable id)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 150px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">查询实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">contextLoads</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeMapper employeeMapper;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testSelectById</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Employee employee = employeeMapper.selectById(<span data-type=\"markclass\" class=\"hljs-number\">3</span>);</code><code data-type=\"codeline\">        System.out.println(employee);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 550px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/99/99c4172bc0168511beb4404dd685ce47.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ol start=\"2\" data-type=\"numberedlist\"><li><p data-number=\"2\" data-type=\"paragraph\"><strong data-type=\"strong\">根据主键批量查询</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">上一个方法每次只能查询一条记录，如果我们想要查询多条数据记录，那么就可以将要查询数据的主键列表传入 <code data-type=\"codeinline\">selectBatchIds</code> 方法即可。</p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">/**</span></code><code data-type=\"codeline\">     * 查询（根据ID 批量查询）</code><code data-type=\"codeline\">     *</code><code data-type=\"codeline\">     * <span data-type=\"markclass\" class=\"hljs-doctag\">@param</span> idList 主键ID列表(不能为 null 以及 empty)</code><code data-type=\"codeline\">     */</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\">List&lt;T&gt; <span data-type=\"markclass\" class=\"hljs-title\">selectBatchIds</span><span data-type=\"markclass\" class=\"hljs-params\">(<span data-type=\"markclass\" class=\"hljs-meta\">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 150px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">批量查询实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">contextLoads</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeMapper employeeMapper;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testSelectBatchIds</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        List&lt;Integer&gt; ids = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();</code><code data-type=\"codeline\">        ids.add(<span data-type=\"markclass\" class=\"hljs-number\">1</span>);</code><code data-type=\"codeline\">        ids.add(<span data-type=\"markclass\" class=\"hljs-number\">4</span>);</code><code data-type=\"codeline\">        List&lt;Employee&gt; employeeList = employeeMapper.selectBatchIds(ids);</code><code data-type=\"codeline\">        System.out.println(employeeList);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 610px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div><div data-codeblock-number=\"29\"></div><div data-codeblock-number=\"30\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/e4/e465c6bdceab09c59d5a550ff8d893ba.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ol start=\"3\" data-type=\"numberedlist\"><li><p data-number=\"3\" data-type=\"paragraph\"><strong data-type=\"strong\">根据多条件查询</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">除开支持主键查询外，MP 还支持条件查询，只要将我们的条件传入 <code data-type=\"codeinline\">Map</code>  列表中，然后将其作为 <code data-type=\"codeinline\">selectByMap</code> 方法的参数即可，其中传入 <code data-type=\"codeinline\">Map</code> 的 <code data-type=\"codeinline\">key</code> 对应我们数据库中的字段，而 <code data-type=\"codeinline\">value</code> 则对应字段的值。</p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">/**</span></code><code data-type=\"codeline\">     * 查询（根据 columnMap 条件）</code><code data-type=\"codeline\">     *</code><code data-type=\"codeline\">     * <span data-type=\"markclass\" class=\"hljs-doctag\">@param</span> columnMap 表字段 map 对象</code><code data-type=\"codeline\">     */</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\">List&lt;T&gt; <span data-type=\"markclass\" class=\"hljs-title\">selectByMap</span><span data-type=\"markclass\" class=\"hljs-params\">(<span data-type=\"markclass\" class=\"hljs-meta\">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 150px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">条件查询实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">contextLoads</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeMapper employeeMapper;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testSelectByMap</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Map&lt;String, Object&gt; map = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();</code><code data-type=\"codeline\">        map.put(<span data-type=\"markclass\" class=\"hljs-string\">\"sex\"</span>, <span data-type=\"markclass\" class=\"hljs-string\">\"男\"</span>);</code><code data-type=\"codeline\">        map.put(<span data-type=\"markclass\" class=\"hljs-string\">\"name\"</span>, <span data-type=\"markclass\" class=\"hljs-string\">\"张三\"</span>);</code><code data-type=\"codeline\">        System.out.println(employeeMapper.selectByMap(map));</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 590px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div><div data-codeblock-number=\"29\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/17/170f98e7dbfdbb5c714c02b6cbec506f.png\"> <!----></div></div><h3 data-id=\"heading5\" data-type=\"heading\" top=\"6891\">update 操作</h3><p data-type=\"paragraph\">更新操作，主要是根据我们数据库的主键进行查询，将对应主键的实体对象传入 <code data-type=\"codeinline\">updateById</code> 方法即可。</p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">/**</span></code><code data-type=\"codeline\">     * 根据 ID 修改</code><code data-type=\"codeline\">     *</code><code data-type=\"codeline\">     * <span data-type=\"markclass\" class=\"hljs-doctag\">@param</span> entity 实体对象</code><code data-type=\"codeline\">     */</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">int</span> <span data-type=\"markclass\" class=\"hljs-title\">updateById</span><span data-type=\"markclass\" class=\"hljs-params\">(<span data-type=\"markclass\" class=\"hljs-meta\">@Param(Constants.ENTITY)</span> T entity)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 150px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">更新实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeMapper employeeMapper;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testUpdate</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Employee employee = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        employee.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"zhao6@cunyu1943.com\"</span>);</code><code data-type=\"codeline\">        employee.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"赵 6\"</span>);</code><code data-type=\"codeline\">        employee.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"女\"</span>);</code><code data-type=\"codeline\">        employee.setId(<span data-type=\"markclass\" class=\"hljs-number\">4L</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Assert.assertEquals(<span data-type=\"markclass\" class=\"hljs-number\">1</span>, employeeMapper.updateById(employee));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"更新成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 610px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div><div data-codeblock-number=\"29\"></div><div data-codeblock-number=\"30\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/59/59400dfaedf0db1780537ca0d09587db.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">数据更新后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/4b/4be670ca0c0da233be8033006b96920d.png\"> <!----></div></div><h3 data-id=\"heading6\" data-type=\"heading\" top=\"8275\">delete 操作</h3><p data-type=\"paragraph\">删除操作，既可以根据主键删除一条记录，也能根据主键列表实现批量删除，还能根据条件来进行删除。</p><p data-type=\"paragraph\"><br></p><ol data-type=\"numberedlist\"><li><p data-number=\"1\" data-type=\"paragraph\"><strong data-type=\"strong\">根据主键删除一条数据</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">将所要删除记录的主键作为参数传入 <code data-type=\"codeinline\">deleteById</code> 方法即可。</p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">/**</span></code><code data-type=\"codeline\">     * 根据 ID 删除</code><code data-type=\"codeline\">     *</code><code data-type=\"codeline\">     * <span data-type=\"markclass\" class=\"hljs-doctag\">@param</span> id 主键ID</code><code data-type=\"codeline\">     */</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">int</span> <span data-type=\"markclass\" class=\"hljs-title\">deleteById</span><span data-type=\"markclass\" class=\"hljs-params\">(Serializable id)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 150px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">删除实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeMapper employeeMapper;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testDeleteById</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Assert.assertEquals(<span data-type=\"markclass\" class=\"hljs-number\">1</span>, employeeMapper.deleteById(<span data-type=\"markclass\" class=\"hljs-number\">2L</span>));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"删除成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 450px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/df/df2d313e92ca57060c8429d06dd5c17f.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">删除数据后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/03/0341908adffb4190c79ec47972d74b9d.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ol start=\"2\" data-type=\"numberedlist\"><li><p data-number=\"2\" data-type=\"paragraph\"><strong data-type=\"strong\">根据条件删除</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">根据条件删除同样是讲条件传入 <code data-type=\"codeinline\">Map</code> 中，然后将 <code data-type=\"codeinline\">Map</code> 作为参数传入 <code data-type=\"codeinline\">deleteByMap</code> 方法，其中 <code data-type=\"codeinline\">key</code> 对应数据库中的字段，<code data-type=\"codeinline\">value</code> 对应字段的值。</p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">/**</span></code><code data-type=\"codeline\">     * 根据 columnMap 条件，删除记录</code><code data-type=\"codeline\">     *</code><code data-type=\"codeline\">     * <span data-type=\"markclass\" class=\"hljs-doctag\">@param</span> columnMap 表字段 map 对象</code><code data-type=\"codeline\">     */</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">int</span> <span data-type=\"markclass\" class=\"hljs-title\">deleteByMap</span><span data-type=\"markclass\" class=\"hljs-params\">(<span data-type=\"markclass\" class=\"hljs-meta\">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 150px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">删除实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeMapper employeeMapper;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testDeleteByMap</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Map&lt;String, Object&gt; map = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();</code><code data-type=\"codeline\">        map.put(<span data-type=\"markclass\" class=\"hljs-string\">\"name\"</span>, <span data-type=\"markclass\" class=\"hljs-string\">\"赵 6\"</span>);</code><code data-type=\"codeline\">        Assert.assertEquals(<span data-type=\"markclass\" class=\"hljs-number\">1</span>, employeeMapper.deleteByMap(map));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"删除成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 490px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/63/63485b64e9750e80d1edf48b5676bcf7.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">删除数据后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/4b/4bcc0d315b82296a54ad8cb3ed6f7f94.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ol start=\"3\" data-type=\"numberedlist\"><li><p data-number=\"3\" data-type=\"paragraph\"><strong data-type=\"strong\">根据主键批量删除</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">将要删除记录的主键传入集合中，然后将集合作为 <code data-type=\"codeinline\">deleteBatchIds</code> 方法的参数即可。</p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">/**</span></code><code data-type=\"codeline\">     * 删除（根据ID 批量删除）</code><code data-type=\"codeline\">     *</code><code data-type=\"codeline\">     * <span data-type=\"markclass\" class=\"hljs-doctag\">@param</span> idList 主键ID列表(不能为 null 以及 empty)</code><code data-type=\"codeline\">     */</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">int</span> <span data-type=\"markclass\" class=\"hljs-title\">deleteBatchIds</span><span data-type=\"markclass\" class=\"hljs-params\">(<span data-type=\"markclass\" class=\"hljs-meta\">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 150px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">批量删除实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeMapper employeeMapper;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testDeleteBatchIds</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        List&lt;Integer&gt; ids = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();</code><code data-type=\"codeline\">        ids.add(<span data-type=\"markclass\" class=\"hljs-number\">1</span>);</code><code data-type=\"codeline\">        ids.add(<span data-type=\"markclass\" class=\"hljs-number\">3</span>);</code><code data-type=\"codeline\">        Assert.assertEquals(<span data-type=\"markclass\" class=\"hljs-number\">2</span>, employeeMapper.deleteBatchIds(ids));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"删除成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 510px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/75/7565afd103fa8aaf5215532aff3a8187.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">删除数据后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/01/01550e4716d48ded67429c40aab4da5e.png\"> <!----></div></div><h2 data-id=\"heading7\" data-type=\"heading\" top=\"12239\">Service CRUD 接口</h2><p data-type=\"paragraph\"><code data-type=\"codeinline\">Service</code> 层继承自 <code data-type=\"codeinline\">IService</code> 接口，其中的方法和 <code data-type=\"codeinline\">Mapper</code> 层中所提供的方法功能是一致的，除了方法名有所不同外，其他基本类似，但 <code data-type=\"codeinline\">Service</code> 层中提供了更为丰富的方法，两者的继承结构如下图所示。</p><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">&lt;img src=\"<a href=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/12764416856e4a9194c4b7046683ecd4~tplv-k3u1fbpfcp-zoom-1.image\" title=\"\" data-type=\"link\">https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/12764416856e4a9194c4b7046683ecd4~tplv-k3u1fbpfcp-zoom-1.image</a>\" style=\"zoom:150%;\" /&gt;</p><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee.service;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.extension.service.IService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">/**</span></code><code data-type=\"codeline\"> * Created with IntelliJ IDEA.</code><code data-type=\"codeline\"> *</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@author</span> : cunyu</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@version</span> : 1.0</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@project</span> : Employee</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@package</span> : com.cunyu.employee.service</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@className</span> : EmployeeService</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@createTime</span> : 2021/8/8 7:52</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@description</span> : 员工服务接口</code><code data-type=\"codeline\"> */</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@Service</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">public</span> <span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">interface</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeService</span> <span data-type=\"markclass\" class=\"hljs-keyword\">extends</span> <span data-type=\"markclass\" class=\"hljs-title\">IService</span>&lt;<span data-type=\"markclass\" class=\"hljs-title\">Employee</span>&gt; </span>{</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 410px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div></div></div></div><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee.service.Impl;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">/**</span></code><code data-type=\"codeline\"> * Created with IntelliJ IDEA.</code><code data-type=\"codeline\"> *</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@author</span> : cunyu</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@version</span> : 1.0</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@project</span> : Employee</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@package</span> : com.cunyu.employee.service.Impl</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@className</span> : EmployeeServiceImpl</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@createTime</span> : 2021/8/8 7:53</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@description</span> : 员工服务类实现</code><code data-type=\"codeline\"> */</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@Service</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">public</span> <span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeServiceImpl</span> <span data-type=\"markclass\" class=\"hljs-keyword\">extends</span> <span data-type=\"markclass\" class=\"hljs-title\">ServiceImpl</span>&lt;<span data-type=\"markclass\" class=\"hljs-title\">EmployeeMapper</span>, <span data-type=\"markclass\" class=\"hljs-title\">Employee</span>&gt; <span data-type=\"markclass\" class=\"hljs-keyword\">implements</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeService</span> </span>{</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 470px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 710px; display: block; transform: translate3d(0px, 0px, 0px);\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div></div></div></div><h3 data-id=\"heading8\" data-type=\"heading\" top=\"13532\">Save</h3><ol data-type=\"numberedlist\"><li><p data-number=\"1\" data-type=\"paragraph\"><strong data-type=\"strong\">插入一条记录</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">功能同 <code data-type=\"codeinline\">Mapper</code> 层中的 <code data-type=\"codeinline\">insert</code> 方法，只不过方法名不同。</p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 插入一条记录（选择字段，策略插入）</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">boolean</span> <span data-type=\"markclass\" class=\"hljs-title\">save</span><span data-type=\"markclass\" class=\"hljs-params\">(T entity)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">插入实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testSave</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Employee employee = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee.setId(<span data-type=\"markclass\" class=\"hljs-number\">5L</span>);</code><code data-type=\"codeline\">        employee.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"周七\"</span>);</code><code data-type=\"codeline\">        employee.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"zhouqi@cunyu1943.com\"</span>);</code><code data-type=\"codeline\">        employee.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"女\"</span>);</code><code data-type=\"codeline\">        Assert.assertTrue(employeeService.save(employee));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"插入成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 570px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/e7/e7a0fe029c4ab5c6f32f555356199c71.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">插入数据后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/a1/a1825db5a775fedae7ea555bdf01b9ed.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ol start=\"2\" data-type=\"numberedlist\"><li><p data-number=\"2\" data-type=\"paragraph\"><strong data-type=\"strong\">批量插入</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">这里就和 <code data-type=\"codeinline\">Mapper</code> 层中所有区别，<code data-type=\"codeinline\">Mapper</code> 层中只支持单次插入，而 <code data-type=\"codeinline\">Service</code> 层中支持批量插入，而传入的参数就是我们所要传入实体的集合，而且还可以分批次插入和统一插入。</p><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">2.1 <strong data-type=\"strong\">统一插入</strong></p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 插入（批量）</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">boolean</span> <span data-type=\"markclass\" class=\"hljs-title\">saveBatch</span><span data-type=\"markclass\" class=\"hljs-params\">(Collection&lt;T&gt; entityList)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">插入实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.ArrayList;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.List;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testSaveBatch</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Employee employee1 = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee1.setId(<span data-type=\"markclass\" class=\"hljs-number\">6L</span>);</code><code data-type=\"codeline\">        employee1.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"zhangliang@cunyu1943.com\"</span>);</code><code data-type=\"codeline\">        employee1.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"男\"</span>);</code><code data-type=\"codeline\">        employee1.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"张良\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Employee employee2 = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee2.setId(<span data-type=\"markclass\" class=\"hljs-number\">7L</span>);</code><code data-type=\"codeline\">        employee2.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"zhouyu@cunyu1943.com\"</span>);</code><code data-type=\"codeline\">        employee2.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"周瑜\"</span>);</code><code data-type=\"codeline\">        employee2.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"男\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        List&lt;Employee&gt; employeeList = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();</code><code data-type=\"codeline\">        employeeList.add(employee1);</code><code data-type=\"codeline\">        employeeList.add(employee2);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Assert.assertTrue(employeeService.saveBatch(employeeList));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"批量插入成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 850px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div><div data-codeblock-number=\"29\"></div><div data-codeblock-number=\"30\"></div><div data-codeblock-number=\"31\"></div><div data-codeblock-number=\"32\"></div><div data-codeblock-number=\"33\"></div><div data-codeblock-number=\"34\"></div><div data-codeblock-number=\"35\"></div><div data-codeblock-number=\"36\"></div><div data-codeblock-number=\"37\"></div><div data-codeblock-number=\"38\"></div><div data-codeblock-number=\"39\"></div><div data-codeblock-number=\"40\"></div><div data-codeblock-number=\"41\"></div><div data-codeblock-number=\"42\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/0d/0d17501f803208a1a76d18e956b4986b.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">统一插入后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/6a/6aca0e282fff7574076ec2563ab334d4.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">2.2 <strong data-type=\"strong\">分批次插入</strong></p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 插入（批量）</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">boolean</span> <span data-type=\"markclass\" class=\"hljs-title\">saveBatch</span><span data-type=\"markclass\" class=\"hljs-params\">(Collection&lt;T&gt; entityList, <span data-type=\"markclass\" class=\"hljs-keyword\">int</span> batchSize)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">分批次插入实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.ArrayList;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.List;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testSaveBatch</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Employee employee1 = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee1.setId(<span data-type=\"markclass\" class=\"hljs-number\">8L</span>);</code><code data-type=\"codeline\">        employee1.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"jialuo@cunyu1943.com\"</span>);</code><code data-type=\"codeline\">        employee1.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"女\"</span>);</code><code data-type=\"codeline\">        employee1.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"迦罗\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Employee employee2 = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee2.setId(<span data-type=\"markclass\" class=\"hljs-number\">9L</span>);</code><code data-type=\"codeline\">        employee2.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"zhugeliang@cunyu1943.com\"</span>);</code><code data-type=\"codeline\">        employee2.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"诸葛亮\"</span>);</code><code data-type=\"codeline\">        employee2.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"男\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        List&lt;Employee&gt; employeeList = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();</code><code data-type=\"codeline\">        employeeList.add(employee1);</code><code data-type=\"codeline\">        employeeList.add(employee2);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Assert.assertTrue(employeeService.saveBatch(employeeList,<span data-type=\"markclass\" class=\"hljs-number\">2</span>));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"批量插入成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 850px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div><div data-codeblock-number=\"29\"></div><div data-codeblock-number=\"30\"></div><div data-codeblock-number=\"31\"></div><div data-codeblock-number=\"32\"></div><div data-codeblock-number=\"33\"></div><div data-codeblock-number=\"34\"></div><div data-codeblock-number=\"35\"></div><div data-codeblock-number=\"36\"></div><div data-codeblock-number=\"37\"></div><div data-codeblock-number=\"38\"></div><div data-codeblock-number=\"39\"></div><div data-codeblock-number=\"40\"></div><div data-codeblock-number=\"41\"></div><div data-codeblock-number=\"42\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/b7/b7a2d78b3717687b4ebe0d9446cbb327.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">分批次插入后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/c4/c42b906f6f0e913e5650d9bd79c4a883.png\"> <!----></div></div><h3 data-id=\"heading9\" data-type=\"heading\" top=\"18012\">SaveOrUpdate</h3><ol data-type=\"numberedlist\"><li><p data-number=\"1\" data-type=\"paragraph\"><strong data-type=\"strong\">单条修改插入</strong></p></li></ol><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// TableId 注解存在更新记录，否插入一条记录</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">boolean</span> <span data-type=\"markclass\" class=\"hljs-title\">saveOrUpdate</span><span data-type=\"markclass\" class=\"hljs-params\">(T entity)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">单条修改插入实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.ArrayList;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.List;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testSaveOrUpdate</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Employee employee = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee.setId(<span data-type=\"markclass\" class=\"hljs-number\">5L</span>);</code><code data-type=\"codeline\">        employee.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"周武\"</span>);</code><code data-type=\"codeline\">        employee.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"zhouwu@cunyu1943.com\"</span>);</code><code data-type=\"codeline\">        employee.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"男\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Assert.assertTrue(employeeService.saveOrUpdate(employee));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"更新成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 650px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div><div data-codeblock-number=\"29\"></div><div data-codeblock-number=\"30\"></div><div data-codeblock-number=\"31\"></div><div data-codeblock-number=\"32\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/25/25b96fc01a45a585d4b98791a83c880c.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">修改插入后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/6e/6e472a6c455f4b5213eb9dd1ecc1e549.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ol start=\"2\" data-type=\"numberedlist\"><li><p data-number=\"2\" data-type=\"paragraph\"><strong data-type=\"strong\">批量修改插入</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">2.1 <strong data-type=\"strong\">统一插入</strong></p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 批量修改插入</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">boolean</span> <span data-type=\"markclass\" class=\"hljs-title\">saveOrUpdateBatch</span><span data-type=\"markclass\" class=\"hljs-params\">(Collection&lt;T&gt; entityList)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">统一插入实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.ArrayList;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.List;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testSaveOrUpdateBatch</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Employee employee1 = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee1.setId(<span data-type=\"markclass\" class=\"hljs-number\">10L</span>);</code><code data-type=\"codeline\">        employee1.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"zhongwuyan@cunyu1943.com\"</span>);</code><code data-type=\"codeline\">        employee1.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"女\"</span>);</code><code data-type=\"codeline\">        employee1.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"钟无艳\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Employee employee2 = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee2.setId(<span data-type=\"markclass\" class=\"hljs-number\">11L</span>);</code><code data-type=\"codeline\">        employee2.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"direnjie@cunyu1943.com\"</span>);</code><code data-type=\"codeline\">        employee2.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"狄仁杰\"</span>);</code><code data-type=\"codeline\">        employee2.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"男\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        List&lt;Employee&gt; employeeList = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();</code><code data-type=\"codeline\">        employeeList.add(employee1);</code><code data-type=\"codeline\">        employeeList.add(employee2);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Assert.assertTrue(employeeService.saveOrUpdateBatch(employeeList));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"批量修改插入成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 850px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div><div data-codeblock-number=\"29\"></div><div data-codeblock-number=\"30\"></div><div data-codeblock-number=\"31\"></div><div data-codeblock-number=\"32\"></div><div data-codeblock-number=\"33\"></div><div data-codeblock-number=\"34\"></div><div data-codeblock-number=\"35\"></div><div data-codeblock-number=\"36\"></div><div data-codeblock-number=\"37\"></div><div data-codeblock-number=\"38\"></div><div data-codeblock-number=\"39\"></div><div data-codeblock-number=\"40\"></div><div data-codeblock-number=\"41\"></div><div data-codeblock-number=\"42\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/91/91bcc7f3ad73eca3eefeb45576f209c5.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">统一插入数据后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/40/4038f74beaf3af24332c78aa0f8a20f1.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">2.2 <strong data-type=\"strong\">分批次插入</strong></p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 批量修改插入</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">boolean</span> <span data-type=\"markclass\" class=\"hljs-title\">saveOrUpdateBatch</span><span data-type=\"markclass\" class=\"hljs-params\">(Collection&lt;T&gt; entityList, <span data-type=\"markclass\" class=\"hljs-keyword\">int</span> batchSize)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.ArrayList;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.List;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testSaveOrUpdateBatch</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Employee employee1 = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee1.setId(<span data-type=\"markclass\" class=\"hljs-number\">12L</span>);</code><code data-type=\"codeline\">        employee1.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"yuji@cunyu1943.com\"</span>);</code><code data-type=\"codeline\">        employee1.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"女\"</span>);</code><code data-type=\"codeline\">        employee1.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"虞姬\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Employee employee2 = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee2.setId(<span data-type=\"markclass\" class=\"hljs-number\">13L</span>);</code><code data-type=\"codeline\">        employee2.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"sulie@cunyu1943.com\"</span>);</code><code data-type=\"codeline\">        employee2.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"苏烈\"</span>);</code><code data-type=\"codeline\">        employee2.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"男\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        List&lt;Employee&gt; employeeList = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();</code><code data-type=\"codeline\">        employeeList.add(employee1);</code><code data-type=\"codeline\">        employeeList.add(employee2);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Assert.assertTrue(employeeService.saveOrUpdateBatch(employeeList, <span data-type=\"markclass\" class=\"hljs-number\">2</span>));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"批量修改插入成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 850px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div><div data-codeblock-number=\"29\"></div><div data-codeblock-number=\"30\"></div><div data-codeblock-number=\"31\"></div><div data-codeblock-number=\"32\"></div><div data-codeblock-number=\"33\"></div><div data-codeblock-number=\"34\"></div><div data-codeblock-number=\"35\"></div><div data-codeblock-number=\"36\"></div><div data-codeblock-number=\"37\"></div><div data-codeblock-number=\"38\"></div><div data-codeblock-number=\"39\"></div><div data-codeblock-number=\"40\"></div><div data-codeblock-number=\"41\"></div><div data-codeblock-number=\"42\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/e0/e0ac61cb0a1b7ae3b7a31cf5e59422bd.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">分批次插入数据后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/0e/0e00b46030203af8327cc45680d6213c.png\"> <!----></div></div><h3 data-id=\"heading10\" data-type=\"heading\" top=\"22418\">Remove</h3><ol data-type=\"numberedlist\"><li><p data-number=\"1\" data-type=\"paragraph\"><strong data-type=\"strong\">根据 ID 删除</strong></p></li></ol><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 根据 ID 删除</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">boolean</span> <span data-type=\"markclass\" class=\"hljs-title\">removeById</span><span data-type=\"markclass\" class=\"hljs-params\">(Serializable id)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">删除实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testRemoveById</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Assert.assertTrue(employeeService.removeById(<span data-type=\"markclass\" class=\"hljs-number\">5</span>));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"删除成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 490px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/67/67daeb3014229501de5dfd2153497fb8.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/60/60806d7ff52f8771b49010f0c4944a09.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ol start=\"2\" data-type=\"numberedlist\"><li><p data-number=\"2\" data-type=\"paragraph\"><strong data-type=\"strong\">根据条件删除</strong></p></li></ol><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 根据 columnMap 条件，删除记录</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">boolean</span> <span data-type=\"markclass\" class=\"hljs-title\">removeByMap</span><span data-type=\"markclass\" class=\"hljs-params\">(Map&lt;String, Object&gt; columnMap)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">按条件删除实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.HashMap;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.Map;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testRemoveByMap</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Map&lt;String, Object&gt; map = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();</code><code data-type=\"codeline\">        map.put(<span data-type=\"markclass\" class=\"hljs-string\">\"sex\"</span>, <span data-type=\"markclass\" class=\"hljs-string\">\"女\"</span>);</code><code data-type=\"codeline\">        Assert.assertTrue(employeeService.removeByMap(map));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"删除成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 570px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/75/752a748310165ad0e762332418564398.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">按条件删除后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/65/654a7b32abd4d03028170bdee882c654.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ol start=\"3\" data-type=\"numberedlist\"><li><p data-number=\"3\" data-type=\"paragraph\"><strong data-type=\"strong\">根据 ID 批量删除</strong></p></li></ol><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 删除（根据ID 批量删除）</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">boolean</span> <span data-type=\"markclass\" class=\"hljs-title\">removeByIds</span><span data-type=\"markclass\" class=\"hljs-params\">(Collection&lt;? extends Serializable&gt; idList)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">批量删除实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.ArrayList;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.List;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testRemoveByIds</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        List&lt;Integer&gt; ids = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();</code><code data-type=\"codeline\">        ids.add(<span data-type=\"markclass\" class=\"hljs-number\">1</span>);</code><code data-type=\"codeline\">        ids.add(<span data-type=\"markclass\" class=\"hljs-number\">4</span>);</code><code data-type=\"codeline\">        Assert.assertTrue(employeeService.removeByIds(ids));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"批量删除成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 590px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div><div data-codeblock-number=\"29\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/1a/1ae13fa5c74d6a6c566d982c8a5c819e.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">批量删除后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/6a/6af38243a5e0c7d7e61b854cac44869b.png\"> <!----></div></div><h3 data-id=\"heading11\" data-type=\"heading\" top=\"26004\">Update</h3><ol data-type=\"numberedlist\"><li><p data-number=\"1\" data-type=\"paragraph\"><strong data-type=\"strong\">根据 ID 选择修改</strong></p></li></ol><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 根据 ID 选择修改</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">boolean</span> <span data-type=\"markclass\" class=\"hljs-title\">updateById</span><span data-type=\"markclass\" class=\"hljs-params\">(T entity)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">根据 ID 修改实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testUpdateById</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Employee employee = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee.setId(<span data-type=\"markclass\" class=\"hljs-number\">3L</span>);</code><code data-type=\"codeline\">        employee.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"程咬金\"</span>);</code><code data-type=\"codeline\">        employee.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"男\"</span>);</code><code data-type=\"codeline\">        employee.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"chengyaojin@cunyu1943.com\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Assert.assertTrue(employeeService.updateById(employee));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"更新成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 610px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div><div data-codeblock-number=\"29\"></div><div data-codeblock-number=\"30\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/3d/3d229eb461253b81b9d64f562e837672.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">更新后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/05/0550e8ba2996c1e1a86f5f1fa52db934.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ol start=\"2\" data-type=\"numberedlist\"><li><p data-number=\"2\" data-type=\"paragraph\"><strong data-type=\"strong\">根据 ID 批量更新</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">2.1 <strong data-type=\"strong\">统一更新</strong></p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 根据ID 批量更新</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">boolean</span> <span data-type=\"markclass\" class=\"hljs-title\">updateBatchById</span><span data-type=\"markclass\" class=\"hljs-params\">(Collection&lt;T&gt; entityList)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">批量更新实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.ArrayList;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.List;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testUpdateBatchById</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Employee employee1 = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee1.setId(<span data-type=\"markclass\" class=\"hljs-number\">6L</span>);</code><code data-type=\"codeline\">        employee1.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"妲己\"</span>);</code><code data-type=\"codeline\">        employee1.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"女\"</span>);</code><code data-type=\"codeline\">        employee1.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"daji@cunyu1943.com\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Employee employee2 = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee2.setId(<span data-type=\"markclass\" class=\"hljs-number\">13L</span>);</code><code data-type=\"codeline\">        employee2.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"小乔\"</span>);</code><code data-type=\"codeline\">        employee2.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"女\"</span>);</code><code data-type=\"codeline\">        employee2.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"xiaoqiao@cunyu1943.com\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        List&lt;Employee&gt; employeeList = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();</code><code data-type=\"codeline\">        employeeList.add(employee1);</code><code data-type=\"codeline\">        employeeList.add(employee2);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Assert.assertTrue(employeeService.updateBatchById(employeeList));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"更新成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 850px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div><div data-codeblock-number=\"29\"></div><div data-codeblock-number=\"30\"></div><div data-codeblock-number=\"31\"></div><div data-codeblock-number=\"32\"></div><div data-codeblock-number=\"33\"></div><div data-codeblock-number=\"34\"></div><div data-codeblock-number=\"35\"></div><div data-codeblock-number=\"36\"></div><div data-codeblock-number=\"37\"></div><div data-codeblock-number=\"38\"></div><div data-codeblock-number=\"39\"></div><div data-codeblock-number=\"40\"></div><div data-codeblock-number=\"41\"></div><div data-codeblock-number=\"42\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/66/66602a650ba523cd308072c0f634a515.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">批量更新后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/59/590007fd78eac91d8eab8690f7ff7faa.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">2.2 <strong data-type=\"strong\">分批次更新</strong></p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 根据ID 批量更新</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">boolean</span> <span data-type=\"markclass\" class=\"hljs-title\">updateBatchById</span><span data-type=\"markclass\" class=\"hljs-params\">(Collection&lt;T&gt; entityList, <span data-type=\"markclass\" class=\"hljs-keyword\">int</span> batchSize)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">分批次更新实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.ArrayList;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.List;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testUpdateBatchById</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Employee employee1 = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee1.setId(<span data-type=\"markclass\" class=\"hljs-number\">7L</span>);</code><code data-type=\"codeline\">        employee1.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"武则天\"</span>);</code><code data-type=\"codeline\">        employee1.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"女\"</span>);</code><code data-type=\"codeline\">        employee1.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"wuzetian@cunyu1943.com\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Employee employee2 = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee2.setId(<span data-type=\"markclass\" class=\"hljs-number\">3L</span>);</code><code data-type=\"codeline\">        employee2.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"李元芳\"</span>);</code><code data-type=\"codeline\">        employee2.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"男\"</span>);</code><code data-type=\"codeline\">        employee2.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"liyuanfang@cunyu1943.com\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        List&lt;Employee&gt; employeeList = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();</code><code data-type=\"codeline\">        employeeList.add(employee1);</code><code data-type=\"codeline\">        employeeList.add(employee2);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Assert.assertTrue(employeeService.updateBatchById(employeeList, <span data-type=\"markclass\" class=\"hljs-number\">2</span>));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"更新成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 850px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div><div data-codeblock-number=\"29\"></div><div data-codeblock-number=\"30\"></div><div data-codeblock-number=\"31\"></div><div data-codeblock-number=\"32\"></div><div data-codeblock-number=\"33\"></div><div data-codeblock-number=\"34\"></div><div data-codeblock-number=\"35\"></div><div data-codeblock-number=\"36\"></div><div data-codeblock-number=\"37\"></div><div data-codeblock-number=\"38\"></div><div data-codeblock-number=\"39\"></div><div data-codeblock-number=\"40\"></div><div data-codeblock-number=\"41\"></div><div data-codeblock-number=\"42\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/a3/a37f93d308cf1a07fc54ee91345473d1.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">分批次更新后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/06/06940331a44696f8b79e67e176df68ed.png\"> <!----></div></div><h3 data-id=\"heading12\" data-type=\"heading\" top=\"30370\">Get</h3><ol data-type=\"numberedlist\"><li><p data-number=\"1\" data-type=\"paragraph\"><strong data-type=\"strong\">根据 ID 查询</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">将所要查询记录的 <code data-type=\"codeinline\">id</code> 作为参数，然后将查询到的实体返回。</p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 根据 ID 查询</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\">T <span data-type=\"markclass\" class=\"hljs-title\">getById</span><span data-type=\"markclass\" class=\"hljs-params\">(Serializable id)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">查询实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testGetById</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Employee employee = employeeService.getById(<span data-type=\"markclass\" class=\"hljs-number\">9</span>);</code><code data-type=\"codeline\">        System.out.println(employee);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 470px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/3e/3ecb295eca2657f6d92ce6fd98ead3e9.png\"> <!----></div></div><h3 data-id=\"heading13\" data-type=\"heading\" top=\"31485\">List</h3><ol data-type=\"numberedlist\"><li><p data-number=\"1\" data-type=\"paragraph\"><strong data-type=\"strong\">查询所有</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">查询所有记录，然后返回到一个集合中。</p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 查询所有</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\">List&lt;T&gt; <span data-type=\"markclass\" class=\"hljs-title\">list</span><span data-type=\"markclass\" class=\"hljs-params\">()</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">查询实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.ArrayList;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.List;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testList</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        List&lt;Employee&gt; employeeLists = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();</code><code data-type=\"codeline\">        employeeLists = employeeService.list();</code><code data-type=\"codeline\">        Assert.assertEquals(<span data-type=\"markclass\" class=\"hljs-number\">6</span>, employeeLists.size());</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"查询成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 570px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/9a/9a0dbd93fdcf661647d24633c5e8e21d.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ol start=\"2\" data-type=\"numberedlist\"><li><p data-number=\"2\" data-type=\"paragraph\"><strong data-type=\"strong\">根据 ID 批量查询</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">讲所要查询的记录 <code data-type=\"codeinline\">id</code> 传入集合，然后座位方法参数，最后返回查询到的结果到一个集合中。</p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 查询（根据ID 批量查询）</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\">Collection&lt;T&gt; <span data-type=\"markclass\" class=\"hljs-title\">listByIds</span><span data-type=\"markclass\" class=\"hljs-params\">(Collection&lt;? extends Serializable&gt; idList)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">批量查询实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.ArrayList;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.List;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testListByIds</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        List&lt;Long&gt; ids = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        ids.add(<span data-type=\"markclass\" class=\"hljs-number\">6L</span>);</code><code data-type=\"codeline\">        ids.add(<span data-type=\"markclass\" class=\"hljs-number\">7L</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Assert.assertEquals(<span data-type=\"markclass\" class=\"hljs-number\">2</span>, employeeService.listByIds(ids).size());</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"查询成功\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 650px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div><div data-codeblock-number=\"29\"></div><div data-codeblock-number=\"30\"></div><div data-codeblock-number=\"31\"></div><div data-codeblock-number=\"32\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/8b/8b46db40fff84d2333bc5f45e5bd4741.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ol start=\"3\" data-type=\"numberedlist\"><li><p data-number=\"3\" data-type=\"paragraph\"><strong data-type=\"strong\">根据条件查询</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">条件传入 <code data-type=\"codeinline\">Map</code> 集合，<code data-type=\"codeinline\">key</code> 对应字段，<code data-type=\"codeinline\">value</code> 对应值，然后返回集合。</p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 查询（根据 columnMap 条件）</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\">Collection&lt;T&gt; <span data-type=\"markclass\" class=\"hljs-title\">listByMap</span><span data-type=\"markclass\" class=\"hljs-params\">(Map&lt;String, Object&gt; columnMap)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">根据条件查询实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.HashMap;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.Map;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testListByMap</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Map&lt;String, Object&gt; map = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        map.put(<span data-type=\"markclass\" class=\"hljs-string\">\"sex\"</span>, <span data-type=\"markclass\" class=\"hljs-string\">\"女\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Assert.assertEquals(<span data-type=\"markclass\" class=\"hljs-number\">3</span>, employeeService.listByMap(map).size());</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"查询成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 590px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div><div data-codeblock-number=\"29\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/5b/5bf6e1298a1474e8143811ff39e0828a.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ol start=\"4\" data-type=\"numberedlist\"><li><p data-number=\"4\" data-type=\"paragraph\"><strong data-type=\"strong\">查询所有列表</strong></p></li></ol><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 查询所有列表</span></code><code data-type=\"codeline\">List&lt;Map&lt;String, Object&gt;&gt; listMaps();</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">查询实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testListMaps</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Assert.assertEquals(<span data-type=\"markclass\" class=\"hljs-number\">6</span>, employeeService.listMaps());</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"查询成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 490px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/41/417353b4a91b94b1169c7ffccd0c9623.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ol start=\"5\" data-type=\"numberedlist\"><li><p data-number=\"5\" data-type=\"paragraph\"><strong data-type=\"strong\">查询所有记录</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">用于查询所有数据记录，并将其返回到一个集合中。</p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 查询全部记录</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\">List&lt;Object&gt; <span data-type=\"markclass\" class=\"hljs-title\">listObjs</span><span data-type=\"markclass\" class=\"hljs-params\">()</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">查询实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testListObjs</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Assert.assertEquals(<span data-type=\"markclass\" class=\"hljs-number\">6</span>, employeeService.listObjs().size());</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"查询成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 490px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/17/174ef2de639d1349e8cb04da376ca069.png\"> <!----></div></div><h3 data-id=\"heading14\" data-type=\"heading\" top=\"37274\">Count</h3><ol data-type=\"numberedlist\"><li><p data-number=\"1\" data-type=\"paragraph\"><strong data-type=\"strong\">查询记录总数</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">用于统计数据控中的记录总条数，方法返回记录条数。</p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 查询总记录数</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">int</span> <span data-type=\"markclass\" class=\"hljs-title\">count</span><span data-type=\"markclass\" class=\"hljs-params\">()</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">查询记录总数实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testCount</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Assert.assertEquals(<span data-type=\"markclass\" class=\"hljs-number\">6</span>, employeeService.count());</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"查询成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 490px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"https://static001.geekbang.org/infoq/0e/0e3ecfba3f1114aad3907b4578fbaede.png\"> <!----></div></div><h2 data-id=\"heading15\" data-type=\"heading\" top=\"38407\">总结</h2><p data-type=\"paragraph\">好了，以上就是关于 Mybatis-Plus 的日志配置以及如何进行 CRUD 的相关内容了，这里 CRUD 主要又分为 Mapper 层和 Service 层，我们可以根据自己的需要进行选择。当然，在我们日常使用中，常常都是两个接口一起使用，关于更多 MP 的使用技巧，我们下期文章再见！</p></div>', '<div contenteditable=\"false\" class=\"ProseMirror\"><h2 data-id=\"heading0\" data-type=\"heading\" top=\"268\">前言</h2><p data-type=\"paragraph\">上一篇文章中我们讲了 Mybatis-Plus 的定义以及相关特点，并从零开始编写了一个 SpringBoot + Mybatis-Plus 的实例。今天我们就来看看，如何利用 MP 来实现对数据库的增删改查。</p><h2 data-id=\"heading1\" data-type=\"heading\" top=\"402\">日志配置</h2><p data-type=\"paragraph\">使用 MP 时，默认是不打印任何 SQL 语句的。而为了方便日常开发工作的调试，我们需要联合控制台和各种数据可视化工具进行语句的拼接检查，因此我们利用 MP 自带的日志功能，在控制台输出我们的 SQL 语句，从而方便我们调试。</p><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">在配置文件 <code data-type=\"codeinline\">application.yml</code> （IDEA 默认生成的配置文件为 <code data-type=\"codeinline\">application.properties</code>）中，加入一下配置，这样 MP 就会在控制台中打印完整带参数的 SQL 语句，方便我们查看。</p><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"cpp\"><code data-type=\"codeline\">mybatis-plus:</code><code data-type=\"codeline\">  configuration:</code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-built_in\">log</span>-impl: org.apache.ibatis.logging.<span data-type=\"markclass\" class=\"hljs-built_in\">stdout</span>.StdOutImpl</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 90px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div></div></div></div><h2 data-id=\"heading2\" data-type=\"heading\" top=\"840\">Mapper CRUD 使用方法</h2><p data-type=\"paragraph\">首先我们来看 <code data-type=\"codeinline\">Mapper</code> 层 CRUD 涉及的一些方法，<code data-type=\"codeinline\">Mapper</code> 层主要继承自 <code data-type=\"codeinline\">BaseMapper</code> 接口，里边实现了各种用于操作数据库的增删改查的方法，以下我们就来看看日常我们常用的一些方法。</p><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee.mapper;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">/**</span></code><code data-type=\"codeline\"> * Created with IntelliJ IDEA.</code><code data-type=\"codeline\"> *</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@author</span> : cunyu</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@version</span> : 1.0</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@project</span> : Employee</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@package</span> : com.cunyu.employee.mapper</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@className</span> : EmployeeMapper</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@createTime</span> : 2021/8/7 17:45</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@description</span> : 员工 Mapper 类</code><code data-type=\"codeline\"> */</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">public</span> <span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">interface</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeMapper</span> <span data-type=\"markclass\" class=\"hljs-keyword\">extends</span> <span data-type=\"markclass\" class=\"hljs-title\">BaseMapper</span>&lt;<span data-type=\"markclass\" class=\"hljs-title\">Employee</span>&gt; </span>{</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 390px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div></div></div></div><h3 data-id=\"heading3\" data-type=\"heading\" top=\"1458\">insert 操作</h3><p data-type=\"paragraph\">首先是插入数据，<code data-type=\"codeinline\">insert</code> 方法中，传入我们所要插入数据库的实体对象作为参数即可。</p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">/**</span></code><code data-type=\"codeline\">     * 插入一条记录</code><code data-type=\"codeline\">     *</code><code data-type=\"codeline\">     * <span data-type=\"markclass\" class=\"hljs-doctag\">@param</span> entity 实体对象</code><code data-type=\"codeline\">     */</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">int</span> <span data-type=\"markclass\" class=\"hljs-title\">insert</span><span data-type=\"markclass\" class=\"hljs-params\">(T entity)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 150px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">插入实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">contextLoads</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeMapper employeeMapper;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testInsert</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Employee employee = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee.setId(<span data-type=\"markclass\" class=\"hljs-number\">4L</span>);</code><code data-type=\"codeline\">        employee.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"赵六\"</span>);</code><code data-type=\"codeline\">        employee.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"男\"</span>);</code><code data-type=\"codeline\">        employee.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"zhaoliu@cunyu1943.com\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Assert.assertEquals(<span data-type=\"markclass\" class=\"hljs-number\">1</span>, employeeMapper.insert(employee));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"插入成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 690px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div><div data-codeblock-number=\"29\"></div><div data-codeblock-number=\"30\"></div><div data-codeblock-number=\"31\"></div><div data-codeblock-number=\"32\"></div><div data-codeblock-number=\"33\"></div><div data-codeblock-number=\"34\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-u2vhptns.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">数据插入后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-55u4ivra.png\"> <!----></div></div><h3 data-id=\"heading4\" data-type=\"heading\" top=\"2922\">select 操作</h3><p data-type=\"paragraph\">相比于插入数据操作，查询数据的方法就要更多，而且还能实现批量查询和条件查询。</p><p data-type=\"paragraph\"><br></p><ol data-type=\"numberedlist\"><li><p data-number=\"1\" data-type=\"paragraph\"><strong data-type=\"strong\">根据主键查询</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">将所要查询数据的主键作为参数传入我们的 <code data-type=\"codeinline\">selectById</code> 方法中，即可实现。</p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">/**</span></code><code data-type=\"codeline\">     * 根据 ID 查询</code><code data-type=\"codeline\">     *</code><code data-type=\"codeline\">     * <span data-type=\"markclass\" class=\"hljs-doctag\">@param</span> id 主键ID</code><code data-type=\"codeline\">     */</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\">T <span data-type=\"markclass\" class=\"hljs-title\">selectById</span><span data-type=\"markclass\" class=\"hljs-params\">(Serializable id)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 150px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">查询实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">contextLoads</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeMapper employeeMapper;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testSelectById</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Employee employee = employeeMapper.selectById(<span data-type=\"markclass\" class=\"hljs-number\">3</span>);</code><code data-type=\"codeline\">        System.out.println(employee);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 550px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-lz6fyld6.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ol start=\"2\" data-type=\"numberedlist\"><li><p data-number=\"2\" data-type=\"paragraph\"><strong data-type=\"strong\">根据主键批量查询</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">上一个方法每次只能查询一条记录，如果我们想要查询多条数据记录，那么就可以将要查询数据的主键列表传入 <code data-type=\"codeinline\">selectBatchIds</code> 方法即可。</p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">/**</span></code><code data-type=\"codeline\">     * 查询（根据ID 批量查询）</code><code data-type=\"codeline\">     *</code><code data-type=\"codeline\">     * <span data-type=\"markclass\" class=\"hljs-doctag\">@param</span> idList 主键ID列表(不能为 null 以及 empty)</code><code data-type=\"codeline\">     */</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\">List&lt;T&gt; <span data-type=\"markclass\" class=\"hljs-title\">selectBatchIds</span><span data-type=\"markclass\" class=\"hljs-params\">(<span data-type=\"markclass\" class=\"hljs-meta\">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 150px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">批量查询实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">contextLoads</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeMapper employeeMapper;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testSelectBatchIds</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        List&lt;Integer&gt; ids = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();</code><code data-type=\"codeline\">        ids.add(<span data-type=\"markclass\" class=\"hljs-number\">1</span>);</code><code data-type=\"codeline\">        ids.add(<span data-type=\"markclass\" class=\"hljs-number\">4</span>);</code><code data-type=\"codeline\">        List&lt;Employee&gt; employeeList = employeeMapper.selectBatchIds(ids);</code><code data-type=\"codeline\">        System.out.println(employeeList);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 610px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div><div data-codeblock-number=\"29\"></div><div data-codeblock-number=\"30\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-f6s7gfnx.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ol start=\"3\" data-type=\"numberedlist\"><li><p data-number=\"3\" data-type=\"paragraph\"><strong data-type=\"strong\">根据多条件查询</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">除开支持主键查询外，MP 还支持条件查询，只要将我们的条件传入 <code data-type=\"codeinline\">Map</code>  列表中，然后将其作为 <code data-type=\"codeinline\">selectByMap</code> 方法的参数即可，其中传入 <code data-type=\"codeinline\">Map</code> 的 <code data-type=\"codeinline\">key</code> 对应我们数据库中的字段，而 <code data-type=\"codeinline\">value</code> 则对应字段的值。</p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">/**</span></code><code data-type=\"codeline\">     * 查询（根据 columnMap 条件）</code><code data-type=\"codeline\">     *</code><code data-type=\"codeline\">     * <span data-type=\"markclass\" class=\"hljs-doctag\">@param</span> columnMap 表字段 map 对象</code><code data-type=\"codeline\">     */</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\">List&lt;T&gt; <span data-type=\"markclass\" class=\"hljs-title\">selectByMap</span><span data-type=\"markclass\" class=\"hljs-params\">(<span data-type=\"markclass\" class=\"hljs-meta\">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 150px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">条件查询实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">contextLoads</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeMapper employeeMapper;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testSelectByMap</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Map&lt;String, Object&gt; map = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();</code><code data-type=\"codeline\">        map.put(<span data-type=\"markclass\" class=\"hljs-string\">\"sex\"</span>, <span data-type=\"markclass\" class=\"hljs-string\">\"男\"</span>);</code><code data-type=\"codeline\">        map.put(<span data-type=\"markclass\" class=\"hljs-string\">\"name\"</span>, <span data-type=\"markclass\" class=\"hljs-string\">\"张三\"</span>);</code><code data-type=\"codeline\">        System.out.println(employeeMapper.selectByMap(map));</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 590px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div><div data-codeblock-number=\"29\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-bpb4eq0d.png\"> <!----></div></div><h3 data-id=\"heading5\" data-type=\"heading\" top=\"6891\">update 操作</h3><p data-type=\"paragraph\">更新操作，主要是根据我们数据库的主键进行查询，将对应主键的实体对象传入 <code data-type=\"codeinline\">updateById</code> 方法即可。</p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">/**</span></code><code data-type=\"codeline\">     * 根据 ID 修改</code><code data-type=\"codeline\">     *</code><code data-type=\"codeline\">     * <span data-type=\"markclass\" class=\"hljs-doctag\">@param</span> entity 实体对象</code><code data-type=\"codeline\">     */</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">int</span> <span data-type=\"markclass\" class=\"hljs-title\">updateById</span><span data-type=\"markclass\" class=\"hljs-params\">(<span data-type=\"markclass\" class=\"hljs-meta\">@Param(Constants.ENTITY)</span> T entity)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 150px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">更新实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeMapper employeeMapper;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testUpdate</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Employee employee = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        employee.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"zhao6@cunyu1943.com\"</span>);</code><code data-type=\"codeline\">        employee.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"赵 6\"</span>);</code><code data-type=\"codeline\">        employee.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"女\"</span>);</code><code data-type=\"codeline\">        employee.setId(<span data-type=\"markclass\" class=\"hljs-number\">4L</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Assert.assertEquals(<span data-type=\"markclass\" class=\"hljs-number\">1</span>, employeeMapper.updateById(employee));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"更新成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 610px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div><div data-codeblock-number=\"29\"></div><div data-codeblock-number=\"30\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-btucxc3h.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">数据更新后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-vltxpsc2.png\"> <!----></div></div><h3 data-id=\"heading6\" data-type=\"heading\" top=\"8275\">delete 操作</h3><p data-type=\"paragraph\">删除操作，既可以根据主键删除一条记录，也能根据主键列表实现批量删除，还能根据条件来进行删除。</p><p data-type=\"paragraph\"><br></p><ol data-type=\"numberedlist\"><li><p data-number=\"1\" data-type=\"paragraph\"><strong data-type=\"strong\">根据主键删除一条数据</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">将所要删除记录的主键作为参数传入 <code data-type=\"codeinline\">deleteById</code> 方法即可。</p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">/**</span></code><code data-type=\"codeline\">     * 根据 ID 删除</code><code data-type=\"codeline\">     *</code><code data-type=\"codeline\">     * <span data-type=\"markclass\" class=\"hljs-doctag\">@param</span> id 主键ID</code><code data-type=\"codeline\">     */</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">int</span> <span data-type=\"markclass\" class=\"hljs-title\">deleteById</span><span data-type=\"markclass\" class=\"hljs-params\">(Serializable id)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 150px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">删除实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeMapper employeeMapper;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testDeleteById</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Assert.assertEquals(<span data-type=\"markclass\" class=\"hljs-number\">1</span>, employeeMapper.deleteById(<span data-type=\"markclass\" class=\"hljs-number\">2L</span>));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"删除成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 450px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-c6oas5w7.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">删除数据后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-th3lsner.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ol start=\"2\" data-type=\"numberedlist\"><li><p data-number=\"2\" data-type=\"paragraph\"><strong data-type=\"strong\">根据条件删除</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">根据条件删除同样是讲条件传入 <code data-type=\"codeinline\">Map</code> 中，然后将 <code data-type=\"codeinline\">Map</code> 作为参数传入 <code data-type=\"codeinline\">deleteByMap</code> 方法，其中 <code data-type=\"codeinline\">key</code> 对应数据库中的字段，<code data-type=\"codeinline\">value</code> 对应字段的值。</p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">/**</span></code><code data-type=\"codeline\">     * 根据 columnMap 条件，删除记录</code><code data-type=\"codeline\">     *</code><code data-type=\"codeline\">     * <span data-type=\"markclass\" class=\"hljs-doctag\">@param</span> columnMap 表字段 map 对象</code><code data-type=\"codeline\">     */</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">int</span> <span data-type=\"markclass\" class=\"hljs-title\">deleteByMap</span><span data-type=\"markclass\" class=\"hljs-params\">(<span data-type=\"markclass\" class=\"hljs-meta\">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 150px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">删除实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeMapper employeeMapper;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testDeleteByMap</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Map&lt;String, Object&gt; map = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();</code><code data-type=\"codeline\">        map.put(<span data-type=\"markclass\" class=\"hljs-string\">\"name\"</span>, <span data-type=\"markclass\" class=\"hljs-string\">\"赵 6\"</span>);</code><code data-type=\"codeline\">        Assert.assertEquals(<span data-type=\"markclass\" class=\"hljs-number\">1</span>, employeeMapper.deleteByMap(map));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"删除成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 490px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-1fkoqk3o.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">删除数据后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-mkl6wrpd.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ol start=\"3\" data-type=\"numberedlist\"><li><p data-number=\"3\" data-type=\"paragraph\"><strong data-type=\"strong\">根据主键批量删除</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">将要删除记录的主键传入集合中，然后将集合作为 <code data-type=\"codeinline\">deleteBatchIds</code> 方法的参数即可。</p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">/**</span></code><code data-type=\"codeline\">     * 删除（根据ID 批量删除）</code><code data-type=\"codeline\">     *</code><code data-type=\"codeline\">     * <span data-type=\"markclass\" class=\"hljs-doctag\">@param</span> idList 主键ID列表(不能为 null 以及 empty)</code><code data-type=\"codeline\">     */</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">int</span> <span data-type=\"markclass\" class=\"hljs-title\">deleteBatchIds</span><span data-type=\"markclass\" class=\"hljs-params\">(<span data-type=\"markclass\" class=\"hljs-meta\">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 150px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">批量删除实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeMapper employeeMapper;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testDeleteBatchIds</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        List&lt;Integer&gt; ids = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();</code><code data-type=\"codeline\">        ids.add(<span data-type=\"markclass\" class=\"hljs-number\">1</span>);</code><code data-type=\"codeline\">        ids.add(<span data-type=\"markclass\" class=\"hljs-number\">3</span>);</code><code data-type=\"codeline\">        Assert.assertEquals(<span data-type=\"markclass\" class=\"hljs-number\">2</span>, employeeMapper.deleteBatchIds(ids));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"删除成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 510px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-mix7men2.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">删除数据后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-rgvgz25b.png\"> <!----></div></div><h2 data-id=\"heading7\" data-type=\"heading\" top=\"12239\">Service CRUD 接口</h2><p data-type=\"paragraph\"><code data-type=\"codeinline\">Service</code> 层继承自 <code data-type=\"codeinline\">IService</code> 接口，其中的方法和 <code data-type=\"codeinline\">Mapper</code> 层中所提供的方法功能是一致的，除了方法名有所不同外，其他基本类似，但 <code data-type=\"codeinline\">Service</code> 层中提供了更为丰富的方法，两者的继承结构如下图所示。</p><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">&lt;img src=\"<a href=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/12764416856e4a9194c4b7046683ecd4~tplv-k3u1fbpfcp-zoom-1.image\" title=\"\" data-type=\"link\">https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/12764416856e4a9194c4b7046683ecd4~tplv-k3u1fbpfcp-zoom-1.image</a>\" style=\"zoom:150%;\" /&gt;</p><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee.service;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.extension.service.IService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">/**</span></code><code data-type=\"codeline\"> * Created with IntelliJ IDEA.</code><code data-type=\"codeline\"> *</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@author</span> : cunyu</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@version</span> : 1.0</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@project</span> : Employee</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@package</span> : com.cunyu.employee.service</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@className</span> : EmployeeService</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@createTime</span> : 2021/8/8 7:52</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@description</span> : 员工服务接口</code><code data-type=\"codeline\"> */</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@Service</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">public</span> <span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">interface</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeService</span> <span data-type=\"markclass\" class=\"hljs-keyword\">extends</span> <span data-type=\"markclass\" class=\"hljs-title\">IService</span>&lt;<span data-type=\"markclass\" class=\"hljs-title\">Employee</span>&gt; </span>{</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 410px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div></div></div></div><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee.service.Impl;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">/**</span></code><code data-type=\"codeline\"> * Created with IntelliJ IDEA.</code><code data-type=\"codeline\"> *</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@author</span> : cunyu</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@version</span> : 1.0</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@project</span> : Employee</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@package</span> : com.cunyu.employee.service.Impl</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@className</span> : EmployeeServiceImpl</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@createTime</span> : 2021/8/8 7:53</code><code data-type=\"codeline\"> * <span data-type=\"markclass\" class=\"hljs-doctag\">@description</span> : 员工服务类实现</code><code data-type=\"codeline\"> */</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@Service</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">public</span> <span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeServiceImpl</span> <span data-type=\"markclass\" class=\"hljs-keyword\">extends</span> <span data-type=\"markclass\" class=\"hljs-title\">ServiceImpl</span>&lt;<span data-type=\"markclass\" class=\"hljs-title\">EmployeeMapper</span>, <span data-type=\"markclass\" class=\"hljs-title\">Employee</span>&gt; <span data-type=\"markclass\" class=\"hljs-keyword\">implements</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeService</span> </span>{</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 470px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 710px; display: block; transform: translate3d(0px, 0px, 0px);\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div></div></div></div><h3 data-id=\"heading8\" data-type=\"heading\" top=\"13532\">Save</h3><ol data-type=\"numberedlist\"><li><p data-number=\"1\" data-type=\"paragraph\"><strong data-type=\"strong\">插入一条记录</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">功能同 <code data-type=\"codeinline\">Mapper</code> 层中的 <code data-type=\"codeinline\">insert</code> 方法，只不过方法名不同。</p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 插入一条记录（选择字段，策略插入）</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">boolean</span> <span data-type=\"markclass\" class=\"hljs-title\">save</span><span data-type=\"markclass\" class=\"hljs-params\">(T entity)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">插入实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testSave</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Employee employee = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee.setId(<span data-type=\"markclass\" class=\"hljs-number\">5L</span>);</code><code data-type=\"codeline\">        employee.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"周七\"</span>);</code><code data-type=\"codeline\">        employee.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"zhouqi@cunyu1943.com\"</span>);</code><code data-type=\"codeline\">        employee.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"女\"</span>);</code><code data-type=\"codeline\">        Assert.assertTrue(employeeService.save(employee));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"插入成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 570px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-6csytrzu.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">插入数据后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-1l9hroql.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ol start=\"2\" data-type=\"numberedlist\"><li><p data-number=\"2\" data-type=\"paragraph\"><strong data-type=\"strong\">批量插入</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">这里就和 <code data-type=\"codeinline\">Mapper</code> 层中所有区别，<code data-type=\"codeinline\">Mapper</code> 层中只支持单次插入，而 <code data-type=\"codeinline\">Service</code> 层中支持批量插入，而传入的参数就是我们所要传入实体的集合，而且还可以分批次插入和统一插入。</p><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">2.1 <strong data-type=\"strong\">统一插入</strong></p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 插入（批量）</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">boolean</span> <span data-type=\"markclass\" class=\"hljs-title\">saveBatch</span><span data-type=\"markclass\" class=\"hljs-params\">(Collection&lt;T&gt; entityList)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">插入实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.ArrayList;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.List;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testSaveBatch</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Employee employee1 = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee1.setId(<span data-type=\"markclass\" class=\"hljs-number\">6L</span>);</code><code data-type=\"codeline\">        employee1.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"zhangliang@cunyu1943.com\"</span>);</code><code data-type=\"codeline\">        employee1.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"男\"</span>);</code><code data-type=\"codeline\">        employee1.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"张良\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Employee employee2 = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee2.setId(<span data-type=\"markclass\" class=\"hljs-number\">7L</span>);</code><code data-type=\"codeline\">        employee2.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"zhouyu@cunyu1943.com\"</span>);</code><code data-type=\"codeline\">        employee2.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"周瑜\"</span>);</code><code data-type=\"codeline\">        employee2.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"男\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        List&lt;Employee&gt; employeeList = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();</code><code data-type=\"codeline\">        employeeList.add(employee1);</code><code data-type=\"codeline\">        employeeList.add(employee2);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Assert.assertTrue(employeeService.saveBatch(employeeList));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"批量插入成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 850px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div><div data-codeblock-number=\"29\"></div><div data-codeblock-number=\"30\"></div><div data-codeblock-number=\"31\"></div><div data-codeblock-number=\"32\"></div><div data-codeblock-number=\"33\"></div><div data-codeblock-number=\"34\"></div><div data-codeblock-number=\"35\"></div><div data-codeblock-number=\"36\"></div><div data-codeblock-number=\"37\"></div><div data-codeblock-number=\"38\"></div><div data-codeblock-number=\"39\"></div><div data-codeblock-number=\"40\"></div><div data-codeblock-number=\"41\"></div><div data-codeblock-number=\"42\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-v5enzage.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">统一插入后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-zutwqvdh.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">2.2 <strong data-type=\"strong\">分批次插入</strong></p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 插入（批量）</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">boolean</span> <span data-type=\"markclass\" class=\"hljs-title\">saveBatch</span><span data-type=\"markclass\" class=\"hljs-params\">(Collection&lt;T&gt; entityList, <span data-type=\"markclass\" class=\"hljs-keyword\">int</span> batchSize)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">分批次插入实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.ArrayList;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.List;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testSaveBatch</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Employee employee1 = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee1.setId(<span data-type=\"markclass\" class=\"hljs-number\">8L</span>);</code><code data-type=\"codeline\">        employee1.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"jialuo@cunyu1943.com\"</span>);</code><code data-type=\"codeline\">        employee1.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"女\"</span>);</code><code data-type=\"codeline\">        employee1.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"迦罗\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Employee employee2 = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee2.setId(<span data-type=\"markclass\" class=\"hljs-number\">9L</span>);</code><code data-type=\"codeline\">        employee2.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"zhugeliang@cunyu1943.com\"</span>);</code><code data-type=\"codeline\">        employee2.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"诸葛亮\"</span>);</code><code data-type=\"codeline\">        employee2.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"男\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        List&lt;Employee&gt; employeeList = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();</code><code data-type=\"codeline\">        employeeList.add(employee1);</code><code data-type=\"codeline\">        employeeList.add(employee2);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Assert.assertTrue(employeeService.saveBatch(employeeList,<span data-type=\"markclass\" class=\"hljs-number\">2</span>));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"批量插入成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 850px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div><div data-codeblock-number=\"29\"></div><div data-codeblock-number=\"30\"></div><div data-codeblock-number=\"31\"></div><div data-codeblock-number=\"32\"></div><div data-codeblock-number=\"33\"></div><div data-codeblock-number=\"34\"></div><div data-codeblock-number=\"35\"></div><div data-codeblock-number=\"36\"></div><div data-codeblock-number=\"37\"></div><div data-codeblock-number=\"38\"></div><div data-codeblock-number=\"39\"></div><div data-codeblock-number=\"40\"></div><div data-codeblock-number=\"41\"></div><div data-codeblock-number=\"42\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-af4t701p.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">分批次插入后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-fm6qrizq.png\"> <!----></div></div><h3 data-id=\"heading9\" data-type=\"heading\" top=\"18012\">SaveOrUpdate</h3><ol data-type=\"numberedlist\"><li><p data-number=\"1\" data-type=\"paragraph\"><strong data-type=\"strong\">单条修改插入</strong></p></li></ol><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// TableId 注解存在更新记录，否插入一条记录</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">boolean</span> <span data-type=\"markclass\" class=\"hljs-title\">saveOrUpdate</span><span data-type=\"markclass\" class=\"hljs-params\">(T entity)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">单条修改插入实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.ArrayList;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.List;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testSaveOrUpdate</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Employee employee = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee.setId(<span data-type=\"markclass\" class=\"hljs-number\">5L</span>);</code><code data-type=\"codeline\">        employee.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"周武\"</span>);</code><code data-type=\"codeline\">        employee.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"zhouwu@cunyu1943.com\"</span>);</code><code data-type=\"codeline\">        employee.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"男\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Assert.assertTrue(employeeService.saveOrUpdate(employee));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"更新成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 650px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div><div data-codeblock-number=\"29\"></div><div data-codeblock-number=\"30\"></div><div data-codeblock-number=\"31\"></div><div data-codeblock-number=\"32\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-r9oplt82.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">修改插入后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-nkh93df5.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ol start=\"2\" data-type=\"numberedlist\"><li><p data-number=\"2\" data-type=\"paragraph\"><strong data-type=\"strong\">批量修改插入</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">2.1 <strong data-type=\"strong\">统一插入</strong></p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 批量修改插入</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">boolean</span> <span data-type=\"markclass\" class=\"hljs-title\">saveOrUpdateBatch</span><span data-type=\"markclass\" class=\"hljs-params\">(Collection&lt;T&gt; entityList)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">统一插入实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.ArrayList;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.List;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testSaveOrUpdateBatch</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Employee employee1 = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee1.setId(<span data-type=\"markclass\" class=\"hljs-number\">10L</span>);</code><code data-type=\"codeline\">        employee1.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"zhongwuyan@cunyu1943.com\"</span>);</code><code data-type=\"codeline\">        employee1.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"女\"</span>);</code><code data-type=\"codeline\">        employee1.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"钟无艳\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Employee employee2 = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee2.setId(<span data-type=\"markclass\" class=\"hljs-number\">11L</span>);</code><code data-type=\"codeline\">        employee2.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"direnjie@cunyu1943.com\"</span>);</code><code data-type=\"codeline\">        employee2.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"狄仁杰\"</span>);</code><code data-type=\"codeline\">        employee2.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"男\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        List&lt;Employee&gt; employeeList = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();</code><code data-type=\"codeline\">        employeeList.add(employee1);</code><code data-type=\"codeline\">        employeeList.add(employee2);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Assert.assertTrue(employeeService.saveOrUpdateBatch(employeeList));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"批量修改插入成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 850px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div><div data-codeblock-number=\"29\"></div><div data-codeblock-number=\"30\"></div><div data-codeblock-number=\"31\"></div><div data-codeblock-number=\"32\"></div><div data-codeblock-number=\"33\"></div><div data-codeblock-number=\"34\"></div><div data-codeblock-number=\"35\"></div><div data-codeblock-number=\"36\"></div><div data-codeblock-number=\"37\"></div><div data-codeblock-number=\"38\"></div><div data-codeblock-number=\"39\"></div><div data-codeblock-number=\"40\"></div><div data-codeblock-number=\"41\"></div><div data-codeblock-number=\"42\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-iu8t6ru6.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">统一插入数据后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-qfz72hy0.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">2.2 <strong data-type=\"strong\">分批次插入</strong></p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 批量修改插入</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">boolean</span> <span data-type=\"markclass\" class=\"hljs-title\">saveOrUpdateBatch</span><span data-type=\"markclass\" class=\"hljs-params\">(Collection&lt;T&gt; entityList, <span data-type=\"markclass\" class=\"hljs-keyword\">int</span> batchSize)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.ArrayList;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.List;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testSaveOrUpdateBatch</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Employee employee1 = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee1.setId(<span data-type=\"markclass\" class=\"hljs-number\">12L</span>);</code><code data-type=\"codeline\">        employee1.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"yuji@cunyu1943.com\"</span>);</code><code data-type=\"codeline\">        employee1.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"女\"</span>);</code><code data-type=\"codeline\">        employee1.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"虞姬\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Employee employee2 = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee2.setId(<span data-type=\"markclass\" class=\"hljs-number\">13L</span>);</code><code data-type=\"codeline\">        employee2.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"sulie@cunyu1943.com\"</span>);</code><code data-type=\"codeline\">        employee2.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"苏烈\"</span>);</code><code data-type=\"codeline\">        employee2.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"男\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        List&lt;Employee&gt; employeeList = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();</code><code data-type=\"codeline\">        employeeList.add(employee1);</code><code data-type=\"codeline\">        employeeList.add(employee2);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Assert.assertTrue(employeeService.saveOrUpdateBatch(employeeList, <span data-type=\"markclass\" class=\"hljs-number\">2</span>));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"批量修改插入成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 850px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div><div data-codeblock-number=\"29\"></div><div data-codeblock-number=\"30\"></div><div data-codeblock-number=\"31\"></div><div data-codeblock-number=\"32\"></div><div data-codeblock-number=\"33\"></div><div data-codeblock-number=\"34\"></div><div data-codeblock-number=\"35\"></div><div data-codeblock-number=\"36\"></div><div data-codeblock-number=\"37\"></div><div data-codeblock-number=\"38\"></div><div data-codeblock-number=\"39\"></div><div data-codeblock-number=\"40\"></div><div data-codeblock-number=\"41\"></div><div data-codeblock-number=\"42\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-kufy1fmp.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">分批次插入数据后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-vun1uhge.png\"> <!----></div></div><h3 data-id=\"heading10\" data-type=\"heading\" top=\"22418\">Remove</h3><ol data-type=\"numberedlist\"><li><p data-number=\"1\" data-type=\"paragraph\"><strong data-type=\"strong\">根据 ID 删除</strong></p></li></ol><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 根据 ID 删除</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">boolean</span> <span data-type=\"markclass\" class=\"hljs-title\">removeById</span><span data-type=\"markclass\" class=\"hljs-params\">(Serializable id)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">删除实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testRemoveById</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Assert.assertTrue(employeeService.removeById(<span data-type=\"markclass\" class=\"hljs-number\">5</span>));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"删除成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 490px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-mqj470bv.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-0tihju59.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ol start=\"2\" data-type=\"numberedlist\"><li><p data-number=\"2\" data-type=\"paragraph\"><strong data-type=\"strong\">根据条件删除</strong></p></li></ol><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 根据 columnMap 条件，删除记录</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">boolean</span> <span data-type=\"markclass\" class=\"hljs-title\">removeByMap</span><span data-type=\"markclass\" class=\"hljs-params\">(Map&lt;String, Object&gt; columnMap)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">按条件删除实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.HashMap;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.Map;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testRemoveByMap</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Map&lt;String, Object&gt; map = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();</code><code data-type=\"codeline\">        map.put(<span data-type=\"markclass\" class=\"hljs-string\">\"sex\"</span>, <span data-type=\"markclass\" class=\"hljs-string\">\"女\"</span>);</code><code data-type=\"codeline\">        Assert.assertTrue(employeeService.removeByMap(map));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"删除成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 570px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-qeue6kzh.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">按条件删除后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-7v4uhb7e.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ol start=\"3\" data-type=\"numberedlist\"><li><p data-number=\"3\" data-type=\"paragraph\"><strong data-type=\"strong\">根据 ID 批量删除</strong></p></li></ol><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 删除（根据ID 批量删除）</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">boolean</span> <span data-type=\"markclass\" class=\"hljs-title\">removeByIds</span><span data-type=\"markclass\" class=\"hljs-params\">(Collection&lt;? extends Serializable&gt; idList)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">批量删除实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.ArrayList;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.List;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testRemoveByIds</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        List&lt;Integer&gt; ids = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();</code><code data-type=\"codeline\">        ids.add(<span data-type=\"markclass\" class=\"hljs-number\">1</span>);</code><code data-type=\"codeline\">        ids.add(<span data-type=\"markclass\" class=\"hljs-number\">4</span>);</code><code data-type=\"codeline\">        Assert.assertTrue(employeeService.removeByIds(ids));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"批量删除成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 590px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div><div data-codeblock-number=\"29\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-4n2ok2jd.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">批量删除后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-asyh9tu3.png\"> <!----></div></div><h3 data-id=\"heading11\" data-type=\"heading\" top=\"26004\">Update</h3><ol data-type=\"numberedlist\"><li><p data-number=\"1\" data-type=\"paragraph\"><strong data-type=\"strong\">根据 ID 选择修改</strong></p></li></ol><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 根据 ID 选择修改</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">boolean</span> <span data-type=\"markclass\" class=\"hljs-title\">updateById</span><span data-type=\"markclass\" class=\"hljs-params\">(T entity)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">根据 ID 修改实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testUpdateById</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Employee employee = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee.setId(<span data-type=\"markclass\" class=\"hljs-number\">3L</span>);</code><code data-type=\"codeline\">        employee.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"程咬金\"</span>);</code><code data-type=\"codeline\">        employee.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"男\"</span>);</code><code data-type=\"codeline\">        employee.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"chengyaojin@cunyu1943.com\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Assert.assertTrue(employeeService.updateById(employee));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"更新成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 610px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div><div data-codeblock-number=\"29\"></div><div data-codeblock-number=\"30\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-94g0zl83.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">更新后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-9m9t3whb.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ol start=\"2\" data-type=\"numberedlist\"><li><p data-number=\"2\" data-type=\"paragraph\"><strong data-type=\"strong\">根据 ID 批量更新</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">2.1 <strong data-type=\"strong\">统一更新</strong></p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 根据ID 批量更新</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">boolean</span> <span data-type=\"markclass\" class=\"hljs-title\">updateBatchById</span><span data-type=\"markclass\" class=\"hljs-params\">(Collection&lt;T&gt; entityList)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">批量更新实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.ArrayList;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.List;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testUpdateBatchById</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Employee employee1 = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee1.setId(<span data-type=\"markclass\" class=\"hljs-number\">6L</span>);</code><code data-type=\"codeline\">        employee1.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"妲己\"</span>);</code><code data-type=\"codeline\">        employee1.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"女\"</span>);</code><code data-type=\"codeline\">        employee1.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"daji@cunyu1943.com\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Employee employee2 = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee2.setId(<span data-type=\"markclass\" class=\"hljs-number\">13L</span>);</code><code data-type=\"codeline\">        employee2.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"小乔\"</span>);</code><code data-type=\"codeline\">        employee2.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"女\"</span>);</code><code data-type=\"codeline\">        employee2.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"xiaoqiao@cunyu1943.com\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        List&lt;Employee&gt; employeeList = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();</code><code data-type=\"codeline\">        employeeList.add(employee1);</code><code data-type=\"codeline\">        employeeList.add(employee2);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Assert.assertTrue(employeeService.updateBatchById(employeeList));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"更新成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 850px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div><div data-codeblock-number=\"29\"></div><div data-codeblock-number=\"30\"></div><div data-codeblock-number=\"31\"></div><div data-codeblock-number=\"32\"></div><div data-codeblock-number=\"33\"></div><div data-codeblock-number=\"34\"></div><div data-codeblock-number=\"35\"></div><div data-codeblock-number=\"36\"></div><div data-codeblock-number=\"37\"></div><div data-codeblock-number=\"38\"></div><div data-codeblock-number=\"39\"></div><div data-codeblock-number=\"40\"></div><div data-codeblock-number=\"41\"></div><div data-codeblock-number=\"42\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-wj7xynlp.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">批量更新后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-g82eg48v.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">2.2 <strong data-type=\"strong\">分批次更新</strong></p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 根据ID 批量更新</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">boolean</span> <span data-type=\"markclass\" class=\"hljs-title\">updateBatchById</span><span data-type=\"markclass\" class=\"hljs-params\">(Collection&lt;T&gt; entityList, <span data-type=\"markclass\" class=\"hljs-keyword\">int</span> batchSize)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">分批次更新实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.ArrayList;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.List;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testUpdateBatchById</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Employee employee1 = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee1.setId(<span data-type=\"markclass\" class=\"hljs-number\">7L</span>);</code><code data-type=\"codeline\">        employee1.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"武则天\"</span>);</code><code data-type=\"codeline\">        employee1.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"女\"</span>);</code><code data-type=\"codeline\">        employee1.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"wuzetian@cunyu1943.com\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Employee employee2 = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> Employee();</code><code data-type=\"codeline\">        employee2.setId(<span data-type=\"markclass\" class=\"hljs-number\">3L</span>);</code><code data-type=\"codeline\">        employee2.setName(<span data-type=\"markclass\" class=\"hljs-string\">\"李元芳\"</span>);</code><code data-type=\"codeline\">        employee2.setSex(<span data-type=\"markclass\" class=\"hljs-string\">\"男\"</span>);</code><code data-type=\"codeline\">        employee2.setEmail(<span data-type=\"markclass\" class=\"hljs-string\">\"liyuanfang@cunyu1943.com\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        List&lt;Employee&gt; employeeList = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();</code><code data-type=\"codeline\">        employeeList.add(employee1);</code><code data-type=\"codeline\">        employeeList.add(employee2);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Assert.assertTrue(employeeService.updateBatchById(employeeList, <span data-type=\"markclass\" class=\"hljs-number\">2</span>));</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"更新成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 850px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div><div data-codeblock-number=\"29\"></div><div data-codeblock-number=\"30\"></div><div data-codeblock-number=\"31\"></div><div data-codeblock-number=\"32\"></div><div data-codeblock-number=\"33\"></div><div data-codeblock-number=\"34\"></div><div data-codeblock-number=\"35\"></div><div data-codeblock-number=\"36\"></div><div data-codeblock-number=\"37\"></div><div data-codeblock-number=\"38\"></div><div data-codeblock-number=\"39\"></div><div data-codeblock-number=\"40\"></div><div data-codeblock-number=\"41\"></div><div data-codeblock-number=\"42\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-06eu4h0l.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">分批次更新后的数据库</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-ldkapqyi.png\"> <!----></div></div><h3 data-id=\"heading12\" data-type=\"heading\" top=\"30370\">Get</h3><ol data-type=\"numberedlist\"><li><p data-number=\"1\" data-type=\"paragraph\"><strong data-type=\"strong\">根据 ID 查询</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">将所要查询记录的 <code data-type=\"codeinline\">id</code> 作为参数，然后将查询到的实体返回。</p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 根据 ID 查询</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\">T <span data-type=\"markclass\" class=\"hljs-title\">getById</span><span data-type=\"markclass\" class=\"hljs-params\">(Serializable id)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">查询实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testGetById</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Employee employee = employeeService.getById(<span data-type=\"markclass\" class=\"hljs-number\">9</span>);</code><code data-type=\"codeline\">        System.out.println(employee);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 470px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-j2lxsuth.png\"> <!----></div></div><h3 data-id=\"heading13\" data-type=\"heading\" top=\"31485\">List</h3><ol data-type=\"numberedlist\"><li><p data-number=\"1\" data-type=\"paragraph\"><strong data-type=\"strong\">查询所有</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">查询所有记录，然后返回到一个集合中。</p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 查询所有</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\">List&lt;T&gt; <span data-type=\"markclass\" class=\"hljs-title\">list</span><span data-type=\"markclass\" class=\"hljs-params\">()</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">查询实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.ArrayList;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.List;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testList</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        List&lt;Employee&gt; employeeLists = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();</code><code data-type=\"codeline\">        employeeLists = employeeService.list();</code><code data-type=\"codeline\">        Assert.assertEquals(<span data-type=\"markclass\" class=\"hljs-number\">6</span>, employeeLists.size());</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"查询成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 570px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-64dk2z9e.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ol start=\"2\" data-type=\"numberedlist\"><li><p data-number=\"2\" data-type=\"paragraph\"><strong data-type=\"strong\">根据 ID 批量查询</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">讲所要查询的记录 <code data-type=\"codeinline\">id</code> 传入集合，然后座位方法参数，最后返回查询到的结果到一个集合中。</p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 查询（根据ID 批量查询）</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\">Collection&lt;T&gt; <span data-type=\"markclass\" class=\"hljs-title\">listByIds</span><span data-type=\"markclass\" class=\"hljs-params\">(Collection&lt;? extends Serializable&gt; idList)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">批量查询实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.ArrayList;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.List;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testListByIds</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        List&lt;Long&gt; ids = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        ids.add(<span data-type=\"markclass\" class=\"hljs-number\">6L</span>);</code><code data-type=\"codeline\">        ids.add(<span data-type=\"markclass\" class=\"hljs-number\">7L</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Assert.assertEquals(<span data-type=\"markclass\" class=\"hljs-number\">2</span>, employeeService.listByIds(ids).size());</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"查询成功\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 650px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div><div data-codeblock-number=\"29\"></div><div data-codeblock-number=\"30\"></div><div data-codeblock-number=\"31\"></div><div data-codeblock-number=\"32\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-a35x72tx.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ol start=\"3\" data-type=\"numberedlist\"><li><p data-number=\"3\" data-type=\"paragraph\"><strong data-type=\"strong\">根据条件查询</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">条件传入 <code data-type=\"codeinline\">Map</code> 集合，<code data-type=\"codeinline\">key</code> 对应字段，<code data-type=\"codeinline\">value</code> 对应值，然后返回集合。</p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 查询（根据 columnMap 条件）</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\">Collection&lt;T&gt; <span data-type=\"markclass\" class=\"hljs-title\">listByMap</span><span data-type=\"markclass\" class=\"hljs-params\">(Map&lt;String, Object&gt; columnMap)</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">根据条件查询实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.HashMap;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> java.util.Map;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testListByMap</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Map&lt;String, Object&gt; map = <span data-type=\"markclass\" class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        map.put(<span data-type=\"markclass\" class=\"hljs-string\">\"sex\"</span>, <span data-type=\"markclass\" class=\"hljs-string\">\"女\"</span>);</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">        Assert.assertEquals(<span data-type=\"markclass\" class=\"hljs-number\">3</span>, employeeService.listByMap(map).size());</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"查询成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 590px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div><div data-codeblock-number=\"25\"></div><div data-codeblock-number=\"26\"></div><div data-codeblock-number=\"27\"></div><div data-codeblock-number=\"28\"></div><div data-codeblock-number=\"29\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-j8lskb53.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ol start=\"4\" data-type=\"numberedlist\"><li><p data-number=\"4\" data-type=\"paragraph\"><strong data-type=\"strong\">查询所有列表</strong></p></li></ol><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 查询所有列表</span></code><code data-type=\"codeline\">List&lt;Map&lt;String, Object&gt;&gt; listMaps();</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">查询实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testListMaps</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Assert.assertEquals(<span data-type=\"markclass\" class=\"hljs-number\">6</span>, employeeService.listMaps());</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"查询成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 490px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-p8ownpv7.png\"> <!----></div></div><p data-type=\"paragraph\"><br></p><ol start=\"5\" data-type=\"numberedlist\"><li><p data-number=\"5\" data-type=\"paragraph\"><strong data-type=\"strong\">查询所有记录</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">用于查询所有数据记录，并将其返回到一个集合中。</p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 查询全部记录</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\">List&lt;Object&gt; <span data-type=\"markclass\" class=\"hljs-title\">listObjs</span><span data-type=\"markclass\" class=\"hljs-params\">()</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">查询实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testListObjs</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Assert.assertEquals(<span data-type=\"markclass\" class=\"hljs-number\">6</span>, employeeService.listObjs().size());</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"查询成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 490px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-h51nyhe7.png\"> <!----></div></div><h3 data-id=\"heading14\" data-type=\"heading\" top=\"37274\">Count</h3><ol data-type=\"numberedlist\"><li><p data-number=\"1\" data-type=\"paragraph\"><strong data-type=\"strong\">查询记录总数</strong></p></li></ol><p data-type=\"paragraph\"><br></p><p data-type=\"paragraph\">用于统计数据控中的记录总条数，方法返回记录条数。</p><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">方法声明</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-comment\">// 查询总记录数</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">int</span> <span data-type=\"markclass\" class=\"hljs-title\">count</span><span data-type=\"markclass\" class=\"hljs-params\">()</span></span>;</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 70px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">查询记录总数实例</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"codeblock\"><div data-codeblock-wrap=\"\"><div data-codeblock-codes=\"\"><div class=\"simplebar\" data-simplebar=\"init\"><div class=\"simplebar-wrapper\" style=\"margin: 0px;\"><div class=\"simplebar-height-auto-observer-wrapper\"><div class=\"simplebar-height-auto-observer\"></div></div> <div class=\"simplebar-mask\"><div class=\"simplebar-offset\" style=\"right: 0px; bottom: 0px;\"><div class=\"simplebar-content-wrapper\" style=\"height: 100%; overflow: hidden scroll;\"><div class=\"simplebar-content\" style=\"padding: 0px;\"><div><pre data-origin=\"pm_code_preview\" lang=\"java\"><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">package</span> com.cunyu.employee;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.entity.Employee;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.mapper.EmployeeMapper;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> com.cunyu.employee.service.EmployeeService;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.Assert;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-meta\">@SpringBootTest</span></code><code data-type=\"codeline\"><span data-type=\"markclass\" class=\"hljs-class\"><span data-type=\"markclass\" class=\"hljs-keyword\">class</span> <span data-type=\"markclass\" class=\"hljs-title\">EmployeeApplicationTests</span> </span>{</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Autowired</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-keyword\">private</span> EmployeeService employeeService;</code><code data-type=\"codeline\"><br></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-meta\">@Test</span></code><code data-type=\"codeline\">    <span data-type=\"markclass\" class=\"hljs-function\"><span data-type=\"markclass\" class=\"hljs-keyword\">void</span> <span data-type=\"markclass\" class=\"hljs-title\">testCount</span><span data-type=\"markclass\" class=\"hljs-params\">()</span> </span>{</code><code data-type=\"codeline\">        Assert.assertEquals(<span data-type=\"markclass\" class=\"hljs-number\">6</span>, employeeService.count());</code><code data-type=\"codeline\">        System.out.println(<span data-type=\"markclass\" class=\"hljs-string\">\"查询成功\"</span>);</code><code data-type=\"codeline\">    }</code><code data-type=\"codeline\">}</code><code data-type=\"codeline\"><br></code></pre></div></div></div></div></div> <div class=\"simplebar-placeholder\" style=\"width: 770px; height: 490px;\"></div></div> <div class=\"simplebar-track simplebar-horizontal\" style=\"visibility: hidden;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"width: 0px; display: none;\"></div></div> <div class=\"simplebar-track simplebar-vertical\" style=\"visibility: visible;\"><div class=\"simplebar-scrollbar simplebar-visible\" style=\"height: 0px; display: none;\"></div></div></div></div> <div data-codeblock-copy=\"\">复制代码</div> <div data-codeblock-index=\"\"><div data-codeblock-number=\"1\"></div><div data-codeblock-number=\"2\"></div><div data-codeblock-number=\"3\"></div><div data-codeblock-number=\"4\"></div><div data-codeblock-number=\"5\"></div><div data-codeblock-number=\"6\"></div><div data-codeblock-number=\"7\"></div><div data-codeblock-number=\"8\"></div><div data-codeblock-number=\"9\"></div><div data-codeblock-number=\"10\"></div><div data-codeblock-number=\"11\"></div><div data-codeblock-number=\"12\"></div><div data-codeblock-number=\"13\"></div><div data-codeblock-number=\"14\"></div><div data-codeblock-number=\"15\"></div><div data-codeblock-number=\"16\"></div><div data-codeblock-number=\"17\"></div><div data-codeblock-number=\"18\"></div><div data-codeblock-number=\"19\"></div><div data-codeblock-number=\"20\"></div><div data-codeblock-number=\"21\"></div><div data-codeblock-number=\"22\"></div><div data-codeblock-number=\"23\"></div><div data-codeblock-number=\"24\"></div></div></div></div><p data-type=\"paragraph\"><br></p><ul data-type=\"bulletedlist\"><li><p data-type=\"paragraph\"><strong data-type=\"strong\">测试结果</strong></p></li></ul><p data-type=\"paragraph\"><br></p><div data-type=\"image\"><div data-content=\"\" data-style-width=\"75%\" data-style-bordertype=\"none\"><img src=\"/articleFile/bca/uploadImg/20210812/1425741082653757440-jg0kzaig.png\"> <!----></div></div><h2 data-id=\"heading15\" data-type=\"heading\" top=\"38407\">总结</h2><p data-type=\"paragraph\">好了，以上就是关于 Mybatis-Plus 的日志配置以及如何进行 CRUD 的相关内容了，这里 CRUD 主要又分为 Mapper 层和 Service 层，我们可以根据自己的需要进行选择。当然，在我们日常使用中，常常都是两个接口一起使用，关于更多 MP 的使用技巧，我们下期文章再见！</p></div>', '前言\n--\n\n上一篇文章中我们讲了 Mybatis-Plus 的定义以及相关特点，并从零开始编写了一个 SpringBoot + Mybatis-Plus 的实例。今天我们就来看看，如何利用 MP 来实现对数据库的增删改查。\n\n日志配置\n----\n\n使用 MP 时，默认是不打印任何 SQL 语句的。而为了方便日常开发工作的调试，我们需要联合控制台和各种数据可视化工具进行语句的拼接检查，因此我们利用 MP 自带的日志功能，在控制台输出我们的 SQL 语句，从而方便我们调试。\n\n  \n\n在配置文件 `application.yml` （IDEA 默认生成的配置文件为 `application.properties`）中，加入一下配置，这样 MP 就会在控制台中打印完整带参数的 SQL 语句，方便我们查看。\n\n  \n\n```cpp\nmybatis-plus:\n  configuration:\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n```\n\n复制代码\n\nMapper CRUD 使用方法\n----------------\n\n首先我们来看 `Mapper` 层 CRUD 涉及的一些方法，`Mapper` 层主要继承自 `BaseMapper` 接口，里边实现了各种用于操作数据库的增删改查的方法，以下我们就来看看日常我们常用的一些方法。\n\n  \n\n```java\npackage com.cunyu.employee.mapper;\n\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport com.cunyu.employee.entity.Employee;\n\n\n/**\n * Created with IntelliJ IDEA.\n *\n * @author : cunyu\n * @version : 1.0\n * @project : Employee\n * @package : com.cunyu.employee.mapper\n * @className : EmployeeMapper\n * @createTime : 2021/8/7 17:45\n * @description : 员工 Mapper 类\n */\npublic interface EmployeeMapper extends BaseMapper<Employee> {\n}\n```\n\n复制代码\n\n### insert 操作\n\n首先是插入数据，`insert` 方法中，传入我们所要插入数据库的实体对象作为参数即可。\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n/**\n     * 插入一条记录\n     *\n     * @param entity 实体对象\n     */\nint insert(T entity);\n```\n\n复制代码\n\n  \n\n*   **插入实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Test\n    void contextLoads() {\n    }\n\n\n    @Autowired\n    private EmployeeMapper employeeMapper;\n\n\n    @Test\n    void testInsert() {\n        Employee employee = new Employee();\n        employee.setId(4L);\n        employee.setName(\"赵六\");\n        employee.setSex(\"男\");\n        employee.setEmail(\"zhaoliu@cunyu1943.com\");\n\n\n        Assert.assertEquals(1, employeeMapper.insert(employee));\n        System.out.println(\"插入成功\");\n    }\n\n\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/16/162f0ad2bbc06fd97314e6b7e560724a.png)\n\n  \n\n*   **数据插入后的数据库**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/32/321f7a08cc843dc05c7cafdc33331be5.png)\n\n### select 操作\n\n相比于插入数据操作，查询数据的方法就要更多，而且还能实现批量查询和条件查询。\n\n  \n\n1.  **根据主键查询**\n    \n\n  \n\n将所要查询数据的主键作为参数传入我们的 `selectById` 方法中，即可实现。\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n/**\n     * 根据 ID 查询\n     *\n     * @param id 主键ID\n     */\nT selectById(Serializable id);\n```\n\n复制代码\n\n  \n\n*   **查询实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Test\n    void contextLoads() {\n    }\n\n\n    @Autowired\n    private EmployeeMapper employeeMapper;\n\n\n    @Test\n    void testSelectById() {\n        Employee employee = employeeMapper.selectById(3);\n        System.out.println(employee);\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/99/99c4172bc0168511beb4404dd685ce47.png)\n\n  \n\n2.  **根据主键批量查询**\n    \n\n  \n\n上一个方法每次只能查询一条记录，如果我们想要查询多条数据记录，那么就可以将要查询数据的主键列表传入 `selectBatchIds` 方法即可。\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n/**\n     * 查询（根据ID 批量查询）\n     *\n     * @param idList 主键ID列表(不能为 null 以及 empty)\n     */\nList<T> selectBatchIds(@Param(Constants.COLLECTION) Collection<? extends Serializable> idList);\n```\n\n复制代码\n\n  \n\n*   **批量查询实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Test\n    void contextLoads() {\n    }\n\n\n    @Autowired\n    private EmployeeMapper employeeMapper;\n\n\n    @Test\n    void testSelectBatchIds() {\n        List<Integer> ids = new ArrayList<>();\n        ids.add(1);\n        ids.add(4);\n        List<Employee> employeeList = employeeMapper.selectBatchIds(ids);\n        System.out.println(employeeList);\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/e4/e465c6bdceab09c59d5a550ff8d893ba.png)\n\n  \n\n3.  **根据多条件查询**\n    \n\n  \n\n除开支持主键查询外，MP 还支持条件查询，只要将我们的条件传入 `Map` 列表中，然后将其作为 `selectByMap` 方法的参数即可，其中传入 `Map` 的 `key` 对应我们数据库中的字段，而 `value` 则对应字段的值。\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n/**\n     * 查询（根据 columnMap 条件）\n     *\n     * @param columnMap 表字段 map 对象\n     */\nList<T> selectByMap(@Param(Constants.COLUMN_MAP) Map<String, Object> columnMap);\n```\n\n复制代码\n\n  \n\n*   **条件查询实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Test\n    void contextLoads() {\n    }\n\n\n    @Autowired\n    private EmployeeMapper employeeMapper;\n\n\n    @Test\n    void testSelectByMap() {\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"sex\", \"男\");\n        map.put(\"name\", \"张三\");\n        System.out.println(employeeMapper.selectByMap(map));\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/17/170f98e7dbfdbb5c714c02b6cbec506f.png)\n\n### update 操作\n\n更新操作，主要是根据我们数据库的主键进行查询，将对应主键的实体对象传入 `updateById` 方法即可。\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n/**\n     * 根据 ID 修改\n     *\n     * @param entity 实体对象\n     */\nint updateById(@Param(Constants.ENTITY) T entity);\n```\n\n复制代码\n\n  \n\n*   **更新实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeMapper employeeMapper;\n\n\n    @Test\n    void testUpdate() {\n        Employee employee = new Employee();\n\n\n        employee.setEmail(\"zhao6@cunyu1943.com\");\n        employee.setName(\"赵 6\");\n        employee.setSex(\"女\");\n        employee.setId(4L);\n\n\n        Assert.assertEquals(1, employeeMapper.updateById(employee));\n        System.out.println(\"更新成功\");\n    }\n\n\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/59/59400dfaedf0db1780537ca0d09587db.png)\n\n  \n\n*   **数据更新后的数据库**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/4b/4be670ca0c0da233be8033006b96920d.png)\n\n### delete 操作\n\n删除操作，既可以根据主键删除一条记录，也能根据主键列表实现批量删除，还能根据条件来进行删除。\n\n  \n\n1.  **根据主键删除一条数据**\n    \n\n  \n\n将所要删除记录的主键作为参数传入 `deleteById` 方法即可。\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n/**\n     * 根据 ID 删除\n     *\n     * @param id 主键ID\n     */\nint deleteById(Serializable id);\n```\n\n复制代码\n\n  \n\n*   **删除实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeMapper employeeMapper;\n\n\n    @Test\n    void testDeleteById() {\n        Assert.assertEquals(1, employeeMapper.deleteById(2L));\n        System.out.println(\"删除成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/df/df2d313e92ca57060c8429d06dd5c17f.png)\n\n  \n\n*   **删除数据后的数据库**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/03/0341908adffb4190c79ec47972d74b9d.png)\n\n  \n\n2.  **根据条件删除**\n    \n\n  \n\n根据条件删除同样是讲条件传入 `Map` 中，然后将 `Map` 作为参数传入 `deleteByMap` 方法，其中 `key` 对应数据库中的字段，`value` 对应字段的值。\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n/**\n     * 根据 columnMap 条件，删除记录\n     *\n     * @param columnMap 表字段 map 对象\n     */\nint deleteByMap(@Param(Constants.COLUMN_MAP) Map<String, Object> columnMap);\n```\n\n复制代码\n\n  \n\n*   **删除实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeMapper employeeMapper;\n\n\n    @Test\n    void testDeleteByMap() {\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"name\", \"赵 6\");\n        Assert.assertEquals(1, employeeMapper.deleteByMap(map));\n        System.out.println(\"删除成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/63/63485b64e9750e80d1edf48b5676bcf7.png)\n\n  \n\n*   **删除数据后的数据库**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/4b/4bcc0d315b82296a54ad8cb3ed6f7f94.png)\n\n  \n\n3.  **根据主键批量删除**\n    \n\n  \n\n将要删除记录的主键传入集合中，然后将集合作为 `deleteBatchIds` 方法的参数即可。\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n/**\n     * 删除（根据ID 批量删除）\n     *\n     * @param idList 主键ID列表(不能为 null 以及 empty)\n     */\nint deleteBatchIds(@Param(Constants.COLLECTION) Collection<? extends Serializable> idList);\n```\n\n复制代码\n\n  \n\n*   **批量删除实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeMapper employeeMapper;\n\n\n    @Test\n    void testDeleteBatchIds() {\n        List<Integer> ids = new ArrayList<>();\n        ids.add(1);\n        ids.add(3);\n        Assert.assertEquals(2, employeeMapper.deleteBatchIds(ids));\n        System.out.println(\"删除成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/75/7565afd103fa8aaf5215532aff3a8187.png)\n\n  \n\n*   **删除数据后的数据库**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/01/01550e4716d48ded67429c40aab4da5e.png)\n\nService CRUD 接口\n---------------\n\n`Service` 层继承自 `IService` 接口，其中的方法和 `Mapper` 层中所提供的方法功能是一致的，除了方法名有所不同外，其他基本类似，但 `Service` 层中提供了更为丰富的方法，两者的继承结构如下图所示。\n\n  \n\n<img src=\"[https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/12764416856e4a9194c4b7046683ecd4~tplv-k3u1fbpfcp-zoom-1.image](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/12764416856e4a9194c4b7046683ecd4~tplv-k3u1fbpfcp-zoom-1.image)\" style=\"zoom:150%;\" />\n\n  \n\n```java\npackage com.cunyu.employee.service;\n\n\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport com.cunyu.employee.entity.Employee;\n\n\n/**\n * Created with IntelliJ IDEA.\n *\n * @author : cunyu\n * @version : 1.0\n * @project : Employee\n * @package : com.cunyu.employee.service\n * @className : EmployeeService\n * @createTime : 2021/8/8 7:52\n * @description : 员工服务接口\n */\n@Service\npublic interface EmployeeService extends IService<Employee> {\n}\n```\n\n复制代码\n\n  \n\n```java\npackage com.cunyu.employee.service.Impl;\n\n\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\n\n\n/**\n * Created with IntelliJ IDEA.\n *\n * @author : cunyu\n * @version : 1.0\n * @project : Employee\n * @package : com.cunyu.employee.service.Impl\n * @className : EmployeeServiceImpl\n * @createTime : 2021/8/8 7:53\n * @description : 员工服务类实现\n */\n\n\n@Service\npublic class EmployeeServiceImpl extends ServiceImpl<EmployeeMapper, Employee> implements EmployeeService {\n}\n```\n\n复制代码\n\n### Save\n\n1.  **插入一条记录**\n    \n\n  \n\n功能同 `Mapper` 层中的 `insert` 方法，只不过方法名不同。\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 插入一条记录（选择字段，策略插入）\nboolean save(T entity);\n```\n\n复制代码\n\n  \n\n*   **插入实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testSave() {\n        Employee employee = new Employee();\n        employee.setId(5L);\n        employee.setName(\"周七\");\n        employee.setEmail(\"zhouqi@cunyu1943.com\");\n        employee.setSex(\"女\");\n        Assert.assertTrue(employeeService.save(employee));\n        System.out.println(\"插入成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/e7/e7a0fe029c4ab5c6f32f555356199c71.png)\n\n  \n\n*   **插入数据后的数据库**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/a1/a1825db5a775fedae7ea555bdf01b9ed.png)\n\n  \n\n2.  **批量插入**\n    \n\n  \n\n这里就和 `Mapper` 层中所有区别，`Mapper` 层中只支持单次插入，而 `Service` 层中支持批量插入，而传入的参数就是我们所要传入实体的集合，而且还可以分批次插入和统一插入。\n\n  \n\n2.1 **统一插入**\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 插入（批量）\nboolean saveBatch(Collection<T> entityList);\n```\n\n复制代码\n\n  \n\n*   **插入实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testSaveBatch() {\n        Employee employee1 = new Employee();\n        employee1.setId(6L);\n        employee1.setEmail(\"zhangliang@cunyu1943.com\");\n        employee1.setSex(\"男\");\n        employee1.setName(\"张良\");\n\n\n        Employee employee2 = new Employee();\n        employee2.setId(7L);\n        employee2.setEmail(\"zhouyu@cunyu1943.com\");\n        employee2.setName(\"周瑜\");\n        employee2.setSex(\"男\");\n\n\n        List<Employee> employeeList = new ArrayList<>();\n        employeeList.add(employee1);\n        employeeList.add(employee2);\n\n\n        Assert.assertTrue(employeeService.saveBatch(employeeList));\n        System.out.println(\"批量插入成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/0d/0d17501f803208a1a76d18e956b4986b.png)\n\n  \n\n*   **统一插入后的数据库**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/6a/6aca0e282fff7574076ec2563ab334d4.png)\n\n  \n\n2.2 **分批次插入**\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 插入（批量）\nboolean saveBatch(Collection<T> entityList, int batchSize);\n```\n\n复制代码\n\n  \n\n*   **分批次插入实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testSaveBatch() {\n        Employee employee1 = new Employee();\n        employee1.setId(8L);\n        employee1.setEmail(\"jialuo@cunyu1943.com\");\n        employee1.setSex(\"女\");\n        employee1.setName(\"迦罗\");\n\n\n        Employee employee2 = new Employee();\n        employee2.setId(9L);\n        employee2.setEmail(\"zhugeliang@cunyu1943.com\");\n        employee2.setName(\"诸葛亮\");\n        employee2.setSex(\"男\");\n\n\n        List<Employee> employeeList = new ArrayList<>();\n        employeeList.add(employee1);\n        employeeList.add(employee2);\n\n\n        Assert.assertTrue(employeeService.saveBatch(employeeList,2));\n        System.out.println(\"批量插入成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/b7/b7a2d78b3717687b4ebe0d9446cbb327.png)\n\n  \n\n*   **分批次插入后的数据库**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/c4/c42b906f6f0e913e5650d9bd79c4a883.png)\n\n### SaveOrUpdate\n\n1.  **单条修改插入**\n    \n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// TableId 注解存在更新记录，否插入一条记录\nboolean saveOrUpdate(T entity);\n```\n\n复制代码\n\n  \n\n*   **单条修改插入实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testSaveOrUpdate() {\n        Employee employee = new Employee();\n        employee.setId(5L);\n        employee.setName(\"周武\");\n        employee.setEmail(\"zhouwu@cunyu1943.com\");\n        employee.setSex(\"男\");\n\n\n        Assert.assertTrue(employeeService.saveOrUpdate(employee));\n        System.out.println(\"更新成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/25/25b96fc01a45a585d4b98791a83c880c.png)\n\n  \n\n*   **修改插入后的数据库**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/6e/6e472a6c455f4b5213eb9dd1ecc1e549.png)\n\n  \n\n2.  **批量修改插入**\n    \n\n  \n\n2.1 **统一插入**\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 批量修改插入\nboolean saveOrUpdateBatch(Collection<T> entityList);\n```\n\n复制代码\n\n  \n\n*   **统一插入实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testSaveOrUpdateBatch() {\n        Employee employee1 = new Employee();\n        employee1.setId(10L);\n        employee1.setEmail(\"zhongwuyan@cunyu1943.com\");\n        employee1.setSex(\"女\");\n        employee1.setName(\"钟无艳\");\n\n\n        Employee employee2 = new Employee();\n        employee2.setId(11L);\n        employee2.setEmail(\"direnjie@cunyu1943.com\");\n        employee2.setName(\"狄仁杰\");\n        employee2.setSex(\"男\");\n\n\n        List<Employee> employeeList = new ArrayList<>();\n        employeeList.add(employee1);\n        employeeList.add(employee2);\n\n\n        Assert.assertTrue(employeeService.saveOrUpdateBatch(employeeList));\n        System.out.println(\"批量修改插入成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/91/91bcc7f3ad73eca3eefeb45576f209c5.png)\n\n  \n\n*   **统一插入数据后的数据库**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/40/4038f74beaf3af24332c78aa0f8a20f1.png)\n\n  \n\n2.2 **分批次插入**\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 批量修改插入\nboolean saveOrUpdateBatch(Collection<T> entityList, int batchSize);\n```\n\n复制代码\n\n  \n\n*   **方法实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testSaveOrUpdateBatch() {\n        Employee employee1 = new Employee();\n        employee1.setId(12L);\n        employee1.setEmail(\"yuji@cunyu1943.com\");\n        employee1.setSex(\"女\");\n        employee1.setName(\"虞姬\");\n\n\n        Employee employee2 = new Employee();\n        employee2.setId(13L);\n        employee2.setEmail(\"sulie@cunyu1943.com\");\n        employee2.setName(\"苏烈\");\n        employee2.setSex(\"男\");\n\n\n        List<Employee> employeeList = new ArrayList<>();\n        employeeList.add(employee1);\n        employeeList.add(employee2);\n\n\n        Assert.assertTrue(employeeService.saveOrUpdateBatch(employeeList, 2));\n        System.out.println(\"批量修改插入成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/e0/e0ac61cb0a1b7ae3b7a31cf5e59422bd.png)\n\n  \n\n*   **分批次插入数据后的数据库**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/0e/0e00b46030203af8327cc45680d6213c.png)\n\n### Remove\n\n1.  **根据 ID 删除**\n    \n\n  \n\n*   **方法实例**\n    \n\n  \n\n```java\n// 根据 ID 删除\nboolean removeById(Serializable id);\n```\n\n复制代码\n\n  \n\n*   **删除实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testRemoveById() {\n        Assert.assertTrue(employeeService.removeById(5));\n        System.out.println(\"删除成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/67/67daeb3014229501de5dfd2153497fb8.png)\n\n  \n\n![](https://static001.geekbang.org/infoq/60/60806d7ff52f8771b49010f0c4944a09.png)\n\n  \n\n2.  **根据条件删除**\n    \n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 根据 columnMap 条件，删除记录\nboolean removeByMap(Map<String, Object> columnMap);\n```\n\n复制代码\n\n  \n\n*   **按条件删除实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testRemoveByMap() {\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"sex\", \"女\");\n        Assert.assertTrue(employeeService.removeByMap(map));\n        System.out.println(\"删除成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/75/752a748310165ad0e762332418564398.png)\n\n  \n\n*   **按条件删除后的数据库**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/65/654a7b32abd4d03028170bdee882c654.png)\n\n  \n\n3.  **根据 ID 批量删除**\n    \n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 删除（根据ID 批量删除）\nboolean removeByIds(Collection<? extends Serializable> idList);\n```\n\n复制代码\n\n  \n\n*   **批量删除实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testRemoveByIds() {\n        List<Integer> ids = new ArrayList<>();\n        ids.add(1);\n        ids.add(4);\n        Assert.assertTrue(employeeService.removeByIds(ids));\n        System.out.println(\"批量删除成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/1a/1ae13fa5c74d6a6c566d982c8a5c819e.png)\n\n  \n\n*   **批量删除后的数据库**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/6a/6af38243a5e0c7d7e61b854cac44869b.png)\n\n### Update\n\n1.  **根据 ID 选择修改**\n    \n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 根据 ID 选择修改\nboolean updateById(T entity);\n```\n\n复制代码\n\n  \n\n*   **根据 ID 修改实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testUpdateById() {\n        Employee employee = new Employee();\n        employee.setId(3L);\n        employee.setName(\"程咬金\");\n        employee.setSex(\"男\");\n        employee.setEmail(\"chengyaojin@cunyu1943.com\");\n\n\n        Assert.assertTrue(employeeService.updateById(employee));\n        System.out.println(\"更新成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/3d/3d229eb461253b81b9d64f562e837672.png)\n\n  \n\n*   **更新后的数据库**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/05/0550e8ba2996c1e1a86f5f1fa52db934.png)\n\n  \n\n2.  **根据 ID 批量更新**\n    \n\n  \n\n2.1 **统一更新**\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 根据ID 批量更新\nboolean updateBatchById(Collection<T> entityList);\n```\n\n复制代码\n\n  \n\n*   **批量更新实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testUpdateBatchById() {\n        Employee employee1 = new Employee();\n        employee1.setId(6L);\n        employee1.setName(\"妲己\");\n        employee1.setSex(\"女\");\n        employee1.setEmail(\"daji@cunyu1943.com\");\n\n\n        Employee employee2 = new Employee();\n        employee2.setId(13L);\n        employee2.setName(\"小乔\");\n        employee2.setSex(\"女\");\n        employee2.setEmail(\"xiaoqiao@cunyu1943.com\");\n\n\n        List<Employee> employeeList = new ArrayList<>();\n        employeeList.add(employee1);\n        employeeList.add(employee2);\n\n\n        Assert.assertTrue(employeeService.updateBatchById(employeeList));\n        System.out.println(\"更新成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/66/66602a650ba523cd308072c0f634a515.png)\n\n  \n\n*   **批量更新后的数据库**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/59/590007fd78eac91d8eab8690f7ff7faa.png)\n\n  \n\n2.2 **分批次更新**\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 根据ID 批量更新\nboolean updateBatchById(Collection<T> entityList, int batchSize);\n```\n\n复制代码\n\n  \n\n*   **分批次更新实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testUpdateBatchById() {\n        Employee employee1 = new Employee();\n        employee1.setId(7L);\n        employee1.setName(\"武则天\");\n        employee1.setSex(\"女\");\n        employee1.setEmail(\"wuzetian@cunyu1943.com\");\n\n\n        Employee employee2 = new Employee();\n        employee2.setId(3L);\n        employee2.setName(\"李元芳\");\n        employee2.setSex(\"男\");\n        employee2.setEmail(\"liyuanfang@cunyu1943.com\");\n\n\n        List<Employee> employeeList = new ArrayList<>();\n        employeeList.add(employee1);\n        employeeList.add(employee2);\n\n\n        Assert.assertTrue(employeeService.updateBatchById(employeeList, 2));\n        System.out.println(\"更新成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/a3/a37f93d308cf1a07fc54ee91345473d1.png)\n\n  \n\n*   **分批次更新后的数据库**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/06/06940331a44696f8b79e67e176df68ed.png)\n\n### Get\n\n1.  **根据 ID 查询**\n    \n\n  \n\n将所要查询记录的 `id` 作为参数，然后将查询到的实体返回。\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 根据 ID 查询\nT getById(Serializable id);\n```\n\n复制代码\n\n  \n\n*   **查询实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testGetById() {\n        Employee employee = employeeService.getById(9);\n        System.out.println(employee);\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/3e/3ecb295eca2657f6d92ce6fd98ead3e9.png)\n\n### List\n\n1.  **查询所有**\n    \n\n  \n\n查询所有记录，然后返回到一个集合中。\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 查询所有\nList<T> list();\n```\n\n复制代码\n\n  \n\n*   **查询实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testList() {\n        List<Employee> employeeLists = new ArrayList<>();\n        employeeLists = employeeService.list();\n        Assert.assertEquals(6, employeeLists.size());\n        System.out.println(\"查询成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/9a/9a0dbd93fdcf661647d24633c5e8e21d.png)\n\n  \n\n2.  **根据 ID 批量查询**\n    \n\n  \n\n讲所要查询的记录 `id` 传入集合，然后座位方法参数，最后返回查询到的结果到一个集合中。\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 查询（根据ID 批量查询）\nCollection<T> listByIds(Collection<? extends Serializable> idList);\n```\n\n复制代码\n\n  \n\n*   **批量查询实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testListByIds() {\n        List<Long> ids = new ArrayList<>();\n\n\n        ids.add(6L);\n        ids.add(7L);\n\n\n        Assert.assertEquals(2, employeeService.listByIds(ids).size());\n        System.out.println(\"查询成功\");\n\n\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/8b/8b46db40fff84d2333bc5f45e5bd4741.png)\n\n  \n\n3.  **根据条件查询**\n    \n\n  \n\n条件传入 `Map` 集合，`key` 对应字段，`value` 对应值，然后返回集合。\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 查询（根据 columnMap 条件）\nCollection<T> listByMap(Map<String, Object> columnMap);\n```\n\n复制代码\n\n  \n\n*   **根据条件查询实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n    @Test\n    void testListByMap() {\n        Map<String, Object> map = new HashMap<>();\n\n\n        map.put(\"sex\", \"女\");\n\n\n        Assert.assertEquals(3, employeeService.listByMap(map).size());\n        System.out.println(\"查询成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/5b/5bf6e1298a1474e8143811ff39e0828a.png)\n\n  \n\n4.  **查询所有列表**\n    \n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 查询所有列表\nList<Map<String, Object>> listMaps();\n```\n\n复制代码\n\n  \n\n*   **查询实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testListMaps() {\n        Assert.assertEquals(6, employeeService.listMaps());\n        System.out.println(\"查询成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/41/417353b4a91b94b1169c7ffccd0c9623.png)\n\n  \n\n5.  **查询所有记录**\n    \n\n  \n\n用于查询所有数据记录，并将其返回到一个集合中。\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 查询全部记录\nList<Object> listObjs();\n```\n\n复制代码\n\n  \n\n*   **查询实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testListObjs() {\n        Assert.assertEquals(6, employeeService.listObjs().size());\n        System.out.println(\"查询成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/17/174ef2de639d1349e8cb04da376ca069.png)\n\n### Count\n\n1.  **查询记录总数**\n    \n\n  \n\n用于统计数据控中的记录总条数，方法返回记录条数。\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 查询总记录数\nint count();\n```\n\n复制代码\n\n  \n\n*   **查询记录总数实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testCount() {\n        Assert.assertEquals(6, employeeService.count());\n        System.out.println(\"查询成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](https://static001.geekbang.org/infoq/0e/0e3ecfba3f1114aad3907b4578fbaede.png)\n\n总结\n--\n\n好了，以上就是关于 Mybatis-Plus 的日志配置以及如何进行 CRUD 的相关内容了，这里 CRUD 主要又分为 Mapper 层和 Service 层，我们可以根据自己的需要进行选择。当然，在我们日常使用中，常常都是两个接口一起使用，关于更多 MP 的使用技巧，我们下期文章再见！', '前言\n--\n\n上一篇文章中我们讲了 Mybatis-Plus 的定义以及相关特点，并从零开始编写了一个 SpringBoot + Mybatis-Plus 的实例。今天我们就来看看，如何利用 MP 来实现对数据库的增删改查。\n\n日志配置\n----\n\n使用 MP 时，默认是不打印任何 SQL 语句的。而为了方便日常开发工作的调试，我们需要联合控制台和各种数据可视化工具进行语句的拼接检查，因此我们利用 MP 自带的日志功能，在控制台输出我们的 SQL 语句，从而方便我们调试。\n\n  \n\n在配置文件 `application.yml` （IDEA 默认生成的配置文件为 `application.properties`）中，加入一下配置，这样 MP 就会在控制台中打印完整带参数的 SQL 语句，方便我们查看。\n\n  \n\n```cpp\nmybatis-plus:\n  configuration:\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n```\n\n复制代码\n\nMapper CRUD 使用方法\n----------------\n\n首先我们来看 `Mapper` 层 CRUD 涉及的一些方法，`Mapper` 层主要继承自 `BaseMapper` 接口，里边实现了各种用于操作数据库的增删改查的方法，以下我们就来看看日常我们常用的一些方法。\n\n  \n\n```java\npackage com.cunyu.employee.mapper;\n\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport com.cunyu.employee.entity.Employee;\n\n\n/**\n * Created with IntelliJ IDEA.\n *\n * @author : cunyu\n * @version : 1.0\n * @project : Employee\n * @package : com.cunyu.employee.mapper\n * @className : EmployeeMapper\n * @createTime : 2021/8/7 17:45\n * @description : 员工 Mapper 类\n */\npublic interface EmployeeMapper extends BaseMapper<Employee> {\n}\n```\n\n复制代码\n\n### insert 操作\n\n首先是插入数据，`insert` 方法中，传入我们所要插入数据库的实体对象作为参数即可。\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n/**\n     * 插入一条记录\n     *\n     * @param entity 实体对象\n     */\nint insert(T entity);\n```\n\n复制代码\n\n  \n\n*   **插入实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Test\n    void contextLoads() {\n    }\n\n\n    @Autowired\n    private EmployeeMapper employeeMapper;\n\n\n    @Test\n    void testInsert() {\n        Employee employee = new Employee();\n        employee.setId(4L);\n        employee.setName(\"赵六\");\n        employee.setSex(\"男\");\n        employee.setEmail(\"zhaoliu@cunyu1943.com\");\n\n\n        Assert.assertEquals(1, employeeMapper.insert(employee));\n        System.out.println(\"插入成功\");\n    }\n\n\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-u2vhptns.png)\n\n  \n\n*   **数据插入后的数据库**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-55u4ivra.png)\n\n### select 操作\n\n相比于插入数据操作，查询数据的方法就要更多，而且还能实现批量查询和条件查询。\n\n  \n\n1.  **根据主键查询**\n    \n\n  \n\n将所要查询数据的主键作为参数传入我们的 `selectById` 方法中，即可实现。\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n/**\n     * 根据 ID 查询\n     *\n     * @param id 主键ID\n     */\nT selectById(Serializable id);\n```\n\n复制代码\n\n  \n\n*   **查询实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Test\n    void contextLoads() {\n    }\n\n\n    @Autowired\n    private EmployeeMapper employeeMapper;\n\n\n    @Test\n    void testSelectById() {\n        Employee employee = employeeMapper.selectById(3);\n        System.out.println(employee);\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-lz6fyld6.png)\n\n  \n\n2.  **根据主键批量查询**\n    \n\n  \n\n上一个方法每次只能查询一条记录，如果我们想要查询多条数据记录，那么就可以将要查询数据的主键列表传入 `selectBatchIds` 方法即可。\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n/**\n     * 查询（根据ID 批量查询）\n     *\n     * @param idList 主键ID列表(不能为 null 以及 empty)\n     */\nList<T> selectBatchIds(@Param(Constants.COLLECTION) Collection<? extends Serializable> idList);\n```\n\n复制代码\n\n  \n\n*   **批量查询实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Test\n    void contextLoads() {\n    }\n\n\n    @Autowired\n    private EmployeeMapper employeeMapper;\n\n\n    @Test\n    void testSelectBatchIds() {\n        List<Integer> ids = new ArrayList<>();\n        ids.add(1);\n        ids.add(4);\n        List<Employee> employeeList = employeeMapper.selectBatchIds(ids);\n        System.out.println(employeeList);\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-f6s7gfnx.png)\n\n  \n\n3.  **根据多条件查询**\n    \n\n  \n\n除开支持主键查询外，MP 还支持条件查询，只要将我们的条件传入 `Map` 列表中，然后将其作为 `selectByMap` 方法的参数即可，其中传入 `Map` 的 `key` 对应我们数据库中的字段，而 `value` 则对应字段的值。\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n/**\n     * 查询（根据 columnMap 条件）\n     *\n     * @param columnMap 表字段 map 对象\n     */\nList<T> selectByMap(@Param(Constants.COLUMN_MAP) Map<String, Object> columnMap);\n```\n\n复制代码\n\n  \n\n*   **条件查询实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Test\n    void contextLoads() {\n    }\n\n\n    @Autowired\n    private EmployeeMapper employeeMapper;\n\n\n    @Test\n    void testSelectByMap() {\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"sex\", \"男\");\n        map.put(\"name\", \"张三\");\n        System.out.println(employeeMapper.selectByMap(map));\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-bpb4eq0d.png)\n\n### update 操作\n\n更新操作，主要是根据我们数据库的主键进行查询，将对应主键的实体对象传入 `updateById` 方法即可。\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n/**\n     * 根据 ID 修改\n     *\n     * @param entity 实体对象\n     */\nint updateById(@Param(Constants.ENTITY) T entity);\n```\n\n复制代码\n\n  \n\n*   **更新实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeMapper employeeMapper;\n\n\n    @Test\n    void testUpdate() {\n        Employee employee = new Employee();\n\n\n        employee.setEmail(\"zhao6@cunyu1943.com\");\n        employee.setName(\"赵 6\");\n        employee.setSex(\"女\");\n        employee.setId(4L);\n\n\n        Assert.assertEquals(1, employeeMapper.updateById(employee));\n        System.out.println(\"更新成功\");\n    }\n\n\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-btucxc3h.png)\n\n  \n\n*   **数据更新后的数据库**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-vltxpsc2.png)\n\n### delete 操作\n\n删除操作，既可以根据主键删除一条记录，也能根据主键列表实现批量删除，还能根据条件来进行删除。\n\n  \n\n1.  **根据主键删除一条数据**\n    \n\n  \n\n将所要删除记录的主键作为参数传入 `deleteById` 方法即可。\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n/**\n     * 根据 ID 删除\n     *\n     * @param id 主键ID\n     */\nint deleteById(Serializable id);\n```\n\n复制代码\n\n  \n\n*   **删除实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeMapper employeeMapper;\n\n\n    @Test\n    void testDeleteById() {\n        Assert.assertEquals(1, employeeMapper.deleteById(2L));\n        System.out.println(\"删除成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-c6oas5w7.png)\n\n  \n\n*   **删除数据后的数据库**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-th3lsner.png)\n\n  \n\n2.  **根据条件删除**\n    \n\n  \n\n根据条件删除同样是讲条件传入 `Map` 中，然后将 `Map` 作为参数传入 `deleteByMap` 方法，其中 `key` 对应数据库中的字段，`value` 对应字段的值。\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n/**\n     * 根据 columnMap 条件，删除记录\n     *\n     * @param columnMap 表字段 map 对象\n     */\nint deleteByMap(@Param(Constants.COLUMN_MAP) Map<String, Object> columnMap);\n```\n\n复制代码\n\n  \n\n*   **删除实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeMapper employeeMapper;\n\n\n    @Test\n    void testDeleteByMap() {\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"name\", \"赵 6\");\n        Assert.assertEquals(1, employeeMapper.deleteByMap(map));\n        System.out.println(\"删除成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-1fkoqk3o.png)\n\n  \n\n*   **删除数据后的数据库**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-mkl6wrpd.png)\n\n  \n\n3.  **根据主键批量删除**\n    \n\n  \n\n将要删除记录的主键传入集合中，然后将集合作为 `deleteBatchIds` 方法的参数即可。\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n/**\n     * 删除（根据ID 批量删除）\n     *\n     * @param idList 主键ID列表(不能为 null 以及 empty)\n     */\nint deleteBatchIds(@Param(Constants.COLLECTION) Collection<? extends Serializable> idList);\n```\n\n复制代码\n\n  \n\n*   **批量删除实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeMapper employeeMapper;\n\n\n    @Test\n    void testDeleteBatchIds() {\n        List<Integer> ids = new ArrayList<>();\n        ids.add(1);\n        ids.add(3);\n        Assert.assertEquals(2, employeeMapper.deleteBatchIds(ids));\n        System.out.println(\"删除成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-mix7men2.png)\n\n  \n\n*   **删除数据后的数据库**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-rgvgz25b.png)\n\nService CRUD 接口\n---------------\n\n`Service` 层继承自 `IService` 接口，其中的方法和 `Mapper` 层中所提供的方法功能是一致的，除了方法名有所不同外，其他基本类似，但 `Service` 层中提供了更为丰富的方法，两者的继承结构如下图所示。\n\n  \n\n<img src=\"[https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/12764416856e4a9194c4b7046683ecd4~tplv-k3u1fbpfcp-zoom-1.image](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/12764416856e4a9194c4b7046683ecd4~tplv-k3u1fbpfcp-zoom-1.image)\" style=\"zoom:150%;\" />\n\n  \n\n```java\npackage com.cunyu.employee.service;\n\n\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport com.cunyu.employee.entity.Employee;\n\n\n/**\n * Created with IntelliJ IDEA.\n *\n * @author : cunyu\n * @version : 1.0\n * @project : Employee\n * @package : com.cunyu.employee.service\n * @className : EmployeeService\n * @createTime : 2021/8/8 7:52\n * @description : 员工服务接口\n */\n@Service\npublic interface EmployeeService extends IService<Employee> {\n}\n```\n\n复制代码\n\n  \n\n```java\npackage com.cunyu.employee.service.Impl;\n\n\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\n\n\n/**\n * Created with IntelliJ IDEA.\n *\n * @author : cunyu\n * @version : 1.0\n * @project : Employee\n * @package : com.cunyu.employee.service.Impl\n * @className : EmployeeServiceImpl\n * @createTime : 2021/8/8 7:53\n * @description : 员工服务类实现\n */\n\n\n@Service\npublic class EmployeeServiceImpl extends ServiceImpl<EmployeeMapper, Employee> implements EmployeeService {\n}\n```\n\n复制代码\n\n### Save\n\n1.  **插入一条记录**\n    \n\n  \n\n功能同 `Mapper` 层中的 `insert` 方法，只不过方法名不同。\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 插入一条记录（选择字段，策略插入）\nboolean save(T entity);\n```\n\n复制代码\n\n  \n\n*   **插入实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testSave() {\n        Employee employee = new Employee();\n        employee.setId(5L);\n        employee.setName(\"周七\");\n        employee.setEmail(\"zhouqi@cunyu1943.com\");\n        employee.setSex(\"女\");\n        Assert.assertTrue(employeeService.save(employee));\n        System.out.println(\"插入成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-6csytrzu.png)\n\n  \n\n*   **插入数据后的数据库**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-1l9hroql.png)\n\n  \n\n2.  **批量插入**\n    \n\n  \n\n这里就和 `Mapper` 层中所有区别，`Mapper` 层中只支持单次插入，而 `Service` 层中支持批量插入，而传入的参数就是我们所要传入实体的集合，而且还可以分批次插入和统一插入。\n\n  \n\n2.1 **统一插入**\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 插入（批量）\nboolean saveBatch(Collection<T> entityList);\n```\n\n复制代码\n\n  \n\n*   **插入实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testSaveBatch() {\n        Employee employee1 = new Employee();\n        employee1.setId(6L);\n        employee1.setEmail(\"zhangliang@cunyu1943.com\");\n        employee1.setSex(\"男\");\n        employee1.setName(\"张良\");\n\n\n        Employee employee2 = new Employee();\n        employee2.setId(7L);\n        employee2.setEmail(\"zhouyu@cunyu1943.com\");\n        employee2.setName(\"周瑜\");\n        employee2.setSex(\"男\");\n\n\n        List<Employee> employeeList = new ArrayList<>();\n        employeeList.add(employee1);\n        employeeList.add(employee2);\n\n\n        Assert.assertTrue(employeeService.saveBatch(employeeList));\n        System.out.println(\"批量插入成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-v5enzage.png)\n\n  \n\n*   **统一插入后的数据库**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-zutwqvdh.png)\n\n  \n\n2.2 **分批次插入**\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 插入（批量）\nboolean saveBatch(Collection<T> entityList, int batchSize);\n```\n\n复制代码\n\n  \n\n*   **分批次插入实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testSaveBatch() {\n        Employee employee1 = new Employee();\n        employee1.setId(8L);\n        employee1.setEmail(\"jialuo@cunyu1943.com\");\n        employee1.setSex(\"女\");\n        employee1.setName(\"迦罗\");\n\n\n        Employee employee2 = new Employee();\n        employee2.setId(9L);\n        employee2.setEmail(\"zhugeliang@cunyu1943.com\");\n        employee2.setName(\"诸葛亮\");\n        employee2.setSex(\"男\");\n\n\n        List<Employee> employeeList = new ArrayList<>();\n        employeeList.add(employee1);\n        employeeList.add(employee2);\n\n\n        Assert.assertTrue(employeeService.saveBatch(employeeList,2));\n        System.out.println(\"批量插入成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-af4t701p.png)\n\n  \n\n*   **分批次插入后的数据库**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-fm6qrizq.png)\n\n### SaveOrUpdate\n\n1.  **单条修改插入**\n    \n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// TableId 注解存在更新记录，否插入一条记录\nboolean saveOrUpdate(T entity);\n```\n\n复制代码\n\n  \n\n*   **单条修改插入实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testSaveOrUpdate() {\n        Employee employee = new Employee();\n        employee.setId(5L);\n        employee.setName(\"周武\");\n        employee.setEmail(\"zhouwu@cunyu1943.com\");\n        employee.setSex(\"男\");\n\n\n        Assert.assertTrue(employeeService.saveOrUpdate(employee));\n        System.out.println(\"更新成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-r9oplt82.png)\n\n  \n\n*   **修改插入后的数据库**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-nkh93df5.png)\n\n  \n\n2.  **批量修改插入**\n    \n\n  \n\n2.1 **统一插入**\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 批量修改插入\nboolean saveOrUpdateBatch(Collection<T> entityList);\n```\n\n复制代码\n\n  \n\n*   **统一插入实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testSaveOrUpdateBatch() {\n        Employee employee1 = new Employee();\n        employee1.setId(10L);\n        employee1.setEmail(\"zhongwuyan@cunyu1943.com\");\n        employee1.setSex(\"女\");\n        employee1.setName(\"钟无艳\");\n\n\n        Employee employee2 = new Employee();\n        employee2.setId(11L);\n        employee2.setEmail(\"direnjie@cunyu1943.com\");\n        employee2.setName(\"狄仁杰\");\n        employee2.setSex(\"男\");\n\n\n        List<Employee> employeeList = new ArrayList<>();\n        employeeList.add(employee1);\n        employeeList.add(employee2);\n\n\n        Assert.assertTrue(employeeService.saveOrUpdateBatch(employeeList));\n        System.out.println(\"批量修改插入成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-iu8t6ru6.png)\n\n  \n\n*   **统一插入数据后的数据库**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-qfz72hy0.png)\n\n  \n\n2.2 **分批次插入**\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 批量修改插入\nboolean saveOrUpdateBatch(Collection<T> entityList, int batchSize);\n```\n\n复制代码\n\n  \n\n*   **方法实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testSaveOrUpdateBatch() {\n        Employee employee1 = new Employee();\n        employee1.setId(12L);\n        employee1.setEmail(\"yuji@cunyu1943.com\");\n        employee1.setSex(\"女\");\n        employee1.setName(\"虞姬\");\n\n\n        Employee employee2 = new Employee();\n        employee2.setId(13L);\n        employee2.setEmail(\"sulie@cunyu1943.com\");\n        employee2.setName(\"苏烈\");\n        employee2.setSex(\"男\");\n\n\n        List<Employee> employeeList = new ArrayList<>();\n        employeeList.add(employee1);\n        employeeList.add(employee2);\n\n\n        Assert.assertTrue(employeeService.saveOrUpdateBatch(employeeList, 2));\n        System.out.println(\"批量修改插入成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-kufy1fmp.png)\n\n  \n\n*   **分批次插入数据后的数据库**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-vun1uhge.png)\n\n### Remove\n\n1.  **根据 ID 删除**\n    \n\n  \n\n*   **方法实例**\n    \n\n  \n\n```java\n// 根据 ID 删除\nboolean removeById(Serializable id);\n```\n\n复制代码\n\n  \n\n*   **删除实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testRemoveById() {\n        Assert.assertTrue(employeeService.removeById(5));\n        System.out.println(\"删除成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-mqj470bv.png)\n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-0tihju59.png)\n\n  \n\n2.  **根据条件删除**\n    \n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 根据 columnMap 条件，删除记录\nboolean removeByMap(Map<String, Object> columnMap);\n```\n\n复制代码\n\n  \n\n*   **按条件删除实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testRemoveByMap() {\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"sex\", \"女\");\n        Assert.assertTrue(employeeService.removeByMap(map));\n        System.out.println(\"删除成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-qeue6kzh.png)\n\n  \n\n*   **按条件删除后的数据库**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-7v4uhb7e.png)\n\n  \n\n3.  **根据 ID 批量删除**\n    \n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 删除（根据ID 批量删除）\nboolean removeByIds(Collection<? extends Serializable> idList);\n```\n\n复制代码\n\n  \n\n*   **批量删除实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testRemoveByIds() {\n        List<Integer> ids = new ArrayList<>();\n        ids.add(1);\n        ids.add(4);\n        Assert.assertTrue(employeeService.removeByIds(ids));\n        System.out.println(\"批量删除成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-4n2ok2jd.png)\n\n  \n\n*   **批量删除后的数据库**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-asyh9tu3.png)\n\n### Update\n\n1.  **根据 ID 选择修改**\n    \n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 根据 ID 选择修改\nboolean updateById(T entity);\n```\n\n复制代码\n\n  \n\n*   **根据 ID 修改实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testUpdateById() {\n        Employee employee = new Employee();\n        employee.setId(3L);\n        employee.setName(\"程咬金\");\n        employee.setSex(\"男\");\n        employee.setEmail(\"chengyaojin@cunyu1943.com\");\n\n\n        Assert.assertTrue(employeeService.updateById(employee));\n        System.out.println(\"更新成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-94g0zl83.png)\n\n  \n\n*   **更新后的数据库**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-9m9t3whb.png)\n\n  \n\n2.  **根据 ID 批量更新**\n    \n\n  \n\n2.1 **统一更新**\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 根据ID 批量更新\nboolean updateBatchById(Collection<T> entityList);\n```\n\n复制代码\n\n  \n\n*   **批量更新实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testUpdateBatchById() {\n        Employee employee1 = new Employee();\n        employee1.setId(6L);\n        employee1.setName(\"妲己\");\n        employee1.setSex(\"女\");\n        employee1.setEmail(\"daji@cunyu1943.com\");\n\n\n        Employee employee2 = new Employee();\n        employee2.setId(13L);\n        employee2.setName(\"小乔\");\n        employee2.setSex(\"女\");\n        employee2.setEmail(\"xiaoqiao@cunyu1943.com\");\n\n\n        List<Employee> employeeList = new ArrayList<>();\n        employeeList.add(employee1);\n        employeeList.add(employee2);\n\n\n        Assert.assertTrue(employeeService.updateBatchById(employeeList));\n        System.out.println(\"更新成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-wj7xynlp.png)\n\n  \n\n*   **批量更新后的数据库**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-g82eg48v.png)\n\n  \n\n2.2 **分批次更新**\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 根据ID 批量更新\nboolean updateBatchById(Collection<T> entityList, int batchSize);\n```\n\n复制代码\n\n  \n\n*   **分批次更新实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testUpdateBatchById() {\n        Employee employee1 = new Employee();\n        employee1.setId(7L);\n        employee1.setName(\"武则天\");\n        employee1.setSex(\"女\");\n        employee1.setEmail(\"wuzetian@cunyu1943.com\");\n\n\n        Employee employee2 = new Employee();\n        employee2.setId(3L);\n        employee2.setName(\"李元芳\");\n        employee2.setSex(\"男\");\n        employee2.setEmail(\"liyuanfang@cunyu1943.com\");\n\n\n        List<Employee> employeeList = new ArrayList<>();\n        employeeList.add(employee1);\n        employeeList.add(employee2);\n\n\n        Assert.assertTrue(employeeService.updateBatchById(employeeList, 2));\n        System.out.println(\"更新成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-06eu4h0l.png)\n\n  \n\n*   **分批次更新后的数据库**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-ldkapqyi.png)\n\n### Get\n\n1.  **根据 ID 查询**\n    \n\n  \n\n将所要查询记录的 `id` 作为参数，然后将查询到的实体返回。\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 根据 ID 查询\nT getById(Serializable id);\n```\n\n复制代码\n\n  \n\n*   **查询实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testGetById() {\n        Employee employee = employeeService.getById(9);\n        System.out.println(employee);\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-j2lxsuth.png)\n\n### List\n\n1.  **查询所有**\n    \n\n  \n\n查询所有记录，然后返回到一个集合中。\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 查询所有\nList<T> list();\n```\n\n复制代码\n\n  \n\n*   **查询实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testList() {\n        List<Employee> employeeLists = new ArrayList<>();\n        employeeLists = employeeService.list();\n        Assert.assertEquals(6, employeeLists.size());\n        System.out.println(\"查询成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-64dk2z9e.png)\n\n  \n\n2.  **根据 ID 批量查询**\n    \n\n  \n\n讲所要查询的记录 `id` 传入集合，然后座位方法参数，最后返回查询到的结果到一个集合中。\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 查询（根据ID 批量查询）\nCollection<T> listByIds(Collection<? extends Serializable> idList);\n```\n\n复制代码\n\n  \n\n*   **批量查询实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testListByIds() {\n        List<Long> ids = new ArrayList<>();\n\n\n        ids.add(6L);\n        ids.add(7L);\n\n\n        Assert.assertEquals(2, employeeService.listByIds(ids).size());\n        System.out.println(\"查询成功\");\n\n\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-a35x72tx.png)\n\n  \n\n3.  **根据条件查询**\n    \n\n  \n\n条件传入 `Map` 集合，`key` 对应字段，`value` 对应值，然后返回集合。\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 查询（根据 columnMap 条件）\nCollection<T> listByMap(Map<String, Object> columnMap);\n```\n\n复制代码\n\n  \n\n*   **根据条件查询实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n    @Test\n    void testListByMap() {\n        Map<String, Object> map = new HashMap<>();\n\n\n        map.put(\"sex\", \"女\");\n\n\n        Assert.assertEquals(3, employeeService.listByMap(map).size());\n        System.out.println(\"查询成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-j8lskb53.png)\n\n  \n\n4.  **查询所有列表**\n    \n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 查询所有列表\nList<Map<String, Object>> listMaps();\n```\n\n复制代码\n\n  \n\n*   **查询实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testListMaps() {\n        Assert.assertEquals(6, employeeService.listMaps());\n        System.out.println(\"查询成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-p8ownpv7.png)\n\n  \n\n5.  **查询所有记录**\n    \n\n  \n\n用于查询所有数据记录，并将其返回到一个集合中。\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 查询全部记录\nList<Object> listObjs();\n```\n\n复制代码\n\n  \n\n*   **查询实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testListObjs() {\n        Assert.assertEquals(6, employeeService.listObjs().size());\n        System.out.println(\"查询成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-h51nyhe7.png)\n\n### Count\n\n1.  **查询记录总数**\n    \n\n  \n\n用于统计数据控中的记录总条数，方法返回记录条数。\n\n  \n\n*   **方法声明**\n    \n\n  \n\n```java\n// 查询总记录数\nint count();\n```\n\n复制代码\n\n  \n\n*   **查询记录总数实例**\n    \n\n  \n\n```java\npackage com.cunyu.employee;\n\n\nimport com.cunyu.employee.entity.Employee;\nimport com.cunyu.employee.mapper.EmployeeMapper;\nimport com.cunyu.employee.service.EmployeeService;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n\n\n\n@SpringBootTest\nclass EmployeeApplicationTests {\n\n\n    @Autowired\n    private EmployeeService employeeService;\n\n\n    @Test\n    void testCount() {\n        Assert.assertEquals(6, employeeService.count());\n        System.out.println(\"查询成功\");\n    }\n}\n```\n\n复制代码\n\n  \n\n*   **测试结果**\n    \n\n  \n\n![](/articleFile/bca/uploadImg/20210812/1425741082653757440-jg0kzaig.png)\n\n总结\n--\n\n好了，以上就是关于 Mybatis-Plus 的日志配置以及如何进行 CRUD 的相关内容了，这里 CRUD 主要又分为 Mapper 层和 Service 层，我们可以根据自己的需要进行选择。当然，在我们日常使用中，常常都是两个接口一起使用，关于更多 MP 的使用技巧，我们下期文章再见！', '2021-08-09 20:39:28', '村雨遥', '2021-08-12 16:49:10', '2021-08-09 20:39:28', NULL);
INSERT INTO `t_article_0` VALUES (1425745774360268800, 'Linux,MySQL,MySQL,Linux系统', NULL, 'MySQL sql_mode=only_full_group_by错误', '9294330', 'https://www.cnblogs.com/52lnamp/p/9294330.html', 3, '今天在测试服务器上突然出现了这么一个MySQL的问题,同样的代码正式服没有问题,首先想到的就是正式与测试mysql配置,对比一下配置原来是数据库版本为5.7以上的版本,默认是开启了 only_full_group_by 模式，开启这个模式后原先的 group by 语句就报错， 查询MySQL版本可以在命令行模式刚连接上数据库时就能看到,或者在进入mysql后使用命令:status查看版本号,既然是版本的问题,那就查询一下配置看看具体的情况,命令行连接上数据库,再输入命令: select @@sql_mode; 你会看到sql_mode的配置情况: 其中ONLY_FULL_GROUP_BY就是造成这个错误的罪魁祸首了,对于group by聚合操作,如果在select中的列没有在group by中出现,那么这个SQL是不合法的,因为列不在group by从句中,既然知道了问题,那么修改这个配置就可以了,找到MySQL的配置文件,在linux系统上/etc/my.cnf文件,查询sql_mode字段,我并没有在配置文件中找到这个关键字,所以我手动添加进去: sql_mode = STRIC', '今天在测试服务器上突然出现了这么一个MySQL的问题,同样的代码正式服没有问题,首先想到的就是正式与测试mysql配置,对比一下配置原来是数据库版本为5.7以上的版本,默认是开启了 only_full_group_by 模式，开启这个模式后原先的 group by 语句就报错， 查询MySQL版本可以在命令行模式刚连接上数据库时就能看到,或者在进入mysql后使用命令:status查看版本号,既然是版本的问题,那就查询一下配置看看具体的情况,命令行连接上数据库,再输入命令: select @@sql_mode; 你会看到sql_mode的配置情况: 其中ONLY_FULL_GROUP_BY就是造成这个错误的罪魁祸首了,对于group by聚合操作,如果在select中的列没有在group by中出现,那么这个SQL是不合法的,因为列不在group by从句中,既然知道了问题,那么修改这个配置就可以了,找到MySQL的配置文件,在linux系统上/etc/my.cnf文件,查询sql_mode字段,我并没有在配置文件中找到这个关键字,所以我手动添加进去: sql_mode = STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION 需要注意的一点是一定要添加在[mysqld]配置内,这样添加完后重启mysql才会生效,退出数据库:exit,重启命令: service mysqld restart; 刷新页面报错信息消失成功解决,再次连接上数据库查看sql_mode配置select @@sql_mode: 到此已经成功解决了这个问题。', '<p><img src=\"https://images2018.cnblogs.com/blog/1413299/201807/1413299-20180711140420456-1688517117.png\" alt=\"\"></p> \n<p>今天在测试服务器上突然出现了这么一个MySQL的问题,同样的代码正式服没有问题,首先想到的就是正式与测试mysql配置,对比一下配置原来是数据库版本为5.7以上的版本,默认是开启了&nbsp;<code>only_full_group_by</code>&nbsp;模式，开启这个模式后原先的&nbsp;<code>group by</code>&nbsp;语句就报错，</p> \n<p><img src=\"https://images2018.cnblogs.com/blog/1413299/201807/1413299-20180711140724447-1433892235.png\" alt=\"\"></p> \n<p>查询MySQL版本可以在命令行模式刚连接上数据库时就能看到,或者在进入mysql后使用命令:status查看版本号,既然是版本的问题,那就查询一下配置看看具体的情况,命令行连接上数据库,再输入命令:</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: rgba(0, 0, 255, 1)\">select</span> <span style=\"color: rgba(0, 128, 0, 1); font-weight: bold\">@@sql_mode</span>;</pre> \n</div> \n<p>你会看到sql_mode的配置情况:</p> \n<p><img src=\"https://images2018.cnblogs.com/blog/1413299/201807/1413299-20180711141319941-1398494589.png\" alt=\"\"></p> \n<p>其中ONLY_FULL_GROUP_BY就是造成这个错误的罪魁祸首了,对于group by聚合操作,如果在select中的列没有在group by中出现,那么这个SQL是不合法的,因为列不在group by从句中,既然知道了问题,那么修改这个配置就可以了,找到MySQL的配置文件,在linux系统上/etc/my.cnf文件,查询sql_mode字段,我并没有在配置文件中找到这个关键字,所以我手动添加进去:</p> \n<div class=\"cnblogs_code\"> \n <pre>sql_mode <span style=\"color: rgba(128, 128, 128, 1)\">=</span> STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</pre> \n</div> \n<p>需要注意的一点是一定要添加在[mysqld]配置内,这样添加完后重启mysql才会生效,退出数据库:exit,重启命令:</p> \n<div class=\"cnblogs_code\"> \n <p>service mysqld restart;</p> \n</div> \n<p>刷新页面报错信息消失成功解决,再次连接上数据库查看sql_mode配置select @@sql_mode:</p> \n<p><img src=\"https://images2018.cnblogs.com/blog/1413299/201807/1413299-20180711143058389-1231745826.png\" alt=\"\"></p> \n<p>到此已经成功解决了这个问题。</p>', '<p><img src=\"/articleFile/bca/uploadImg/20210812/1425745774360268800-qf4ebosl.png\" alt=\"\"></p> \n<p>今天在测试服务器上突然出现了这么一个MySQL的问题,同样的代码正式服没有问题,首先想到的就是正式与测试mysql配置,对比一下配置原来是数据库版本为5.7以上的版本,默认是开启了&nbsp;<code>only_full_group_by</code>&nbsp;模式，开启这个模式后原先的&nbsp;<code>group by</code>&nbsp;语句就报错，</p> \n<p><img src=\"/articleFile/bca/uploadImg/20210812/1425745774360268800-1ehffiwc.png\" alt=\"\"></p> \n<p>查询MySQL版本可以在命令行模式刚连接上数据库时就能看到,或者在进入mysql后使用命令:status查看版本号,既然是版本的问题,那就查询一下配置看看具体的情况,命令行连接上数据库,再输入命令:</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: rgba(0, 0, 255, 1)\">select</span> <span style=\"color: rgba(0, 128, 0, 1); font-weight: bold\">@@sql_mode</span>;</pre> \n</div> \n<p>你会看到sql_mode的配置情况:</p> \n<p><img src=\"/articleFile/bca/uploadImg/20210812/1425745774360268800-a5xqsrgr.png\" alt=\"\"></p> \n<p>其中ONLY_FULL_GROUP_BY就是造成这个错误的罪魁祸首了,对于group by聚合操作,如果在select中的列没有在group by中出现,那么这个SQL是不合法的,因为列不在group by从句中,既然知道了问题,那么修改这个配置就可以了,找到MySQL的配置文件,在linux系统上/etc/my.cnf文件,查询sql_mode字段,我并没有在配置文件中找到这个关键字,所以我手动添加进去:</p> \n<div class=\"cnblogs_code\"> \n <pre>sql_mode <span style=\"color: rgba(128, 128, 128, 1)\">=</span> STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</pre> \n</div> \n<p>需要注意的一点是一定要添加在[mysqld]配置内,这样添加完后重启mysql才会生效,退出数据库:exit,重启命令:</p> \n<div class=\"cnblogs_code\"> \n <p>service mysqld restart;</p> \n</div> \n<p>刷新页面报错信息消失成功解决,再次连接上数据库查看sql_mode配置select @@sql_mode:</p> \n<p><img src=\"/articleFile/bca/uploadImg/20210812/1425745774360268800-ueueu6c1.png\" alt=\"\"></p> \n<p>到此已经成功解决了这个问题。</p>', '![](https://images2018.cnblogs.com/blog/1413299/201807/1413299-20180711140420456-1688517117.png)\n\n今天在测试服务器上突然出现了这么一个MySQL的问题,同样的代码正式服没有问题,首先想到的就是正式与测试mysql配置,对比一下配置原来是数据库版本为5.7以上的版本,默认是开启了 `only_full_group_by` 模式，开启这个模式后原先的 `group by` 语句就报错，\n\n![](https://images2018.cnblogs.com/blog/1413299/201807/1413299-20180711140724447-1433892235.png)\n\n查询MySQL版本可以在命令行模式刚连接上数据库时就能看到,或者在进入mysql后使用命令:status查看版本号,既然是版本的问题,那就查询一下配置看看具体的情况,命令行连接上数据库,再输入命令:\n\n```java\nselect @@sql_mode;\n```\n\n你会看到sql\\_mode的配置情况:\n\n![](https://images2018.cnblogs.com/blog/1413299/201807/1413299-20180711141319941-1398494589.png)\n\n其中ONLY\\_FULL\\_GROUP\\_BY就是造成这个错误的罪魁祸首了,对于group by聚合操作,如果在select中的列没有在group by中出现,那么这个SQL是不合法的,因为列不在group by从句中,既然知道了问题,那么修改这个配置就可以了,找到MySQL的配置文件,在linux系统上/etc/my.cnf文件,查询sql\\_mode字段,我并没有在配置文件中找到这个关键字,所以我手动添加进去:\n\nsql\\_mode \\= STRICT\\_TRANS\\_TABLES,NO\\_ZERO\\_IN\\_DATE,NO\\_ZERO\\_DATE,ERROR\\_FOR\\_DIVISION\\_BY\\_ZERO,NO\\_AUTO\\_CREATE\\_USER,NO\\_ENGINE\\_SUBSTITUTION\n\n需要注意的一点是一定要添加在\\[mysqld\\]配置内,这样添加完后重启mysql才会生效,退出数据库:exit,重启命令:\n\nservice mysqld restart;\n\n刷新页面报错信息消失成功解决,再次连接上数据库查看sql\\_mode配置select @@sql\\_mode:\n\n![](https://images2018.cnblogs.com/blog/1413299/201807/1413299-20180711143058389-1231745826.png)\n\n到此已经成功解决了这个问题。', '![](/articleFile/bca/uploadImg/20210812/1425745774360268800-qf4ebosl.png)\n\n今天在测试服务器上突然出现了这么一个MySQL的问题,同样的代码正式服没有问题,首先想到的就是正式与测试mysql配置,对比一下配置原来是数据库版本为5.7以上的版本,默认是开启了 `only_full_group_by` 模式，开启这个模式后原先的 `group by` 语句就报错，\n\n![](/articleFile/bca/uploadImg/20210812/1425745774360268800-1ehffiwc.png)\n\n查询MySQL版本可以在命令行模式刚连接上数据库时就能看到,或者在进入mysql后使用命令:status查看版本号,既然是版本的问题,那就查询一下配置看看具体的情况,命令行连接上数据库,再输入命令:\n\n```java\nselect @@sql_mode;\n```\n\n你会看到sql\\_mode的配置情况:\n\n![](/articleFile/bca/uploadImg/20210812/1425745774360268800-a5xqsrgr.png)\n\n其中ONLY\\_FULL\\_GROUP\\_BY就是造成这个错误的罪魁祸首了,对于group by聚合操作,如果在select中的列没有在group by中出现,那么这个SQL是不合法的,因为列不在group by从句中,既然知道了问题,那么修改这个配置就可以了,找到MySQL的配置文件,在linux系统上/etc/my.cnf文件,查询sql\\_mode字段,我并没有在配置文件中找到这个关键字,所以我手动添加进去:\n\nsql\\_mode \\= STRICT\\_TRANS\\_TABLES,NO\\_ZERO\\_IN\\_DATE,NO\\_ZERO\\_DATE,ERROR\\_FOR\\_DIVISION\\_BY\\_ZERO,NO\\_AUTO\\_CREATE\\_USER,NO\\_ENGINE\\_SUBSTITUTION\n\n需要注意的一点是一定要添加在\\[mysqld\\]配置内,这样添加完后重启mysql才会生效,退出数据库:exit,重启命令:\n\nservice mysqld restart;\n\n刷新页面报错信息消失成功解决,再次连接上数据库查看sql\\_mode配置select @@sql\\_mode:\n\n![](/articleFile/bca/uploadImg/20210812/1425745774360268800-ueueu6c1.png)\n\n到此已经成功解决了这个问题。', '2018-07-11 14:32', '我是东山呀', '2021-08-12 17:07:45', '2018-07-11 14:32:00', NULL);
INSERT INTO `t_article_0` VALUES (1425754746794414080, 'Linux', NULL, 'Linux 常用命令', '117607110', 'https://blog.csdn.net/qq_34637782/article/details/117607110', 2, '常用命令 1. yum 1.1 简介 yum 全称（Yellow dog Updater, Modified ) 他是一个sheel前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，能够自动处理依赖性关系。 1.2 常用命令 yum  install -y yum-utils ## 安装 -y表示自动yes\nyum remove -y yum-utils ## 卸载\nyum update yum-utils ## 更新\nyum search yum-utils ## 查找\n 1.3 用yum来安装docker 安装需要的软件包，yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的 sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n 设置yum源 sudo yum yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.', '常用命令 1. yum 1.1 简介 yum 全称（Yellow dog Updater, Modified ) 他是一个sheel前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，能够自动处理依赖性关系。 1.2 常用命令 yum  install -y yum-utils ## 安装 -y表示自动yes\nyum remove -y yum-utils ## 卸载\nyum update yum-utils ## 更新\nyum search yum-utils ## 查找\n 1.3 用yum来安装docker 安装需要的软件包，yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的 sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n 设置yum源 sudo yum yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n 安装docker sudo yum install docker-ce\n 启动docker sudo systemctl start docker\nsudo systemctl enable docker\n 2. free 我们可以使用free来看机器的内存占用 由于我买的云服务器是一个1核 2g的 ，所以在部署docker后 对于内存的占用有点提心掉胆 3. mkdir mkdir 自然没什么好讲的 我要讲的是参数 p mkdir -p /home/nacos/logs\n 这里的p是递归的意思 具体来说 就是 我们要创建logs这个文件夹 但是 nacos这个文件夹还没有创建 用了 p 参数 就会先创建 nacos文件夹 再创建 logs文件夹 4.scp 我们可以通过scp把一台主机的文件传输到另一台主机 scp -r file_source file_target\n# scp -r file_source [[user@]host:]file\n 在我们使用这个命令的过程中可能会遇到对方主机没有开启20端口的问题 （没有启动ssh服务） 我们可以使用如下指令开启 systemctl start sshd\n 5.find 我们有许多时候要寻找某个文件 如 日志文件 配置文件 但是我们又不清楚它在哪里 我们这个时候就可以通过这个指令来帮助我们找到该文件的地 5.1名称 find / -name file_name ## 模糊匹配 find / -name *file_name* \n 忽略大小写用命令行 -iname 5.2大小 find path -size [[+][-]] size\n 注意这个文件的大小 为 xm * 1024 * 2 为什么要*2 因为1kb是两个数据块 是基本单位 5.3 时间 -amin # 多长时间内访问过-cmin # 多长时间内修改过\n 5.4 所属 -user # 所属用户-group # 所属组\n 另外我们还可以用locate 这个命令来找文件 但是有些新建的文件是找不到的，因为它要收录这个文件是定期的，不是实时的 6.systmctl 我们需要启动或者关闭某些daemon（守护进程）可以用这个命令 如我们需要开启防火墙 systemctl start firewalld#如上文中开启ssh 一样 名称后面有个d 不知为何\n 紧接着我们可能需要开放端口 firewall-cmd --permanent --add-port=8081-8085/tcp\n 我们还希望我们下次启动系统的时候防火墙还是开启的，我们就需要设置开启自动启动 systemctl enable firewalld.service\n 7. netstat 8.grep 这个命令要区分于find find是根据文件的属性查找文件。而grep是查找文件里面的内容 grep word_name file\n 这样就会返回文件里 word_name 在文件里出现的位置 有两个常见的属性 -i 忽略大小写 -v 反向屏蔽 9.firewall-cmd 开启服务systemctl start firewalld.service 关闭防火墙systemctl stop firewalld.service 开机自动启动systemctl enable firewalld.service 关闭开机制动启动systemctl disable firewalld.service 查看防火墙状态 firewall-cmd status 罗列已经开放的端口 firewall-cmd --list-ports', '<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n</svg> \n<h1><a id=\"_0\"></a>常用命令</h1> \n<h2><a id=\"1_yum_2\"></a>1. yum</h2> \n<h2><a id=\"11__4\"></a>1.1 简介</h2> \n<p>yum 全称（Yellow dog Updater, Modified ) 他是一个sheel前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，能够自动处理依赖性关系。</p> \n<h2><a id=\"12__8\"></a>1.2 常用命令</h2> \n<pre><code class=\"prism language-sh\">yum  install -y yum-utils ## 安装 -y表示自动yes\nyum remove -y yum-utils ## 卸载\nyum update yum-utils ## 更新\nyum search yum-utils ## 查找\n</code></pre> \n<h2><a id=\"13_yumdocker_17\"></a>1.3 用yum来安装docker</h2> \n<ol>\n <li> <p>安装需要的软件包，yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p> <pre><code class=\"prism language-sh\">sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n</code></pre> </li>\n <li> <p>设置yum源</p> <pre><code class=\"prism language-sh\">sudo yum yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n</code></pre> </li>\n <li> <p>安装docker</p> <pre><code class=\"prism language-sh\">sudo yum install docker-ce\n</code></pre> </li>\n <li> <p>启动docker</p> <pre><code class=\"prism language-sh\">sudo systemctl start docker\nsudo systemctl enable docker\n</code></pre> </li>\n</ol> \n<h2><a id=\"2_free_48\"></a>2. free</h2> \n<p>我们可以使用free来看机器的内存占用 由于我买的云服务器是一个1核 2g的 ，所以在部署docker后 对于内存的占用有点提心掉胆</p> \n<h2><a id=\"3_mkdir_52\"></a>3. mkdir</h2> \n<p>mkdir 自然没什么好讲的 我要讲的是参数 p</p> \n<pre><code class=\"prism language-sh\">mkdir -p /home/nacos/logs\n</code></pre> \n<p>这里的p是递归的意思 具体来说 就是 我们要创建logs这个文件夹 但是 nacos这个文件夹还没有创建 用了 p 参数 就会先创建 nacos文件夹 再创建 logs文件夹</p> \n<h2><a id=\"4scp_64\"></a>4.scp</h2> \n<p>我们可以通过scp把一台主机的文件传输到另一台主机</p> \n<pre><code class=\"prism language-sh\">scp -r file_source file_target\n# scp -r file_source [[user@]host:]file\n</code></pre> \n<p>在我们使用这个命令的过程中可能会遇到对方主机没有开启20端口的问题 （没有启动ssh服务）</p> \n<p>我们可以使用如下指令开启</p> \n<pre><code class=\"prism language-sh\">systemctl start sshd\n</code></pre> \n<h2><a id=\"5find_81\"></a>5.find</h2> \n<p>我们有许多时候要寻找某个文件 如 日志文件 配置文件 但是我们又不清楚它在哪里</p> \n<p>我们这个时候就可以通过这个指令来帮助我们找到该文件的地</p> \n<h3><a id=\"51_87\"></a>5.1名称</h3> \n<pre><code class=\"prism language-sh\">find / -name file_name ## 模糊匹配 find / -name *file_name* \n</code></pre> \n<p>忽略大小写用命令行 -iname</p> \n<h3><a id=\"52_95\"></a>5.2大小</h3> \n<pre><code class=\"prism language-sh\">find path -size [[+][-]] size\n</code></pre> \n<p>注意这个文件的大小 为 xm * 1024 * 2 为什么要*2 因为1kb是两个数据块 是基本单位</p> \n<h3><a id=\"53__103\"></a>5.3 时间</h3> \n<pre><code class=\"prism language-sh\">-amin # 多长时间内访问过-cmin # 多长时间内修改过\n</code></pre> \n<h3><a id=\"54__109\"></a>5.4 所属</h3> \n<pre><code class=\"prism language-sh\">-user # 所属用户-group # 所属组\n</code></pre> \n<p>另外我们还可以用locate 这个命令来找文件 但是有些新建的文件是找不到的，因为它要收录这个文件是定期的，不是实时的</p> \n<h2><a id=\"6systmctl_119\"></a>6.systmctl</h2> \n<p>我们需要启动或者关闭某些daemon（守护进程）可以用这个命令</p> \n<p>如我们需要开启防火墙</p> \n<pre><code class=\"prism language-sh\">systemctl start firewalld#如上文中开启ssh 一样 名称后面有个d 不知为何\n</code></pre> \n<p>紧接着我们可能需要开放端口</p> \n<pre><code class=\"prism language-sh\">firewall-cmd --permanent --add-port=8081-8085/tcp\n</code></pre> \n<p>我们还希望我们下次启动系统的时候防火墙还是开启的，我们就需要设置开启自动启动</p> \n<pre><code class=\"prism language-sh\">systemctl enable firewalld.service\n</code></pre> \n<h2><a id=\"7_netstat_141\"></a>7. netstat</h2> \n<h2><a id=\"8grep_143\"></a>8.grep</h2> \n<p>这个命令要区分于find find是根据文件的属性查找文件。而grep是查找文件里面的内容</p> \n<pre><code class=\"prism language-sh\">grep word_name file\n</code></pre> \n<p>这样就会返回文件里 word_name 在文件里出现的位置</p> \n<p>有两个常见的属性 -i 忽略大小写 -v 反向屏蔽</p> \n<h2><a id=\"9firewallcmd_155\"></a>9.firewall-cmd</h2> \n<p>开启服务<code>systemctl start firewalld.service</code></p> \n<p>关闭防火墙<code>systemctl stop firewalld.service</code></p> \n<p>开机自动启动<code>systemctl enable firewalld.service</code></p> \n<p>关闭开机制动启动<code>systemctl disable firewalld.service</code></p> \n<p>查看防火墙状态 firewall-cmd status</p> \n<p>罗列已经开放的端口 firewall-cmd --list-ports</p>', '<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n</svg> \n<h1><a id=\"_0\"></a>常用命令</h1> \n<h2><a id=\"1_yum_2\"></a>1. yum</h2> \n<h2><a id=\"11__4\"></a>1.1 简介</h2> \n<p>yum 全称（Yellow dog Updater, Modified ) 他是一个sheel前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，能够自动处理依赖性关系。</p> \n<h2><a id=\"12__8\"></a>1.2 常用命令</h2> \n<pre><code class=\"prism language-sh\">yum  install -y yum-utils ## 安装 -y表示自动yes\nyum remove -y yum-utils ## 卸载\nyum update yum-utils ## 更新\nyum search yum-utils ## 查找\n</code></pre> \n<h2><a id=\"13_yumdocker_17\"></a>1.3 用yum来安装docker</h2> \n<ol>\n <li> <p>安装需要的软件包，yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p> <pre><code class=\"prism language-sh\">sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n</code></pre> </li>\n <li> <p>设置yum源</p> <pre><code class=\"prism language-sh\">sudo yum yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n</code></pre> </li>\n <li> <p>安装docker</p> <pre><code class=\"prism language-sh\">sudo yum install docker-ce\n</code></pre> </li>\n <li> <p>启动docker</p> <pre><code class=\"prism language-sh\">sudo systemctl start docker\nsudo systemctl enable docker\n</code></pre> </li>\n</ol> \n<h2><a id=\"2_free_48\"></a>2. free</h2> \n<p>我们可以使用free来看机器的内存占用 由于我买的云服务器是一个1核 2g的 ，所以在部署docker后 对于内存的占用有点提心掉胆</p> \n<h2><a id=\"3_mkdir_52\"></a>3. mkdir</h2> \n<p>mkdir 自然没什么好讲的 我要讲的是参数 p</p> \n<pre><code class=\"prism language-sh\">mkdir -p /home/nacos/logs\n</code></pre> \n<p>这里的p是递归的意思 具体来说 就是 我们要创建logs这个文件夹 但是 nacos这个文件夹还没有创建 用了 p 参数 就会先创建 nacos文件夹 再创建 logs文件夹</p> \n<h2><a id=\"4scp_64\"></a>4.scp</h2> \n<p>我们可以通过scp把一台主机的文件传输到另一台主机</p> \n<pre><code class=\"prism language-sh\">scp -r file_source file_target\n# scp -r file_source [[user@]host:]file\n</code></pre> \n<p>在我们使用这个命令的过程中可能会遇到对方主机没有开启20端口的问题 （没有启动ssh服务）</p> \n<p>我们可以使用如下指令开启</p> \n<pre><code class=\"prism language-sh\">systemctl start sshd\n</code></pre> \n<h2><a id=\"5find_81\"></a>5.find</h2> \n<p>我们有许多时候要寻找某个文件 如 日志文件 配置文件 但是我们又不清楚它在哪里</p> \n<p>我们这个时候就可以通过这个指令来帮助我们找到该文件的地</p> \n<h3><a id=\"51_87\"></a>5.1名称</h3> \n<pre><code class=\"prism language-sh\">find / -name file_name ## 模糊匹配 find / -name *file_name* \n</code></pre> \n<p>忽略大小写用命令行 -iname</p> \n<h3><a id=\"52_95\"></a>5.2大小</h3> \n<pre><code class=\"prism language-sh\">find path -size [[+][-]] size\n</code></pre> \n<p>注意这个文件的大小 为 xm * 1024 * 2 为什么要*2 因为1kb是两个数据块 是基本单位</p> \n<h3><a id=\"53__103\"></a>5.3 时间</h3> \n<pre><code class=\"prism language-sh\">-amin # 多长时间内访问过-cmin # 多长时间内修改过\n</code></pre> \n<h3><a id=\"54__109\"></a>5.4 所属</h3> \n<pre><code class=\"prism language-sh\">-user # 所属用户-group # 所属组\n</code></pre> \n<p>另外我们还可以用locate 这个命令来找文件 但是有些新建的文件是找不到的，因为它要收录这个文件是定期的，不是实时的</p> \n<h2><a id=\"6systmctl_119\"></a>6.systmctl</h2> \n<p>我们需要启动或者关闭某些daemon（守护进程）可以用这个命令</p> \n<p>如我们需要开启防火墙</p> \n<pre><code class=\"prism language-sh\">systemctl start firewalld#如上文中开启ssh 一样 名称后面有个d 不知为何\n</code></pre> \n<p>紧接着我们可能需要开放端口</p> \n<pre><code class=\"prism language-sh\">firewall-cmd --permanent --add-port=8081-8085/tcp\n</code></pre> \n<p>我们还希望我们下次启动系统的时候防火墙还是开启的，我们就需要设置开启自动启动</p> \n<pre><code class=\"prism language-sh\">systemctl enable firewalld.service\n</code></pre> \n<h2><a id=\"7_netstat_141\"></a>7. netstat</h2> \n<h2><a id=\"8grep_143\"></a>8.grep</h2> \n<p>这个命令要区分于find find是根据文件的属性查找文件。而grep是查找文件里面的内容</p> \n<pre><code class=\"prism language-sh\">grep word_name file\n</code></pre> \n<p>这样就会返回文件里 word_name 在文件里出现的位置</p> \n<p>有两个常见的属性 -i 忽略大小写 -v 反向屏蔽</p> \n<h2><a id=\"9firewallcmd_155\"></a>9.firewall-cmd</h2> \n<p>开启服务<code>systemctl start firewalld.service</code></p> \n<p>关闭防火墙<code>systemctl stop firewalld.service</code></p> \n<p>开机自动启动<code>systemctl enable firewalld.service</code></p> \n<p>关闭开机制动启动<code>systemctl disable firewalld.service</code></p> \n<p>查看防火墙状态 firewall-cmd status</p> \n<p>罗列已经开放的端口 firewall-cmd --list-ports</p>', '常用命令\n====\n\n1\\. yum\n-------\n\n1.1 简介\n------\n\nyum 全称（Yellow dog Updater, Modified ) 他是一个sheel前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，能够自动处理依赖性关系。\n\n1.2 常用命令\n--------\n\n    yum  install -y yum-utils ## 安装 -y表示自动yes\n    yum remove -y yum-utils ## 卸载\n    yum update yum-utils ## 更新\n    yum search yum-utils ## 查找\n    \n\n1.3 用yum来安装docker\n-----------------\n\n1.  安装需要的软件包，yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的\n    \n        sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n        \n2.  设置yum源\n    \n        sudo yum yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n        \n3.  安装docker\n    \n        sudo yum install docker-ce\n        \n4.  启动docker\n    \n        sudo systemctl start docker\n        sudo systemctl enable docker\n        \n\n2\\. free\n--------\n\n我们可以使用free来看机器的内存占用 由于我买的云服务器是一个1核 2g的 ，所以在部署docker后 对于内存的占用有点提心掉胆\n\n3\\. mkdir\n---------\n\nmkdir 自然没什么好讲的 我要讲的是参数 p\n\n    mkdir -p /home/nacos/logs\n    \n\n这里的p是递归的意思 具体来说 就是 我们要创建logs这个文件夹 但是 nacos这个文件夹还没有创建 用了 p 参数 就会先创建 nacos文件夹 再创建 logs文件夹\n\n4.scp\n-----\n\n我们可以通过scp把一台主机的文件传输到另一台主机\n\n    scp -r file_source file_target\n    # scp -r file_source [[user@]host:]file\n    \n\n在我们使用这个命令的过程中可能会遇到对方主机没有开启20端口的问题 （没有启动ssh服务）\n\n我们可以使用如下指令开启\n\n    systemctl start sshd\n    \n\n5.find\n------\n\n我们有许多时候要寻找某个文件 如 日志文件 配置文件 但是我们又不清楚它在哪里\n\n我们这个时候就可以通过这个指令来帮助我们找到该文件的地\n\n### 5.1名称\n\n    find / -name file_name ## 模糊匹配 find / -name *file_name* \n    \n\n忽略大小写用命令行 -iname\n\n### 5.2大小\n\n    find path -size [[+][-]] size\n    \n\n注意这个文件的大小 为 xm \\* 1024 \\* 2 为什么要\\*2 因为1kb是两个数据块 是基本单位\n\n### 5.3 时间\n\n    -amin # 多长时间内访问过-cmin # 多长时间内修改过\n    \n\n### 5.4 所属\n\n    -user # 所属用户-group # 所属组\n    \n\n另外我们还可以用locate 这个命令来找文件 但是有些新建的文件是找不到的，因为它要收录这个文件是定期的，不是实时的\n\n6.systmctl\n----------\n\n我们需要启动或者关闭某些daemon（守护进程）可以用这个命令\n\n如我们需要开启防火墙\n\n    systemctl start firewalld#如上文中开启ssh 一样 名称后面有个d 不知为何\n    \n\n紧接着我们可能需要开放端口\n\n    firewall-cmd --permanent --add-port=8081-8085/tcp\n    \n\n我们还希望我们下次启动系统的时候防火墙还是开启的，我们就需要设置开启自动启动\n\n    systemctl enable firewalld.service\n    \n\n7\\. netstat\n-----------\n\n8.grep\n------\n\n这个命令要区分于find find是根据文件的属性查找文件。而grep是查找文件里面的内容\n\n    grep word_name file\n    \n\n这样就会返回文件里 word\\_name 在文件里出现的位置\n\n有两个常见的属性 -i 忽略大小写 -v 反向屏蔽\n\n9.firewall-cmd\n--------------\n\n开启服务`systemctl start firewalld.service`\n\n关闭防火墙`systemctl stop firewalld.service`\n\n开机自动启动`systemctl enable firewalld.service`\n\n关闭开机制动启动`systemctl disable firewalld.service`\n\n查看防火墙状态 firewall-cmd status\n\n罗列已经开放的端口 firewall-cmd --list-ports', '常用命令\n====\n\n1\\. yum\n-------\n\n1.1 简介\n------\n\nyum 全称（Yellow dog Updater, Modified ) 他是一个sheel前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，能够自动处理依赖性关系。\n\n1.2 常用命令\n--------\n\n    yum  install -y yum-utils ## 安装 -y表示自动yes\n    yum remove -y yum-utils ## 卸载\n    yum update yum-utils ## 更新\n    yum search yum-utils ## 查找\n    \n\n1.3 用yum来安装docker\n-----------------\n\n1.  安装需要的软件包，yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的\n    \n        sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n        \n2.  设置yum源\n    \n        sudo yum yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n        \n3.  安装docker\n    \n        sudo yum install docker-ce\n        \n4.  启动docker\n    \n        sudo systemctl start docker\n        sudo systemctl enable docker\n        \n\n2\\. free\n--------\n\n我们可以使用free来看机器的内存占用 由于我买的云服务器是一个1核 2g的 ，所以在部署docker后 对于内存的占用有点提心掉胆\n\n3\\. mkdir\n---------\n\nmkdir 自然没什么好讲的 我要讲的是参数 p\n\n    mkdir -p /home/nacos/logs\n    \n\n这里的p是递归的意思 具体来说 就是 我们要创建logs这个文件夹 但是 nacos这个文件夹还没有创建 用了 p 参数 就会先创建 nacos文件夹 再创建 logs文件夹\n\n4.scp\n-----\n\n我们可以通过scp把一台主机的文件传输到另一台主机\n\n    scp -r file_source file_target\n    # scp -r file_source [[user@]host:]file\n    \n\n在我们使用这个命令的过程中可能会遇到对方主机没有开启20端口的问题 （没有启动ssh服务）\n\n我们可以使用如下指令开启\n\n    systemctl start sshd\n    \n\n5.find\n------\n\n我们有许多时候要寻找某个文件 如 日志文件 配置文件 但是我们又不清楚它在哪里\n\n我们这个时候就可以通过这个指令来帮助我们找到该文件的地\n\n### 5.1名称\n\n    find / -name file_name ## 模糊匹配 find / -name *file_name* \n    \n\n忽略大小写用命令行 -iname\n\n### 5.2大小\n\n    find path -size [[+][-]] size\n    \n\n注意这个文件的大小 为 xm \\* 1024 \\* 2 为什么要\\*2 因为1kb是两个数据块 是基本单位\n\n### 5.3 时间\n\n    -amin # 多长时间内访问过-cmin # 多长时间内修改过\n    \n\n### 5.4 所属\n\n    -user # 所属用户-group # 所属组\n    \n\n另外我们还可以用locate 这个命令来找文件 但是有些新建的文件是找不到的，因为它要收录这个文件是定期的，不是实时的\n\n6.systmctl\n----------\n\n我们需要启动或者关闭某些daemon（守护进程）可以用这个命令\n\n如我们需要开启防火墙\n\n    systemctl start firewalld#如上文中开启ssh 一样 名称后面有个d 不知为何\n    \n\n紧接着我们可能需要开放端口\n\n    firewall-cmd --permanent --add-port=8081-8085/tcp\n    \n\n我们还希望我们下次启动系统的时候防火墙还是开启的，我们就需要设置开启自动启动\n\n    systemctl enable firewalld.service\n    \n\n7\\. netstat\n-----------\n\n8.grep\n------\n\n这个命令要区分于find find是根据文件的属性查找文件。而grep是查找文件里面的内容\n\n    grep word_name file\n    \n\n这样就会返回文件里 word\\_name 在文件里出现的位置\n\n有两个常见的属性 -i 忽略大小写 -v 反向屏蔽\n\n9.firewall-cmd\n--------------\n\n开启服务`systemctl start firewalld.service`\n\n关闭防火墙`systemctl stop firewalld.service`\n\n开机自动启动`systemctl enable firewalld.service`\n\n关闭开机制动启动`systemctl disable firewalld.service`\n\n查看防火墙状态 firewall-cmd status\n\n罗列已经开放的端口 firewall-cmd --list-ports', '2021-06-05 22:38:07', '量子玫瑰', '2021-08-12 17:43:16', '2021-06-05 22:38:07', 3);
INSERT INTO `t_article_0` VALUES (1425754765710725120, 'Linux', NULL, 'Linux 系统目录结构', '116602145', 'https://blog.csdn.net/qq_34637782/article/details/116602145', 2, 'Linux 系统目录结构 虽然最近一直在使用docker来部署一些中间件或者服务，但是还是会在宿主机中创建一些挂载，这就涉及到我们应该把这些挂载文件放在哪里比较合适的问题。现在我们来认识下Linux的系统目录结构 先看一个大图，有一个大体认识 现在我们来对这些目录做一点解释： / ：首先我们应该知道 这个斜杠表示根目录的意思，我们写绝对地址就是从这个斜杠开始的 而～表示用户空间的开始地址 /bin ：bin是Binaries（二进制文件）的缩写。这个目录存放着最经常使用的命令 如find ，top，free等等都可以在这个文件夹下找到 /boot ：boot即启动的意思，这里放的是系统启动相关的一些核心文件，包括一些连接文件和镜像文件 所以我们基本是不需要关心这个文件夹的 /etc ： Etcetera的缩写，这个目录用来存放所有存储系统管理所需要的配置文件和子目录，这个文件夹和我们相关性比较大了，我们自己写的配置文件就可以放在这里，一些中间件配置文件的默认地址也是在这里 /home ：即用户空间了 /media：linux 系统会自动识别一些设备，例如u盘，光驱等 /opt ：opt', 'Linux 系统目录结构 虽然最近一直在使用docker来部署一些中间件或者服务，但是还是会在宿主机中创建一些挂载，这就涉及到我们应该把这些挂载文件放在哪里比较合适的问题。现在我们来认识下Linux的系统目录结构 先看一个大图，有一个大体认识 现在我们来对这些目录做一点解释： / ：首先我们应该知道 这个斜杠表示根目录的意思，我们写绝对地址就是从这个斜杠开始的 而～表示用户空间的开始地址 /bin ：bin是Binaries（二进制文件）的缩写。这个目录存放着最经常使用的命令 如find ，top，free等等都可以在这个文件夹下找到 /boot ：boot即启动的意思，这里放的是系统启动相关的一些核心文件，包括一些连接文件和镜像文件 所以我们基本是不需要关心这个文件夹的 /etc ： Etcetera的缩写，这个目录用来存放所有存储系统管理所需要的配置文件和子目录，这个文件夹和我们相关性比较大了，我们自己写的配置文件就可以放在这里，一些中间件配置文件的默认地址也是在这里 /home ：即用户空间了 /media：linux 系统会自动识别一些设备，例如u盘，光驱等 /opt ：opt是optional 的缩写，这是给主机额外安装软件所摆放的目录。就是用户级安装的一些软件就可以放在这里 /lib ：Library的缩写，这个目录里面放着系统最基本的动态连接共享库，其作用类似于Windows里面的DLL文件。 /usr ：unix shared resources 的缩写，这个文件夹和我们用户关系比较紧密，用户很多的应用程序和文件都放在这个目录下面，类似于windows下的program files目录。在它下面还有个sbin 下面有些只有root用户才能用的命令 如 useradd /var ：variable的缩写，这个目录下放着不断扩充的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。 总结 1.上述有几个目录是我们作为用户比较关心的 如/etc ，/var ，/opt， /usr 对应放置我们的配置文件，日志，应用等', '<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n</svg> \n<h1><a id=\"Linux___0\"></a>Linux 系统目录结构</h1> \n<p>虽然最近一直在使用docker来部署一些中间件或者服务，但是还是会在宿主机中创建一些挂载，这就涉及到我们应该把这些挂载文件放在哪里比较合适的问题。现在我们来认识下Linux的系统目录结构</p> \n<p>先看一个大图，有一个大体认识</p> \n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/932ffb3b54a53ed775a72b03197f210d.png\" alt=\"img\"></p> \n<p>现在我们来对这些目录做一点解释：</p> \n<ul>\n <li> <p>/ ：首先我们应该知道 这个斜杠表示根目录的意思，我们写绝对地址就是从这个斜杠开始的 而～表示用户空间的开始地址</p> </li>\n <li> <p>/bin ：bin是Binaries（二进制文件）的缩写。这个目录存放着最经常使用的命令 如find ，top，free等等都可以在这个文件夹下找到</p> </li>\n <li> <p>/boot ：boot即启动的意思，这里放的是系统启动相关的一些核心文件，包括一些连接文件和镜像文件 所以我们基本是不需要关心这个文件夹的</p> </li>\n <li> <p>/etc ： Etcetera的缩写，这个目录用来存放所有存储系统管理所需要的配置文件和子目录，这个文件夹和我们相关性比较大了，我们自己写的配置文件就可以放在这里，一些中间件配置文件的默认地址也是在这里</p> </li>\n <li> <p>/home ：即用户空间了</p> </li>\n <li> <p>/media：linux 系统会自动识别一些设备，例如u盘，光驱等</p> </li>\n <li> <p>/opt ：opt是optional 的缩写，这是给主机额外安装软件所摆放的目录。就是用户级安装的一些软件就可以放在这里</p> </li>\n <li> <p>/lib ：Library的缩写，这个目录里面放着系统最基本的动态连接共享库，其作用类似于Windows里面的DLL文件。</p> </li>\n <li> <p>/usr ：unix shared resources 的缩写，这个文件夹和我们用户关系比较紧密，用户很多的应用程序和文件都放在这个目录下面，类似于windows下的program files目录。在它下面还有个sbin 下面有些只有root用户才能用的命令 如 useradd</p> </li>\n <li> <p>/var ：variable的缩写，这个目录下放着不断扩充的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p> </li>\n</ul> \n<h2><a id=\"_34\"></a>总结</h2> \n<p>1.上述有几个目录是我们作为用户比较关心的 如/etc ，/var ，/opt， /usr 对应放置我们的配置文件，日志，应用等</p>', '<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n</svg> \n<h1><a id=\"Linux___0\"></a>Linux 系统目录结构</h1> \n<p>虽然最近一直在使用docker来部署一些中间件或者服务，但是还是会在宿主机中创建一些挂载，这就涉及到我们应该把这些挂载文件放在哪里比较合适的问题。现在我们来认识下Linux的系统目录结构</p> \n<p>先看一个大图，有一个大体认识</p> \n<p><img src=\"/articleFile/bca/uploadImg/20210812/1425754765710725120-8axzbjll.png\" alt=\"img\"></p> \n<p>现在我们来对这些目录做一点解释：</p> \n<ul>\n <li> <p>/ ：首先我们应该知道 这个斜杠表示根目录的意思，我们写绝对地址就是从这个斜杠开始的 而～表示用户空间的开始地址</p> </li>\n <li> <p>/bin ：bin是Binaries（二进制文件）的缩写。这个目录存放着最经常使用的命令 如find ，top，free等等都可以在这个文件夹下找到</p> </li>\n <li> <p>/boot ：boot即启动的意思，这里放的是系统启动相关的一些核心文件，包括一些连接文件和镜像文件 所以我们基本是不需要关心这个文件夹的</p> </li>\n <li> <p>/etc ： Etcetera的缩写，这个目录用来存放所有存储系统管理所需要的配置文件和子目录，这个文件夹和我们相关性比较大了，我们自己写的配置文件就可以放在这里，一些中间件配置文件的默认地址也是在这里</p> </li>\n <li> <p>/home ：即用户空间了</p> </li>\n <li> <p>/media：linux 系统会自动识别一些设备，例如u盘，光驱等</p> </li>\n <li> <p>/opt ：opt是optional 的缩写，这是给主机额外安装软件所摆放的目录。就是用户级安装的一些软件就可以放在这里</p> </li>\n <li> <p>/lib ：Library的缩写，这个目录里面放着系统最基本的动态连接共享库，其作用类似于Windows里面的DLL文件。</p> </li>\n <li> <p>/usr ：unix shared resources 的缩写，这个文件夹和我们用户关系比较紧密，用户很多的应用程序和文件都放在这个目录下面，类似于windows下的program files目录。在它下面还有个sbin 下面有些只有root用户才能用的命令 如 useradd</p> </li>\n <li> <p>/var ：variable的缩写，这个目录下放着不断扩充的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p> </li>\n</ul> \n<h2><a id=\"_34\"></a>总结</h2> \n<p>1.上述有几个目录是我们作为用户比较关心的 如/etc ，/var ，/opt， /usr 对应放置我们的配置文件，日志，应用等</p>', 'Linux 系统目录结构\n============\n\n虽然最近一直在使用docker来部署一些中间件或者服务，但是还是会在宿主机中创建一些挂载，这就涉及到我们应该把这些挂载文件放在哪里比较合适的问题。现在我们来认识下Linux的系统目录结构\n\n先看一个大图，有一个大体认识\n\n![img](https://img-blog.csdnimg.cn/img_convert/932ffb3b54a53ed775a72b03197f210d.png)\n\n现在我们来对这些目录做一点解释：\n\n*   / ：首先我们应该知道 这个斜杠表示根目录的意思，我们写绝对地址就是从这个斜杠开始的 而～表示用户空间的开始地址\n    \n*   /bin ：bin是Binaries（二进制文件）的缩写。这个目录存放着最经常使用的命令 如find ，top，free等等都可以在这个文件夹下找到\n    \n*   /boot ：boot即启动的意思，这里放的是系统启动相关的一些核心文件，包括一些连接文件和镜像文件 所以我们基本是不需要关心这个文件夹的\n    \n*   /etc ： Etcetera的缩写，这个目录用来存放所有存储系统管理所需要的配置文件和子目录，这个文件夹和我们相关性比较大了，我们自己写的配置文件就可以放在这里，一些中间件配置文件的默认地址也是在这里\n    \n*   /home ：即用户空间了\n    \n*   /media：linux 系统会自动识别一些设备，例如u盘，光驱等\n    \n*   /opt ：opt是optional 的缩写，这是给主机额外安装软件所摆放的目录。就是用户级安装的一些软件就可以放在这里\n    \n*   /lib ：Library的缩写，这个目录里面放着系统最基本的动态连接共享库，其作用类似于Windows里面的DLL文件。\n    \n*   /usr ：unix shared resources 的缩写，这个文件夹和我们用户关系比较紧密，用户很多的应用程序和文件都放在这个目录下面，类似于windows下的program files目录。在它下面还有个sbin 下面有些只有root用户才能用的命令 如 useradd\n    \n*   /var ：variable的缩写，这个目录下放着不断扩充的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。\n    \n\n总结\n--\n\n1.上述有几个目录是我们作为用户比较关心的 如/etc ，/var ，/opt， /usr 对应放置我们的配置文件，日志，应用等', 'Linux 系统目录结构\n============\n\n虽然最近一直在使用docker来部署一些中间件或者服务，但是还是会在宿主机中创建一些挂载，这就涉及到我们应该把这些挂载文件放在哪里比较合适的问题。现在我们来认识下Linux的系统目录结构\n\n先看一个大图，有一个大体认识\n\n![img](/articleFile/bca/uploadImg/20210812/1425754765710725120-8axzbjll.png)\n\n现在我们来对这些目录做一点解释：\n\n*   / ：首先我们应该知道 这个斜杠表示根目录的意思，我们写绝对地址就是从这个斜杠开始的 而～表示用户空间的开始地址\n    \n*   /bin ：bin是Binaries（二进制文件）的缩写。这个目录存放着最经常使用的命令 如find ，top，free等等都可以在这个文件夹下找到\n    \n*   /boot ：boot即启动的意思，这里放的是系统启动相关的一些核心文件，包括一些连接文件和镜像文件 所以我们基本是不需要关心这个文件夹的\n    \n*   /etc ： Etcetera的缩写，这个目录用来存放所有存储系统管理所需要的配置文件和子目录，这个文件夹和我们相关性比较大了，我们自己写的配置文件就可以放在这里，一些中间件配置文件的默认地址也是在这里\n    \n*   /home ：即用户空间了\n    \n*   /media：linux 系统会自动识别一些设备，例如u盘，光驱等\n    \n*   /opt ：opt是optional 的缩写，这是给主机额外安装软件所摆放的目录。就是用户级安装的一些软件就可以放在这里\n    \n*   /lib ：Library的缩写，这个目录里面放着系统最基本的动态连接共享库，其作用类似于Windows里面的DLL文件。\n    \n*   /usr ：unix shared resources 的缩写，这个文件夹和我们用户关系比较紧密，用户很多的应用程序和文件都放在这个目录下面，类似于windows下的program files目录。在它下面还有个sbin 下面有些只有root用户才能用的命令 如 useradd\n    \n*   /var ：variable的缩写，这个目录下放着不断扩充的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。\n    \n\n总结\n--\n\n1.上述有几个目录是我们作为用户比较关心的 如/etc ，/var ，/opt， /usr 对应放置我们的配置文件，日志，应用等', '2021-05-10 17:19:31', '量子玫瑰', '2021-08-12 17:43:20', '2021-05-10 17:19:31', 3);

-- ----------------------------
-- Table structure for t_article_1
-- ----------------------------
DROP TABLE IF EXISTS `t_article_1`;
CREATE TABLE `t_article_1`  (
  `article_id` bigint(20) UNSIGNED NOT NULL,
  `tag` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '标签,使用\',\'拼接',
  `cover` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '封面,使用“,”拼接',
  `title` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '标题',
  `original_id` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '原始id',
  `original_url` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '原始地址',
  `original_type` smallint(3) NULL DEFAULT NULL COMMENT '类型',
  `digest` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '摘要',
  `text_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '原文字内容',
  `original_html_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '原html内容',
  `html_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '已处理图片的html内容',
  `original_md_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '未处理图片的md',
  `md_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '已处理图片的md',
  `original_date_str` varchar(25) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '发布时间',
  `original_author` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '作者',
  `create_date` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `original_date` datetime(0) NULL DEFAULT NULL COMMENT '发布时间',
  `topic_id` int(11) NULL DEFAULT NULL COMMENT '主题id',
  PRIMARY KEY (`article_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for t_article_2
-- ----------------------------
DROP TABLE IF EXISTS `t_article_2`;
CREATE TABLE `t_article_2`  (
  `article_id` bigint(20) NOT NULL,
  `tag` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '标签,使用\',\'拼接',
  `cover` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '封面,使用“,”拼接',
  `title` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '标题',
  `original_id` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '原始id',
  `original_url` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '原始地址',
  `original_type` smallint(3) NULL DEFAULT NULL COMMENT '类型',
  `digest` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '摘要',
  `text_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '原文字内容',
  `original_html_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '原html内容',
  `html_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '已处理图片的html内容',
  `original_md_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '未处理图片的md',
  `md_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '已处理图片的md',
  `original_date_str` varchar(25) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '发布时间',
  `original_author` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '作者',
  `create_date` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `original_date` datetime(0) NULL DEFAULT NULL COMMENT '发布时间',
  `topic_id` int(11) NULL DEFAULT NULL COMMENT '主题id',
  PRIMARY KEY (`article_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for t_article_3
-- ----------------------------
DROP TABLE IF EXISTS `t_article_3`;
CREATE TABLE `t_article_3`  (
  `article_id` bigint(20) NOT NULL,
  `tag` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '标签,使用\',\'拼接',
  `cover` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '封面,使用“,”拼接',
  `title` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '标题',
  `original_id` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '原始id',
  `original_url` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '原始地址',
  `original_type` smallint(3) NULL DEFAULT NULL COMMENT '类型',
  `digest` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '摘要',
  `text_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '原文字内容',
  `original_html_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '原html内容',
  `html_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '已处理图片的html内容',
  `original_md_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '未处理图片的md',
  `md_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '已处理图片的md',
  `original_date_str` varchar(25) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '发布时间',
  `original_author` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '作者',
  `create_date` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `original_date` datetime(0) NULL DEFAULT NULL COMMENT '发布时间',
  `topic_id` int(11) NULL DEFAULT NULL COMMENT '主题id',
  PRIMARY KEY (`article_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for t_article_4
-- ----------------------------
DROP TABLE IF EXISTS `t_article_4`;
CREATE TABLE `t_article_4`  (
  `article_id` bigint(20) NOT NULL,
  `tag` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '标签,使用\',\'拼接',
  `cover` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '封面,使用“,”拼接',
  `title` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '标题',
  `original_id` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '原始id',
  `original_url` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '原始地址',
  `original_type` smallint(3) NULL DEFAULT NULL COMMENT '类型',
  `digest` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '摘要',
  `text_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '原文字内容',
  `original_html_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '原html内容',
  `html_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '已处理图片的html内容',
  `original_md_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '未处理图片的md',
  `md_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '已处理图片的md',
  `original_date_str` varchar(25) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '发布时间',
  `original_author` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '作者',
  `create_date` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `original_date` datetime(0) NULL DEFAULT NULL COMMENT '发布时间',
  `topic_id` int(11) NULL DEFAULT NULL COMMENT '主题id',
  PRIMARY KEY (`article_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_article_4
-- ----------------------------
INSERT INTO `t_article_4` VALUES (1425754781024129024, 'Linux', NULL, 'Linux的用户和用户组', '116602117', 'https://blog.csdn.net/qq_34637782/article/details/116602117', 2, 'Linux的用户和用户组 两个文件 我们学习Linux的用户和用户组可以从两个文件开始 1. passwd 如上图 这个配置文件 在 /etc/passwd路径下 每一行表示一个用户 1.1 每一行的结构 user_name:x:uId:gId::home_directory:sh\n 普通用户的uId 是从1000开始的 gId是 创建的时候系统自动分配的初始组 一般我们不建议修改初使组 可以改附加组 x表示这个用户有密码 密码 在 etc/shadow文件里 只有root用户可以查看 home_directory表示用户目录，root 的用户目录就是/root.一般用户的用户目录是/home/user_name sh 是命令解析器 不建议修改 root 和 一般用户一般就是/bin/bash 。但是可以看到uid 1到1000的用户sh是不同的 这些用户是系统用户.是系统调用时用到的 不建议修改 2. shadow 上面的文件是任何用户都可以查看的，若把密码也放在这个文件里面 是非常不安全的，所以密码被特别放置在了另外的这个shadow文件里。 3. sudo 我们有时候在执行一些命', 'Linux的用户和用户组 两个文件 我们学习Linux的用户和用户组可以从两个文件开始 1. passwd 如上图 这个配置文件 在 /etc/passwd路径下 每一行表示一个用户 1.1 每一行的结构 user_name:x:uId:gId::home_directory:sh\n 普通用户的uId 是从1000开始的 gId是 创建的时候系统自动分配的初始组 一般我们不建议修改初使组 可以改附加组 x表示这个用户有密码 密码 在 etc/shadow文件里 只有root用户可以查看 home_directory表示用户目录，root 的用户目录就是/root.一般用户的用户目录是/home/user_name sh 是命令解析器 不建议修改 root 和 一般用户一般就是/bin/bash 。但是可以看到uid 1到1000的用户sh是不同的 这些用户是系统用户.是系统调用时用到的 不建议修改 2. shadow 上面的文件是任何用户都可以查看的，若把密码也放在这个文件里面 是非常不安全的，所以密码被特别放置在了另外的这个shadow文件里。 3. sudo 我们有时候在执行一些命令前 会加上sudo 那是因为 有些命令只有root才有，那么有时候root用户想把一些权限给普通用户，那么root就可以通过修改/etc/sudoers 加行一行 给某个用户权限，那么该用户就可以用sudo执行这命令了 总结 我们用useradd 创建一个用户，那么就会在上述两个文件里写入对应的数据，当然还有 /etc/group 和/etc/gpassword这两个文件。 我们可以理解，其实linux的很多配置 最终的结果就是写到一个文件。', '<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n</svg> \n<h1><a id=\"Linux_0\"></a>Linux的用户和用户组</h1> \n<h2><a id=\"_2\"></a>两个文件</h2> \n<p>我们学习Linux的用户和用户组可以从两个文件开始</p> \n<h3><a id=\"1_passwd_6\"></a>1. passwd</h3> \n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/86afe866e95b42f7de4f5caa3370eafa.png\" alt=\"截屏2021-04-04 下午12.25.05\"></p> \n<p>如上图 这个配置文件 在 /etc/passwd路径下</p> \n<p>每一行表示一个用户</p> \n<h4><a id=\"11__16\"></a>1.1 每一行的结构</h4> \n<pre><code class=\"prism language-sh\">user_name:x:uId:gId::home_directory:sh\n</code></pre> \n<ul>\n <li>普通用户的uId 是从1000开始的</li>\n <li>gId是 创建的时候系统自动分配的初始组 一般我们不建议修改初使组 可以改附加组</li>\n <li>x表示这个用户有密码 密码 在 etc/shadow文件里 只有root用户可以查看</li>\n <li>home_directory表示用户目录，root 的用户目录就是/root.一般用户的用户目录是/home/user_name</li>\n <li>sh 是命令解析器 不建议修改 root 和 一般用户一般就是/bin/bash 。但是可以看到uid 1到1000的用户sh是不同的 这些用户是系统用户.是系统调用时用到的 不建议修改</li>\n</ul> \n<h2><a id=\"2_shadow_30\"></a>2. shadow</h2> \n<p>上面的文件是任何用户都可以查看的，若把密码也放在这个文件里面 是非常不安全的，所以密码被特别放置在了另外的这个shadow文件里。</p> \n<h2><a id=\"3_sudo_36\"></a>3. sudo</h2> \n<p>我们有时候在执行一些命令前 会加上sudo 那是因为 有些命令只有root才有，那么有时候root用户想把一些权限给普通用户，那么root就可以通过修改/etc/sudoers 加行一行 给某个用户权限，那么该用户就可以用sudo执行这命令了</p> \n<h2><a id=\"_42\"></a>总结</h2> \n<p>我们用useradd 创建一个用户，那么就会在上述两个文件里写入对应的数据，当然还有 /etc/group 和/etc/gpassword这两个文件。</p> \n<p>我们可以理解，其实linux的很多配置 最终的结果就是写到一个文件。</p>', '<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n</svg> \n<h1><a id=\"Linux_0\"></a>Linux的用户和用户组</h1> \n<h2><a id=\"_2\"></a>两个文件</h2> \n<p>我们学习Linux的用户和用户组可以从两个文件开始</p> \n<h3><a id=\"1_passwd_6\"></a>1. passwd</h3> \n<p><img src=\"/articleFile/bca/uploadImg/20210812/1425754781024129024-xeuws9n3.png\" alt=\"截屏2021-04-04 下午12.25.05\"></p> \n<p>如上图 这个配置文件 在 /etc/passwd路径下</p> \n<p>每一行表示一个用户</p> \n<h4><a id=\"11__16\"></a>1.1 每一行的结构</h4> \n<pre><code class=\"prism language-sh\">user_name:x:uId:gId::home_directory:sh\n</code></pre> \n<ul>\n <li>普通用户的uId 是从1000开始的</li>\n <li>gId是 创建的时候系统自动分配的初始组 一般我们不建议修改初使组 可以改附加组</li>\n <li>x表示这个用户有密码 密码 在 etc/shadow文件里 只有root用户可以查看</li>\n <li>home_directory表示用户目录，root 的用户目录就是/root.一般用户的用户目录是/home/user_name</li>\n <li>sh 是命令解析器 不建议修改 root 和 一般用户一般就是/bin/bash 。但是可以看到uid 1到1000的用户sh是不同的 这些用户是系统用户.是系统调用时用到的 不建议修改</li>\n</ul> \n<h2><a id=\"2_shadow_30\"></a>2. shadow</h2> \n<p>上面的文件是任何用户都可以查看的，若把密码也放在这个文件里面 是非常不安全的，所以密码被特别放置在了另外的这个shadow文件里。</p> \n<h2><a id=\"3_sudo_36\"></a>3. sudo</h2> \n<p>我们有时候在执行一些命令前 会加上sudo 那是因为 有些命令只有root才有，那么有时候root用户想把一些权限给普通用户，那么root就可以通过修改/etc/sudoers 加行一行 给某个用户权限，那么该用户就可以用sudo执行这命令了</p> \n<h2><a id=\"_42\"></a>总结</h2> \n<p>我们用useradd 创建一个用户，那么就会在上述两个文件里写入对应的数据，当然还有 /etc/group 和/etc/gpassword这两个文件。</p> \n<p>我们可以理解，其实linux的很多配置 最终的结果就是写到一个文件。</p>', 'Linux的用户和用户组\n============\n\n两个文件\n----\n\n我们学习Linux的用户和用户组可以从两个文件开始\n\n### 1\\. passwd\n\n![截屏2021-04-04 下午12.25.05](https://img-blog.csdnimg.cn/img_convert/86afe866e95b42f7de4f5caa3370eafa.png)\n\n如上图 这个配置文件 在 /etc/passwd路径下\n\n每一行表示一个用户\n\n#### 1.1 每一行的结构\n\n    user_name:x:uId:gId::home_directory:sh\n    \n\n*   普通用户的uId 是从1000开始的\n*   gId是 创建的时候系统自动分配的初始组 一般我们不建议修改初使组 可以改附加组\n*   x表示这个用户有密码 密码 在 etc/shadow文件里 只有root用户可以查看\n*   home\\_directory表示用户目录，root 的用户目录就是/root.一般用户的用户目录是/home/user\\_name\n*   sh 是命令解析器 不建议修改 root 和 一般用户一般就是/bin/bash 。但是可以看到uid 1到1000的用户sh是不同的 这些用户是系统用户.是系统调用时用到的 不建议修改\n\n2\\. shadow\n----------\n\n上面的文件是任何用户都可以查看的，若把密码也放在这个文件里面 是非常不安全的，所以密码被特别放置在了另外的这个shadow文件里。\n\n3\\. sudo\n--------\n\n我们有时候在执行一些命令前 会加上sudo 那是因为 有些命令只有root才有，那么有时候root用户想把一些权限给普通用户，那么root就可以通过修改/etc/sudoers 加行一行 给某个用户权限，那么该用户就可以用sudo执行这命令了\n\n总结\n--\n\n我们用useradd 创建一个用户，那么就会在上述两个文件里写入对应的数据，当然还有 /etc/group 和/etc/gpassword这两个文件。\n\n我们可以理解，其实linux的很多配置 最终的结果就是写到一个文件。', 'Linux的用户和用户组\n============\n\n两个文件\n----\n\n我们学习Linux的用户和用户组可以从两个文件开始\n\n### 1\\. passwd\n\n![截屏2021-04-04 下午12.25.05](/articleFile/bca/uploadImg/20210812/1425754781024129024-xeuws9n3.png)\n\n如上图 这个配置文件 在 /etc/passwd路径下\n\n每一行表示一个用户\n\n#### 1.1 每一行的结构\n\n    user_name:x:uId:gId::home_directory:sh\n    \n\n*   普通用户的uId 是从1000开始的\n*   gId是 创建的时候系统自动分配的初始组 一般我们不建议修改初使组 可以改附加组\n*   x表示这个用户有密码 密码 在 etc/shadow文件里 只有root用户可以查看\n*   home\\_directory表示用户目录，root 的用户目录就是/root.一般用户的用户目录是/home/user\\_name\n*   sh 是命令解析器 不建议修改 root 和 一般用户一般就是/bin/bash 。但是可以看到uid 1到1000的用户sh是不同的 这些用户是系统用户.是系统调用时用到的 不建议修改\n\n2\\. shadow\n----------\n\n上面的文件是任何用户都可以查看的，若把密码也放在这个文件里面 是非常不安全的，所以密码被特别放置在了另外的这个shadow文件里。\n\n3\\. sudo\n--------\n\n我们有时候在执行一些命令前 会加上sudo 那是因为 有些命令只有root才有，那么有时候root用户想把一些权限给普通用户，那么root就可以通过修改/etc/sudoers 加行一行 给某个用户权限，那么该用户就可以用sudo执行这命令了\n\n总结\n--\n\n我们用useradd 创建一个用户，那么就会在上述两个文件里写入对应的数据，当然还有 /etc/group 和/etc/gpassword这两个文件。\n\n我们可以理解，其实linux的很多配置 最终的结果就是写到一个文件。', '2021-05-10 17:18:59', '量子玫瑰', '2021-08-12 17:43:25', '2021-05-10 17:18:59', 3);

-- ----------------------------
-- Table structure for t_article_5
-- ----------------------------
DROP TABLE IF EXISTS `t_article_5`;
CREATE TABLE `t_article_5`  (
  `article_id` bigint(20) NOT NULL,
  `tag` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '标签,使用\',\'拼接',
  `cover` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '封面,使用“,”拼接',
  `title` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '标题',
  `original_id` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '原始id',
  `original_url` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '原始地址',
  `original_type` smallint(3) NULL DEFAULT NULL COMMENT '类型',
  `digest` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '摘要',
  `text_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '原文字内容',
  `original_html_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '原html内容',
  `html_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '已处理图片的html内容',
  `original_md_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '未处理图片的md',
  `md_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '已处理图片的md',
  `original_date_str` varchar(25) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '发布时间',
  `original_author` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '作者',
  `create_date` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `original_date` datetime(0) NULL DEFAULT NULL COMMENT '发布时间',
  `topic_id` int(11) NULL DEFAULT NULL COMMENT '主题id',
  PRIMARY KEY (`article_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for t_article_6
-- ----------------------------
DROP TABLE IF EXISTS `t_article_6`;
CREATE TABLE `t_article_6`  (
  `article_id` bigint(20) NOT NULL,
  `tag` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '标签,使用\',\'拼接',
  `cover` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '封面,使用“,”拼接',
  `title` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '标题',
  `original_id` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '原始id',
  `original_url` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '原始地址',
  `original_type` smallint(3) NULL DEFAULT NULL COMMENT '类型',
  `digest` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '摘要',
  `text_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '原文字内容',
  `original_html_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '原html内容',
  `html_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '已处理图片的html内容',
  `original_md_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '未处理图片的md',
  `md_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '已处理图片的md',
  `original_date_str` varchar(25) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '发布时间',
  `original_author` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '作者',
  `create_date` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `original_date` datetime(0) NULL DEFAULT NULL COMMENT '发布时间',
  `topic_id` int(11) NULL DEFAULT NULL COMMENT '主题id',
  PRIMARY KEY (`article_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_article_6
-- ----------------------------
INSERT INTO `t_article_6` VALUES (1425750928589459456, '数据库,mysql,ONLY_FULL_GROUP_BY', NULL, '真正有效解决ONLY_FULL_GROUP_BY的问题', '101029487', 'https://blog.csdn.net/qq_34637782/article/details/101029487', 2, '问题描述 报错 如上图 在mysql 5.7版本下可能会报如下错误 Error Code: 1055. Expression #3 of SELECT list is not in GROUP BY clause and contains nonaggregated column ‘×××’ which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by 原因 是在5.7下mysql的model默认为 ONLY_FULL_GROUP_BY 含义 sql中select后面的字段必须出现在group by后面，或者被聚合函数包裹，不然会抛出上面的错误 如以下sql select A.column1, A.column2 from table as A group by column1 //会因为ONLY_FULL_GROUP_BY的缘故抛出上面错误\n 问题解决 思路一 既然是这个模式限制的问题 我们可以修改该模式，', '问题描述 报错 如上图 在mysql 5.7版本下可能会报如下错误 Error Code: 1055. Expression #3 of SELECT list is not in GROUP BY clause and contains nonaggregated column ‘×××’ which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by 原因 是在5.7下mysql的model默认为 ONLY_FULL_GROUP_BY 含义 sql中select后面的字段必须出现在group by后面，或者被聚合函数包裹，不然会抛出上面的错误 如以下sql select A.column1, A.column2 from table as A group by column1 //会因为ONLY_FULL_GROUP_BY的缘故抛出上面错误\n 问题解决 思路一 既然是这个模式限制的问题 我们可以修改该模式，找到配置文件 修改配置即可。 vim /etc/mysql/my.cnf\n 文件名如上所示，但是地址可能得看具体环境了 [mysql]\n# 设置mysql客户端默认字符集\ndefault-character-set=utf8 \n[mysqld]\n#设置3306端口\nport = 3306\n# 设置mysql的安装目录\nbasedir=%MYSQL_HOME%\n# 允许最大连接数\nmax_connections=200\n# 服务端使用的字符集默认为8比特编码的latin1字符集\ncharacter-set-server=utf8\n# 创建新表时将使用的默认存储引擎\ndefault-storage-engine=INNODB\n# 设置模式\nsql_mode =STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION\n\ndatadir = D:\\mysql-5.7.27-winx64\\data\n 注意这里的sql_mode 是配置在[mysqld]下面的 然后就是重启mysql服务 思路二 我们得承认这个模式是很有意义的。而我们又想实现如下sql的效果 select A.column1, A.column2 from table as A group by column1 \n 首先我们得理解我们写的上面的sql的含义 按column1进行分组 那么结果就是这个组内的cloumn1都是相同的，但是column2却没有限制，也就是说可能相同 也可能不同，那么数据库不知道column2该返回什么值给你 那么我们有两种方案 在group by后面追加上column2就可以了，意义相当于按照 由column1和column2拼接成的联合字段进行分组 select A.column1, A.column2 from table as A group by column1 , column2\n 或者在内查询里只查询分组的字段, 各位可以参考如下形式 SELECT A.column1, A.column2 FROM TABLE A JOIN ( SELECT max(id) id, column1 FROM TABLE b GROUP BY column_1 ) C ON A.column1 = C.column1 and C.id = A.id\n 以上是我的一些经验 如果不对 还请留言告知', '<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n</svg> \n<h2><a id=\"_1\"></a>问题描述</h2> \n<p><img src=\"https://img-blog.csdnimg.cn/20190919171306212.png\" alt=\"在\"><br> <strong>报错</strong> 如上图 在mysql 5.7版本下可能会报如下错误</p> \n<blockquote> \n <p>Error Code: 1055. Expression #3 of SELECT list is not in GROUP BY clause and contains nonaggregated column ‘×××’ which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by</p> \n</blockquote> \n<p><strong>原因</strong> 是在5.7下mysql的model默认为</p> \n<blockquote> \n <p>ONLY_FULL_GROUP_BY</p> \n</blockquote> \n<p><strong>含义</strong> sql中select后面的字段必须出现在group by后面，或者被聚合函数包裹，不然会抛出上面的错误 如以下sql</p> \n<pre><code>select A.column1, A.column2 from table as A group by column1 //会因为ONLY_FULL_GROUP_BY的缘故抛出上面错误\n</code></pre> \n<h2><a id=\"_14\"></a>问题解决</h2> \n<h4><a id=\"_15\"></a>思路一</h4> \n<p>既然是这个模式限制的问题 我们可以修改该模式，找到配置文件 修改配置即可。</p> \n<pre><code class=\"prism language-sh\">vim /etc/mysql/my.cnf\n</code></pre> \n<p>文件名如上所示，但是地址可能得看具体环境了</p> \n<pre><code class=\"prism language-sh\">[mysql]\n# 设置mysql客户端默认字符集\ndefault-character-set=utf8 \n[mysqld]\n#设置3306端口\nport = 3306\n# 设置mysql的安装目录\nbasedir=%MYSQL_HOME%\n# 允许最大连接数\nmax_connections=200\n# 服务端使用的字符集默认为8比特编码的latin1字符集\ncharacter-set-server=utf8\n# 创建新表时将使用的默认存储引擎\ndefault-storage-engine=INNODB\n# 设置模式\nsql_mode =STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION\n\ndatadir = D:\\mysql-5.7.27-winx64\\data\n</code></pre> \n<p>注意这里的sql_mode 是配置在[mysqld]下面的<br> 然后就是重启mysql服务</p> \n<h4><a id=\"_44\"></a>思路二</h4> \n<p>我们得承认这个模式是很有意义的。而我们又想实现如下sql的效果</p> \n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">select</span> A<span class=\"token punctuation\">.</span>column1<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">.</span>column2 <span class=\"token keyword\">from</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">as</span> A <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> column1 \n</code></pre> \n<p>首先我们得理解我们写的上面的sql的含义 按column1进行分组 那么结果就是这个组内的cloumn1都是相同的，但是column2却没有限制，也就是说可能相同 也可能不同，那么数据库不知道column2该返回什么值给你</p> \n<p>那么我们有两种方案</p> \n<ol>\n <li>在group by后面追加上column2就可以了，意义相当于按照 由column1和column2拼接成的联合字段进行分组</li>\n</ol> \n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">select</span> A<span class=\"token punctuation\">.</span>column1<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">.</span>column2 <span class=\"token keyword\">from</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">as</span> A <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> column1 <span class=\"token punctuation\">,</span> column2\n</code></pre> \n<ol start=\"2\">\n <li>或者在内查询里只查询分组的字段, 各位可以参考如下形式</li>\n</ol> \n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SELECT</span> A<span class=\"token punctuation\">.</span>column1<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">.</span>column2 <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">TABLE</span> A <span class=\"token keyword\">JOIN</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">SELECT</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> id<span class=\"token punctuation\">,</span> column1 <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">TABLE</span> b <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> column_1 <span class=\"token punctuation\">)</span> C <span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span>column1 <span class=\"token operator\">=</span> C<span class=\"token punctuation\">.</span>column1 <span class=\"token operator\">and</span> C<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> A<span class=\"token punctuation\">.</span>id\n</code></pre> \n<p>以上是我的一些经验 如果不对 还请留言告知</p>', '<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n</svg> \n<h2><a id=\"_1\"></a>问题描述</h2> \n<p><img src=\"/articleFile/bca/uploadImg/20210812/1425750928589459456-fbveppf6.png\" alt=\"在\"><br> <strong>报错</strong> 如上图 在mysql 5.7版本下可能会报如下错误</p> \n<blockquote> \n <p>Error Code: 1055. Expression #3 of SELECT list is not in GROUP BY clause and contains nonaggregated column ‘×××’ which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by</p> \n</blockquote> \n<p><strong>原因</strong> 是在5.7下mysql的model默认为</p> \n<blockquote> \n <p>ONLY_FULL_GROUP_BY</p> \n</blockquote> \n<p><strong>含义</strong> sql中select后面的字段必须出现在group by后面，或者被聚合函数包裹，不然会抛出上面的错误 如以下sql</p> \n<pre><code>select A.column1, A.column2 from table as A group by column1 //会因为ONLY_FULL_GROUP_BY的缘故抛出上面错误\n</code></pre> \n<h2><a id=\"_14\"></a>问题解决</h2> \n<h4><a id=\"_15\"></a>思路一</h4> \n<p>既然是这个模式限制的问题 我们可以修改该模式，找到配置文件 修改配置即可。</p> \n<pre><code class=\"prism language-sh\">vim /etc/mysql/my.cnf\n</code></pre> \n<p>文件名如上所示，但是地址可能得看具体环境了</p> \n<pre><code class=\"prism language-sh\">[mysql]\n# 设置mysql客户端默认字符集\ndefault-character-set=utf8 \n[mysqld]\n#设置3306端口\nport = 3306\n# 设置mysql的安装目录\nbasedir=%MYSQL_HOME%\n# 允许最大连接数\nmax_connections=200\n# 服务端使用的字符集默认为8比特编码的latin1字符集\ncharacter-set-server=utf8\n# 创建新表时将使用的默认存储引擎\ndefault-storage-engine=INNODB\n# 设置模式\nsql_mode =STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION\n\ndatadir = D:\\mysql-5.7.27-winx64\\data\n</code></pre> \n<p>注意这里的sql_mode 是配置在[mysqld]下面的<br> 然后就是重启mysql服务</p> \n<h4><a id=\"_44\"></a>思路二</h4> \n<p>我们得承认这个模式是很有意义的。而我们又想实现如下sql的效果</p> \n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">select</span> A<span class=\"token punctuation\">.</span>column1<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">.</span>column2 <span class=\"token keyword\">from</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">as</span> A <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> column1 \n</code></pre> \n<p>首先我们得理解我们写的上面的sql的含义 按column1进行分组 那么结果就是这个组内的cloumn1都是相同的，但是column2却没有限制，也就是说可能相同 也可能不同，那么数据库不知道column2该返回什么值给你</p> \n<p>那么我们有两种方案</p> \n<ol>\n <li>在group by后面追加上column2就可以了，意义相当于按照 由column1和column2拼接成的联合字段进行分组</li>\n</ol> \n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">select</span> A<span class=\"token punctuation\">.</span>column1<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">.</span>column2 <span class=\"token keyword\">from</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">as</span> A <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> column1 <span class=\"token punctuation\">,</span> column2\n</code></pre> \n<ol start=\"2\">\n <li>或者在内查询里只查询分组的字段, 各位可以参考如下形式</li>\n</ol> \n<pre><code class=\"prism language-sql\"><span class=\"token keyword\">SELECT</span> A<span class=\"token punctuation\">.</span>column1<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">.</span>column2 <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">TABLE</span> A <span class=\"token keyword\">JOIN</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">SELECT</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> id<span class=\"token punctuation\">,</span> column1 <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">TABLE</span> b <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> column_1 <span class=\"token punctuation\">)</span> C <span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span>column1 <span class=\"token operator\">=</span> C<span class=\"token punctuation\">.</span>column1 <span class=\"token operator\">and</span> C<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> A<span class=\"token punctuation\">.</span>id\n</code></pre> \n<p>以上是我的一些经验 如果不对 还请留言告知</p>', '问题描述\n----\n\n![在](https://img-blog.csdnimg.cn/20190919171306212.png)  \n**报错** 如上图 在mysql 5.7版本下可能会报如下错误\n\n> Error Code: 1055. Expression #3 of SELECT list is not in GROUP BY clause and contains nonaggregated column ‘×××’ which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql\\_mode=only\\_full\\_group\\_by\n\n**原因** 是在5.7下mysql的model默认为\n\n> ONLY\\_FULL\\_GROUP\\_BY\n\n**含义** sql中select后面的字段必须出现在group by后面，或者被聚合函数包裹，不然会抛出上面的错误 如以下sql\n\n    select A.column1, A.column2 from table as A group by column1 //会因为ONLY_FULL_GROUP_BY的缘故抛出上面错误\n    \n\n问题解决\n----\n\n#### 思路一\n\n既然是这个模式限制的问题 我们可以修改该模式，找到配置文件 修改配置即可。\n\n    vim /etc/mysql/my.cnf\n    \n\n文件名如上所示，但是地址可能得看具体环境了\n\n    [mysql]\n    # 设置mysql客户端默认字符集\n    default-character-set=utf8 \n    [mysqld]\n    #设置3306端口\n    port = 3306\n    # 设置mysql的安装目录\n    basedir=%MYSQL_HOME%\n    # 允许最大连接数\n    max_connections=200\n    # 服务端使用的字符集默认为8比特编码的latin1字符集\n    character-set-server=utf8\n    # 创建新表时将使用的默认存储引擎\n    default-storage-engine=INNODB\n    # 设置模式\n    sql_mode =STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION\n    \n    datadir = D:\\mysql-5.7.27-winx64\\data\n    \n\n注意这里的sql\\_mode 是配置在\\[mysqld\\]下面的  \n然后就是重启mysql服务\n\n#### 思路二\n\n我们得承认这个模式是很有意义的。而我们又想实现如下sql的效果\n\n    select A.column1, A.column2 from table as A group by column1 \n    \n\n首先我们得理解我们写的上面的sql的含义 按column1进行分组 那么结果就是这个组内的cloumn1都是相同的，但是column2却没有限制，也就是说可能相同 也可能不同，那么数据库不知道column2该返回什么值给你\n\n那么我们有两种方案\n\n1.  在group by后面追加上column2就可以了，意义相当于按照 由column1和column2拼接成的联合字段进行分组\n\n    select A.column1, A.column2 from table as A group by column1 , column2\n    \n\n2.  或者在内查询里只查询分组的字段, 各位可以参考如下形式\n\n    SELECT A.column1, A.column2 FROM TABLE A JOIN ( SELECT max(id) id, column1 FROM TABLE b GROUP BY column_1 ) C ON A.column1 = C.column1 and C.id = A.id\n    \n\n以上是我的一些经验 如果不对 还请留言告知', '问题描述\n----\n\n![在](/articleFile/bca/uploadImg/20210812/1425750928589459456-fbveppf6.png)  \n**报错** 如上图 在mysql 5.7版本下可能会报如下错误\n\n> Error Code: 1055. Expression #3 of SELECT list is not in GROUP BY clause and contains nonaggregated column ‘×××’ which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql\\_mode=only\\_full\\_group\\_by\n\n**原因** 是在5.7下mysql的model默认为\n\n> ONLY\\_FULL\\_GROUP\\_BY\n\n**含义** sql中select后面的字段必须出现在group by后面，或者被聚合函数包裹，不然会抛出上面的错误 如以下sql\n\n    select A.column1, A.column2 from table as A group by column1 //会因为ONLY_FULL_GROUP_BY的缘故抛出上面错误\n    \n\n问题解决\n----\n\n#### 思路一\n\n既然是这个模式限制的问题 我们可以修改该模式，找到配置文件 修改配置即可。\n\n    vim /etc/mysql/my.cnf\n    \n\n文件名如上所示，但是地址可能得看具体环境了\n\n    [mysql]\n    # 设置mysql客户端默认字符集\n    default-character-set=utf8 \n    [mysqld]\n    #设置3306端口\n    port = 3306\n    # 设置mysql的安装目录\n    basedir=%MYSQL_HOME%\n    # 允许最大连接数\n    max_connections=200\n    # 服务端使用的字符集默认为8比特编码的latin1字符集\n    character-set-server=utf8\n    # 创建新表时将使用的默认存储引擎\n    default-storage-engine=INNODB\n    # 设置模式\n    sql_mode =STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION\n    \n    datadir = D:\\mysql-5.7.27-winx64\\data\n    \n\n注意这里的sql\\_mode 是配置在\\[mysqld\\]下面的  \n然后就是重启mysql服务\n\n#### 思路二\n\n我们得承认这个模式是很有意义的。而我们又想实现如下sql的效果\n\n    select A.column1, A.column2 from table as A group by column1 \n    \n\n首先我们得理解我们写的上面的sql的含义 按column1进行分组 那么结果就是这个组内的cloumn1都是相同的，但是column2却没有限制，也就是说可能相同 也可能不同，那么数据库不知道column2该返回什么值给你\n\n那么我们有两种方案\n\n1.  在group by后面追加上column2就可以了，意义相当于按照 由column1和column2拼接成的联合字段进行分组\n\n    select A.column1, A.column2 from table as A group by column1 , column2\n    \n\n2.  或者在内查询里只查询分组的字段, 各位可以参考如下形式\n\n    SELECT A.column1, A.column2 FROM TABLE A JOIN ( SELECT max(id) id, column1 FROM TABLE b GROUP BY column_1 ) C ON A.column1 = C.column1 and C.id = A.id\n    \n\n以上是我的一些经验 如果不对 还请留言告知', '2019-09-19 17:26:17', '量子玫瑰', '2021-08-12 17:28:05', '2019-09-19 17:26:17', NULL);
INSERT INTO `t_article_6` VALUES (1426084453729570816, '', NULL, 'Java Stream', '44af618dfb5d', 'https://www.jianshu.com/p/44af618dfb5d', 6, '一、什么是Stream? Java Stream函数式编程接口最初是在Java 8中引入的，并且与lambda一起成为Java开发的里程碑式的功能特性，它极大的方便了开放人员处理集合类数据的效率。从笔者之前看过的调查文章显示，绝大部分的开发者使用的JDK版本是java 8，其中Java Stream和lambda功不可没。 Java Stream就是一个数据流经的管道，并且在管道中对数据进行操作，然后流入下一个管道。 管道的功能包括：Filter（过滤）、Map(映射)、sort(排序）等，集合数据通过Java Stream管道处理之后，转化为另一组集合或数据输出。 Stream流可以分两种 顺序流 : 按照顺序对集合中的元素进行处理 并行流 : 使用多线程同时对集合中多个元素进行处理 在使用并行流的时候就要注意线程安全的问题 元素流在管道中经过中间操作（intermediate operation）的处理，最后由终端操作 (terminal operation) 得到前面处理的结果。 中间操作(intermediate operation): 中间操作会产生另一个流 ,( 流是一种惰', '一、什么是Stream? Java Stream函数式编程接口最初是在Java 8中引入的，并且与lambda一起成为Java开发的里程碑式的功能特性，它极大的方便了开放人员处理集合类数据的效率。从笔者之前看过的调查文章显示，绝大部分的开发者使用的JDK版本是java 8，其中Java Stream和lambda功不可没。 Java Stream就是一个数据流经的管道，并且在管道中对数据进行操作，然后流入下一个管道。 管道的功能包括：Filter（过滤）、Map(映射)、sort(排序）等，集合数据通过Java Stream管道处理之后，转化为另一组集合或数据输出。 Stream流可以分两种 顺序流 : 按照顺序对集合中的元素进行处理 并行流 : 使用多线程同时对集合中多个元素进行处理 在使用并行流的时候就要注意线程安全的问题 元素流在管道中经过中间操作（intermediate operation）的处理，最后由终端操作 (terminal operation) 得到前面处理的结果。 中间操作(intermediate operation): 中间操作会产生另一个流 ,( 流是一种惰性操作，所有对源数据的计算只在终止操作被初始化的时候才会执行), 而且中间操作还分无状态操作和有状态操作两种 无状态操作 : 在处理流中的元素时，会对当前的元素进行单独处理。 (例如:过滤操作) 有状态操作 : 某个元素的处理可能依赖于其他元素.( 例如:查找最小值，最大值，和排序 ) 终止操作 (terminal operation):消费 Stream 流，并且会产生一个结果 . 如果一个 Stream 流被消费过了，那它就不能被重用的。 Stream.jpg 中间操作(intermediate operation) 包括 map (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 sequential、 unordered等. 终止操作 (terminal operation) 包括 forEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 iterator等 二、转换方式 数组 String[] array = {\"Monkey\", \"Lion\", \"Giraffe\", \"Lemur\"};\nStream<String> nameStrs2 = Stream.of(array);\n\nStream<String> nameStrs3 = Stream.of(\"Monkey\", \"Lion\", \"Giraffe\", \"Lemur\");\n 集合 List<String> list = Arrays.asList(\"Monkey\", \"Lion\", \"Giraffe\", \"Lemur\");\nStream<String> streamFromList = list.stream();\n\nSet<String> set = new HashSet<>(list);\nStream<String> streamFromSet = set.stream();\n 文本文件 通过Files.lines方法将文本文件转换为管道流，下图中的Paths.get()方法作用就是获取文件，是Java NIO的API 也就是说：我们可以很方便的使用Java Stream加载文本文件，然后逐行的对文件内容进行处理 Stream<String> lines = Files.lines(Paths.get(\"file.txt\"));\n 三、简单使用 List<String> names = Arrays.asList(\"Monkey\", \"Lion\", \"Giraffe\",\"Lemur\",\"Lion\",\"Liu\",\"LiLi\");\n\nList<String> list = names.stream()\n    .filter(s -> s.startsWith(\"L\"))\n    .map(String::toUpperCase)\n    .sorted(Comparator.reverseOrder())\n    .distinct()\n    .skip(1)\n    .limit(2)\n    .collect(toList());\nSystem.out.println(list);\n\n结果:[LION, LILI]\n 首先，我们使用Stream()函数，将一个List转换为管道流 调用filter函数过滤数组元素，过滤方法使用lambda表达式，以L开头的元素返回true被保留，其他的List元素被过滤掉 然后调用Map函数对管道流中每个元素进行处理，字母全部转换为大写 然后调用sort函数，对管道流中数据进行排序(默认升序) 然后调用distinct函数,对管道流中数据进行去重 然后调用skip函数,跳过第一个元素 然后调用limit函数,取前两个元素 最后调用collect函数toList，将管道流转换为List返回 匹配 anyMatch()，只要有一个元素匹配传入的条件，就返回 true。 allMatch()，只有有一个元素不匹配传入的条件，就返回 false；如果全部匹配，则返回 true。 noneMatch()，只要有一个元素匹配传入的条件，就返回 false；如果全部匹配，则返回 true。 List<String> list = new ArrayList<>();\n        list.add(\"周杰伦\");\n        list.add(\"王力宏\");\n        list.add(\"陶喆\");\n        list.add(\"林俊杰\");\n\nboolean  anyMatchFlag = list.stream().anyMatch(element -> element.contains(\"王\"));//true\nboolean  allMatchFlag = list.stream().allMatch(element -> element.length() > 2);//false\nboolean  noneMatchFlag = list.stream().noneMatch(element -> element.endsWith(\"沉\"));//true\n 组合 reduce() 方法的主要作用是把 Stream 中的元素组合起来，它有两种用法： Optional reduce(BinaryOperator accumulator) 没有起始值，只有一个参数，就是运算规则，此时返回 Optional。 T reduce(T identity, BinaryOperator accumulator) 有起始值，有运算规则，两个参数，此时返回的类型和起始值类型一致。 Integer[] ints = {0, 1, 2, 3};\nList<Integer> list = Arrays.asList(ints);\n\nOptional<Integer> optional = list.stream().reduce((a, b) -> a + b);\nOptional<Integer> optional1 = list.stream().reduce(Integer::sum);\nSystem.out.println(optional.orElse(0));//6\nSystem.out.println(optional1.orElse(0));//6\n\nint reduce = list.stream().reduce(6, (a, b) -> a + b);//12\nint reduce1 = list.stream().reduce(6, Integer::sum);//12\n Collect Collect是一个非常有用的终端操作，以流的元素转变成一种不同的结果，例如一个List，Set或Map。Collect接受Collector包含四种不同操作的操作：供应商，累加器，组合器和修整器。这听起来非常复杂，但是Java 8通过Collectors类支持各种内置收集器。因此，对于最常见的操作，您不必自己实现收集器。 将所有人连接成一个字符串 List<Person> persons =\nArrays.asList(\n    new Person(\"Max\", 18),\n    new Person(\"Peter\", 23),\n    new Person(\"Pamela\", 23),\n    new Person(\"David\", 12));\n\nString phrase = persons\n    .stream()\n    .filter(p -> p.age >= 18)\n    .map(p -> p.name)\n    .collect(Collectors.joining(\" and \", \"In Germany \", \" are of legal age.\"));\n\nSystem.out.println(phrase);//In Germany Max and Peter and Pamela are of legal age.\n\nCollectors 还包括\nsummarizingInt 汇总收集器将返回一个特殊的内置摘要统计信息对象\naveragingInt 平均值\ngroupingBy 分组 等\n 映射 ToMap 指定如何映射键和值。请记住，映射的键必须是唯一的，否则抛出一个IllegalStateException。您可以选择将合并函数作为附加参数传递以绕过异常： Map<Integer, String> map = persons\n    .stream()\n    .collect(Collectors.toMap(\n    p -> p.age,\n    p -> p.name,\n    (name1, name2) -> name1 + \";\" + name2));\n\nSystem.out.println(map);//{18=Max, 23=Peter;Pamela, 12=David}\n 构建Collect 希望将流的所有人转换为单个字符串，该字符串由|管道字符分隔的大写字母组成。为了实现这一目标，我们创建了一个新的Collector.of()。 Collector<Person, StringJoiner, String> personNameCollector =\n    Collector.of(\n    () -> new StringJoiner(\" | \"),          // supplier\n    (j, p) -> j.add(p.name.toUpperCase()),  // accumulator\n    StringJoiner::merge,                    // combiner\n    StringJoiner::toString);                // finisher\n\nString names = persons\n    .stream()\n    .collect(personNameCollector);\n\nSystem.out.println(names);// MAX | PETER | PAMELA | DAVID\n 供应商最初使用适当的分隔符构造这样的StringJoiner。累加器用于将每个人的大写名称添加到StringJoiner。组合器知道如何将两个StringJoiners合并为一个。在最后一步中，整理器从StringJoiner构造所需的String。 FlatMap Map有点受限，因为每个对象只能映射到另一个对象。但是如果我们想要将一个对象转换为多个其他对象或者根本不转换它们呢？这是flatMap救援的地方。 FlatMap将流的每个元素转换为其他对象的流。因此，每个对象将被转换为由流支持的零个，一个或多个其他对象。然后将这些流的内容放入返回flatMap操作流中。 class Foo {\n    String name;\n    List<Bar> bars = new ArrayList<>();\n\n    Foo(String name) {\n        this.name = name;\n    }\n}\n\nclass Bar {\n    String name;\n\n    Bar(String name) {\n        this.name = name;\n    }\n}\n 利用有关流的知识来实例化几个对象 List<Foo> foos = new ArrayList<>();\n\n// create foos\nIntStream\n    .range(1, 4)\n    .forEach(i -> foos.add(new Foo(\"Foo\" + i)));\n\n// create bars\nfoos.forEach(f ->\n    IntStream\n        .range(1, 4)\n        .forEach(i -> f.bars.add(new Bar(\"Bar\" + i + \" <- \" + f.name))));\n 现在我们列出了三个foos，每个foos由三个数据组成。 FlatMap接受一个必须返回对象流的函数。所以为了解决每个foo的bar对象，我们只传递相应的函数： foos.stream()\n    .flatMap(f -> f.bars.stream())\n    .forEach(b -> System.out.println(b.name));\n 输出 Bar1 <- Foo1\nBar2 <- Foo1\nBar3 <- Foo1\nBar1 <- Foo2\nBar2 <- Foo2\nBar3 <- Foo2\nBar1 <- Foo3\nBar2 <- Foo3\nBar3 <- Foo3\n 成功将三个foo对象的流转换为九个bar对象的流。 上面的代码示例可以简化为流操作的单个管道： IntStream.range(1, 4)\n    .mapToObj(i -> new Foo(\"Foo\" + i))\n    .peek(f -> IntStream.range(1, 4)\n        .mapToObj(i -> new Bar(\"Bar\" + i + \" <- \" f.name))\n        .forEach(f.bars::add))\n    .flatMap(f -> f.bars.stream())\n    .forEach(b -> System.out.println(b.name));\n FlatMap也可用于Java 8中引入的Optional类。Optionals flatMap操作返回另一种类型的可选对象。因此，它可以用来防止令人讨厌的null检查。 这样一个高度分层的结构： class Outer {\n    Nested nested;\n}\n\nclass Nested {\n    Inner inner;\n}\n\nclass Inner {\n    String foo;\n}\n 为了解析foo外部实例的内部字符串，您必须添加多个空值检查以防止可能的NullPointerExceptions： Outer outer = new Outer();\nif (outer != null && outer.nested != null && outer.nested.inner != null) {\n    System.out.println(outer.nested.inner.foo);\n}\n 利用选项flatMap操作可以获得相同的行为： Optional.of(new Outer())\n    .flatMap(o -> Optional.ofNullable(o.nested))\n    .flatMap(n -> Optional.ofNullable(n.inner))\n    .flatMap(i -> Optional.ofNullable(i.foo))\n    .ifPresent(System.out::println);', '<h4>一、什么是Stream?</h4> \n<ol> \n <li>Java Stream函数式编程接口最初是在Java 8中引入的，并且与lambda一起成为Java开发的里程碑式的功能特性，它极大的方便了开放人员处理集合类数据的效率。从笔者之前看过的调查文章显示，绝大部分的开发者使用的JDK版本是java 8，其中Java Stream和lambda功不可没。</li> \n <li>Java Stream就是一个数据流经的管道，并且在管道中对数据进行操作，然后流入下一个管道。</li> \n <li>管道的功能包括：Filter（过滤）、Map(映射)、sort(排序）等，集合数据通过Java Stream管道处理之后，转化为另一组集合或数据输出。</li> \n <li>Stream流可以分两种 \n  <ol> \n   <li>顺序流 : 按照顺序对集合中的元素进行处理</li> \n   <li>并行流 : 使用多线程同时对集合中多个元素进行处理 在使用并行流的时候就要注意线程安全的问题</li> \n  </ol> </li> \n <li>元素流在管道中经过中间操作（intermediate operation）的处理，最后由终端操作 (terminal operation) 得到前面处理的结果。 \n  <ol> \n   <li>中间操作(intermediate operation): 中间操作会产生另一个流 ,( 流是一种惰性操作，所有对源数据的计算只在终止操作被初始化的时候才会执行), 而且中间操作还分无状态操作和有状态操作两种 \n    <ul> \n     <li>无状态操作 : 在处理流中的元素时，会对当前的元素进行单独处理。 (例如:过滤操作) \n      <ul> \n       <li>有状态操作 : 某个元素的处理可能依赖于其他元素.( 例如:查找最小值，最大值，和排序 )</li> \n      </ul> </li> \n    </ul> </li> \n   <li>终止操作 (terminal operation):消费 Stream 流，并且会产生一个结果 . 如果一个 Stream 流被消费过了，那它就不能被重用的。</li> \n  </ol> </li> \n</ol> \n<div class=\"image-package\"> \n <div class=\"image-container\" style=\"max-width: 640px; max-height: 342px;\"> \n  <div class=\"image-container-fill\" style=\"padding-bottom: 53.44%;\"></div> \n  <div class=\"image-view\" data-width=\"640\" data-height=\"342\">\n   <img data-original-src=\"//upload-images.jianshu.io/upload_images/23896858-c0527380c986906c.jpg\" data-original-width=\"640\" data-original-height=\"342\" data-original-format=\"image/jpeg\" data-original-filesize=\"30955\">\n  </div> \n </div> \n <div class=\"image-caption\">\n  Stream.jpg\n </div> \n</div> \n<h5>中间操作(intermediate operation)</h5> \n<p>​ 包括 map (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 sequential、 unordered等.</p> \n<h5>终止操作 (terminal operation)</h5> \n<p>​ 包括 forEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 iterator等</p> \n<h4>二、转换方式</h4> \n<h5>数组</h5> \n<pre><code>String[] array = {\"Monkey\", \"Lion\", \"Giraffe\", \"Lemur\"};\nStream&lt;String&gt; nameStrs2 = Stream.of(array);\n\nStream&lt;String&gt; nameStrs3 = Stream.of(\"Monkey\", \"Lion\", \"Giraffe\", \"Lemur\");\n</code></pre> \n<h5>集合</h5> \n<pre><code>List&lt;String&gt; list = Arrays.asList(\"Monkey\", \"Lion\", \"Giraffe\", \"Lemur\");\nStream&lt;String&gt; streamFromList = list.stream();\n\nSet&lt;String&gt; set = new HashSet&lt;&gt;(list);\nStream&lt;String&gt; streamFromSet = set.stream();\n</code></pre> \n<h5>文本文件</h5> \n<p>​ 通过Files.lines方法将文本文件转换为管道流，下图中的Paths.get()方法作用就是获取文件，是Java NIO的API</p> \n<p>也就是说：我们可以很方便的使用Java Stream加载文本文件，然后逐行的对文件内容进行处理</p> \n<pre><code>Stream&lt;String&gt; lines = Files.lines(Paths.get(\"file.txt\"));\n</code></pre> \n<h4>三、简单使用</h4> \n<pre><code>List&lt;String&gt; names = Arrays.asList(\"Monkey\", \"Lion\", \"Giraffe\",\"Lemur\",\"Lion\",\"Liu\",\"LiLi\");\n\nList&lt;String&gt; list = names.stream()\n    .filter(s -&gt; s.startsWith(\"L\"))\n    .map(String::toUpperCase)\n    .sorted(Comparator.reverseOrder())\n    .distinct()\n    .skip(1)\n    .limit(2)\n    .collect(toList());\nSystem.out.println(list);\n\n结果:[LION, LILI]\n</code></pre> \n<ul> \n <li>首先，我们使用Stream()函数，将一个List转换为管道流</li> \n <li>调用filter函数过滤数组元素，过滤方法使用lambda表达式，以L开头的元素返回true被保留，其他的List元素被过滤掉</li> \n <li>然后调用Map函数对管道流中每个元素进行处理，字母全部转换为大写</li> \n <li>然后调用sort函数，对管道流中数据进行排序(默认升序)</li> \n <li>然后调用distinct函数,对管道流中数据进行去重</li> \n <li>然后调用skip函数,跳过第一个元素</li> \n <li>然后调用limit函数,取前两个元素</li> \n <li>最后调用collect函数toList，将管道流转换为List返回</li> \n</ul> \n<h5>匹配</h5> \n<ul> \n <li>anyMatch()，只要有一个元素匹配传入的条件，就返回 true。</li> \n <li>allMatch()，只有有一个元素不匹配传入的条件，就返回 false；如果全部匹配，则返回 true。</li> \n <li>noneMatch()，只要有一个元素匹配传入的条件，就返回 false；如果全部匹配，则返回 true。</li> \n</ul> \n<pre><code>List&lt;String&gt; list = new ArrayList&lt;&gt;();\n        list.add(\"周杰伦\");\n        list.add(\"王力宏\");\n        list.add(\"陶喆\");\n        list.add(\"林俊杰\");\n\nboolean  anyMatchFlag = list.stream().anyMatch(element -&gt; element.contains(\"王\"));//true\nboolean  allMatchFlag = list.stream().allMatch(element -&gt; element.length() &gt; 2);//false\nboolean  noneMatchFlag = list.stream().noneMatch(element -&gt; element.endsWith(\"沉\"));//true\n</code></pre> \n<h5>组合</h5> \n<p><code>reduce()</code> 方法的主要作用是把 Stream 中的元素组合起来，它有两种用法：</p> \n<ul> \n <li><code>Optional reduce(BinaryOperator accumulator)</code></li> \n</ul> \n<p>没有起始值，只有一个参数，就是运算规则，此时返回 <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FPqK0KNVHyoEtZDtp5odocA\" target=\"_blank\">Optional</a>。</p> \n<ul> \n <li><code>T reduce(T identity, BinaryOperator accumulator)</code></li> \n</ul> \n<p>有起始值，有运算规则，两个参数，此时返回的类型和起始值类型一致。</p> \n<pre><code>Integer[] ints = {0, 1, 2, 3};\nList&lt;Integer&gt; list = Arrays.asList(ints);\n\nOptional&lt;Integer&gt; optional = list.stream().reduce((a, b) -&gt; a + b);\nOptional&lt;Integer&gt; optional1 = list.stream().reduce(Integer::sum);\nSystem.out.println(optional.orElse(0));//6\nSystem.out.println(optional1.orElse(0));//6\n\nint reduce = list.stream().reduce(6, (a, b) -&gt; a + b);//12\nint reduce1 = list.stream().reduce(6, Integer::sum);//12\n</code></pre> \n<h5>Collect</h5> \n<p>​ Collect是一个非常有用的终端操作，以流的元素转变成一种不同的结果，例如一个List，Set或Map。Collect接受Collector包含四种不同操作的操作：供应商，累加器，组合器和修整器。这听起来非常复杂，但是Java 8通过Collectors类支持各种内置收集器。因此，对于最常见的操作，您不必自己实现收集器。</p> \n<h6>将所有人连接成一个字符串</h6> \n<pre><code>List&lt;Person&gt; persons =\nArrays.asList(\n    new Person(\"Max\", 18),\n    new Person(\"Peter\", 23),\n    new Person(\"Pamela\", 23),\n    new Person(\"David\", 12));\n\nString phrase = persons\n    .stream()\n    .filter(p -&gt; p.age &gt;= 18)\n    .map(p -&gt; p.name)\n    .collect(Collectors.joining(\" and \", \"In Germany \", \" are of legal age.\"));\n\nSystem.out.println(phrase);//In Germany Max and Peter and Pamela are of legal age.\n\nCollectors 还包括\nsummarizingInt 汇总收集器将返回一个特殊的内置摘要统计信息对象\naveragingInt 平均值\ngroupingBy 分组 等\n</code></pre> \n<h6>映射</h6> \n<p>​ ToMap 指定如何映射键和值。请记住，映射的键必须是唯一的，否则抛出一个IllegalStateException。您可以选择将合并函数作为附加参数传递以绕过异常：</p> \n<pre><code>Map&lt;Integer, String&gt; map = persons\n    .stream()\n    .collect(Collectors.toMap(\n    p -&gt; p.age,\n    p -&gt; p.name,\n    (name1, name2) -&gt; name1 + \";\" + name2));\n\nSystem.out.println(map);//{18=Max, 23=Peter;Pamela, 12=David}\n</code></pre> \n<h6>构建Collect</h6> \n<p>​ 希望将流的所有人转换为单个字符串，该字符串由|管道字符分隔的大写字母组成。为了实现这一目标，我们创建了一个新的<code>Collector.of()</code>。</p> \n<pre><code>Collector&lt;Person, StringJoiner, String&gt; personNameCollector =\n    Collector.of(\n    () -&gt; new StringJoiner(\" | \"),          // supplier\n    (j, p) -&gt; j.add(p.name.toUpperCase()),  // accumulator\n    StringJoiner::merge,                    // combiner\n    StringJoiner::toString);                // finisher\n\nString names = persons\n    .stream()\n    .collect(personNameCollector);\n\nSystem.out.println(names);// MAX | PETER | PAMELA | DAVID\n</code></pre> \n<p>​ 供应商最初使用适当的分隔符构造这样的StringJoiner。累加器用于将每个人的大写名称添加到StringJoiner。组合器知道如何将两个StringJoiners合并为一个。在最后一步中，整理器从StringJoiner构造所需的String。</p> \n<h5>FlatMap</h5> \n<p>​ Map有点受限，因为每个对象只能映射到另一个对象。但是如果我们想要将一个对象转换为多个其他对象或者根本不转换它们呢？这是flatMap救援的地方。</p> \n<p>​ FlatMap将流的每个元素转换为其他对象的流。因此，每个对象将被转换为由流支持的零个，一个或多个其他对象。然后将这些流的内容放入返回flatMap操作流中。</p> \n<pre><code>class Foo {\n    String name;\n    List&lt;Bar&gt; bars = new ArrayList&lt;&gt;();\n\n    Foo(String name) {\n        this.name = name;\n    }\n}\n\nclass Bar {\n    String name;\n\n    Bar(String name) {\n        this.name = name;\n    }\n}\n</code></pre> \n<h6>利用有关流的知识来实例化几个对象</h6> \n<pre><code>List&lt;Foo&gt; foos = new ArrayList&lt;&gt;();\n\n// create foos\nIntStream\n    .range(1, 4)\n    .forEach(i -&gt; foos.add(new Foo(\"Foo\" + i)));\n\n// create bars\nfoos.forEach(f -&gt;\n    IntStream\n        .range(1, 4)\n        .forEach(i -&gt; f.bars.add(new Bar(\"Bar\" + i + \" &lt;- \" + f.name))));\n</code></pre> \n<p>​ 现在我们列出了三个foos，每个foos由三个数据组成。</p> \n<p>​ FlatMap接受一个必须返回对象流的函数。所以为了解决每个foo的bar对象，我们只传递相应的函数：</p> \n<pre><code>foos.stream()\n    .flatMap(f -&gt; f.bars.stream())\n    .forEach(b -&gt; System.out.println(b.name));\n</code></pre> \n<p>​ 输出</p> \n<pre><code>Bar1 &lt;- Foo1\nBar2 &lt;- Foo1\nBar3 &lt;- Foo1\nBar1 &lt;- Foo2\nBar2 &lt;- Foo2\nBar3 &lt;- Foo2\nBar1 &lt;- Foo3\nBar2 &lt;- Foo3\nBar3 &lt;- Foo3\n</code></pre> \n<p>​ 成功将三个foo对象的流转换为九个bar对象的流。</p> \n<p>​ 上面的代码示例可以简化为流操作的单个管道：</p> \n<pre><code>IntStream.range(1, 4)\n    .mapToObj(i -&gt; new Foo(\"Foo\" + i))\n    .peek(f -&gt; IntStream.range(1, 4)\n        .mapToObj(i -&gt; new Bar(\"Bar\" + i + \" &lt;- \" f.name))\n        .forEach(f.bars::add))\n    .flatMap(f -&gt; f.bars.stream())\n    .forEach(b -&gt; System.out.println(b.name));\n</code></pre> \n<p>​ FlatMap也可用于Java 8中引入的Optional类。Optionals flatMap操作返回另一种类型的可选对象。因此，它可以用来防止令人讨厌的null检查。</p> \n<p>​ 这样一个高度分层的结构：</p> \n<pre><code>class Outer {\n    Nested nested;\n}\n\nclass Nested {\n    Inner inner;\n}\n\nclass Inner {\n    String foo;\n}\n</code></pre> \n<p>​ 为了解析foo外部实例的内部字符串，您必须添加多个空值检查以防止可能的NullPointerExceptions：</p> \n<pre><code>Outer outer = new Outer();\nif (outer != null &amp;&amp; outer.nested != null &amp;&amp; outer.nested.inner != null) {\n    System.out.println(outer.nested.inner.foo);\n}\n</code></pre> \n<p>​ 利用选项flatMap操作可以获得相同的行为：</p> \n<pre><code>Optional.of(new Outer())\n    .flatMap(o -&gt; Optional.ofNullable(o.nested))\n    .flatMap(n -&gt; Optional.ofNullable(n.inner))\n    .flatMap(i -&gt; Optional.ofNullable(i.foo))\n    .ifPresent(System.out::println);\n</code></pre>', '<h4>一、什么是Stream?</h4> \n<ol> \n <li>Java Stream函数式编程接口最初是在Java 8中引入的，并且与lambda一起成为Java开发的里程碑式的功能特性，它极大的方便了开放人员处理集合类数据的效率。从笔者之前看过的调查文章显示，绝大部分的开发者使用的JDK版本是java 8，其中Java Stream和lambda功不可没。</li> \n <li>Java Stream就是一个数据流经的管道，并且在管道中对数据进行操作，然后流入下一个管道。</li> \n <li>管道的功能包括：Filter（过滤）、Map(映射)、sort(排序）等，集合数据通过Java Stream管道处理之后，转化为另一组集合或数据输出。</li> \n <li>Stream流可以分两种 \n  <ol> \n   <li>顺序流 : 按照顺序对集合中的元素进行处理</li> \n   <li>并行流 : 使用多线程同时对集合中多个元素进行处理 在使用并行流的时候就要注意线程安全的问题</li> \n  </ol> </li> \n <li>元素流在管道中经过中间操作（intermediate operation）的处理，最后由终端操作 (terminal operation) 得到前面处理的结果。 \n  <ol> \n   <li>中间操作(intermediate operation): 中间操作会产生另一个流 ,( 流是一种惰性操作，所有对源数据的计算只在终止操作被初始化的时候才会执行), 而且中间操作还分无状态操作和有状态操作两种 \n    <ul> \n     <li>无状态操作 : 在处理流中的元素时，会对当前的元素进行单独处理。 (例如:过滤操作) \n      <ul> \n       <li>有状态操作 : 某个元素的处理可能依赖于其他元素.( 例如:查找最小值，最大值，和排序 )</li> \n      </ul> </li> \n    </ul> </li> \n   <li>终止操作 (terminal operation):消费 Stream 流，并且会产生一个结果 . 如果一个 Stream 流被消费过了，那它就不能被重用的。</li> \n  </ol> </li> \n</ol> \n<div class=\"image-package\"> \n <div class=\"image-container\" style=\"max-width: 640px; max-height: 342px;\"> \n  <div class=\"image-container-fill\" style=\"padding-bottom: 53.44%;\"></div> \n  <div class=\"image-view\" data-width=\"640\" data-height=\"342\">\n   <img data-original-src=\"/articleFile/bca/uploadImg/20210813/1426084453729570816-pj7w6zwp.jpg\" data-original-width=\"640\" data-original-height=\"342\" data-original-format=\"image/jpeg\" data-original-filesize=\"30955\">\n  </div> \n </div> \n <div class=\"image-caption\">\n  Stream.jpg\n </div> \n</div> \n<h5>中间操作(intermediate operation)</h5> \n<p>​ 包括 map (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 sequential、 unordered等.</p> \n<h5>终止操作 (terminal operation)</h5> \n<p>​ 包括 forEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 iterator等</p> \n<h4>二、转换方式</h4> \n<h5>数组</h5> \n<pre><code>String[] array = {\"Monkey\", \"Lion\", \"Giraffe\", \"Lemur\"};\nStream&lt;String&gt; nameStrs2 = Stream.of(array);\n\nStream&lt;String&gt; nameStrs3 = Stream.of(\"Monkey\", \"Lion\", \"Giraffe\", \"Lemur\");\n</code></pre> \n<h5>集合</h5> \n<pre><code>List&lt;String&gt; list = Arrays.asList(\"Monkey\", \"Lion\", \"Giraffe\", \"Lemur\");\nStream&lt;String&gt; streamFromList = list.stream();\n\nSet&lt;String&gt; set = new HashSet&lt;&gt;(list);\nStream&lt;String&gt; streamFromSet = set.stream();\n</code></pre> \n<h5>文本文件</h5> \n<p>​ 通过Files.lines方法将文本文件转换为管道流，下图中的Paths.get()方法作用就是获取文件，是Java NIO的API</p> \n<p>也就是说：我们可以很方便的使用Java Stream加载文本文件，然后逐行的对文件内容进行处理</p> \n<pre><code>Stream&lt;String&gt; lines = Files.lines(Paths.get(\"file.txt\"));\n</code></pre> \n<h4>三、简单使用</h4> \n<pre><code>List&lt;String&gt; names = Arrays.asList(\"Monkey\", \"Lion\", \"Giraffe\",\"Lemur\",\"Lion\",\"Liu\",\"LiLi\");\n\nList&lt;String&gt; list = names.stream()\n    .filter(s -&gt; s.startsWith(\"L\"))\n    .map(String::toUpperCase)\n    .sorted(Comparator.reverseOrder())\n    .distinct()\n    .skip(1)\n    .limit(2)\n    .collect(toList());\nSystem.out.println(list);\n\n结果:[LION, LILI]\n</code></pre> \n<ul> \n <li>首先，我们使用Stream()函数，将一个List转换为管道流</li> \n <li>调用filter函数过滤数组元素，过滤方法使用lambda表达式，以L开头的元素返回true被保留，其他的List元素被过滤掉</li> \n <li>然后调用Map函数对管道流中每个元素进行处理，字母全部转换为大写</li> \n <li>然后调用sort函数，对管道流中数据进行排序(默认升序)</li> \n <li>然后调用distinct函数,对管道流中数据进行去重</li> \n <li>然后调用skip函数,跳过第一个元素</li> \n <li>然后调用limit函数,取前两个元素</li> \n <li>最后调用collect函数toList，将管道流转换为List返回</li> \n</ul> \n<h5>匹配</h5> \n<ul> \n <li>anyMatch()，只要有一个元素匹配传入的条件，就返回 true。</li> \n <li>allMatch()，只有有一个元素不匹配传入的条件，就返回 false；如果全部匹配，则返回 true。</li> \n <li>noneMatch()，只要有一个元素匹配传入的条件，就返回 false；如果全部匹配，则返回 true。</li> \n</ul> \n<pre><code>List&lt;String&gt; list = new ArrayList&lt;&gt;();\n        list.add(\"周杰伦\");\n        list.add(\"王力宏\");\n        list.add(\"陶喆\");\n        list.add(\"林俊杰\");\n\nboolean  anyMatchFlag = list.stream().anyMatch(element -&gt; element.contains(\"王\"));//true\nboolean  allMatchFlag = list.stream().allMatch(element -&gt; element.length() &gt; 2);//false\nboolean  noneMatchFlag = list.stream().noneMatch(element -&gt; element.endsWith(\"沉\"));//true\n</code></pre> \n<h5>组合</h5> \n<p><code>reduce()</code> 方法的主要作用是把 Stream 中的元素组合起来，它有两种用法：</p> \n<ul> \n <li><code>Optional reduce(BinaryOperator accumulator)</code></li> \n</ul> \n<p>没有起始值，只有一个参数，就是运算规则，此时返回 <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FPqK0KNVHyoEtZDtp5odocA\" target=\"_blank\">Optional</a>。</p> \n<ul> \n <li><code>T reduce(T identity, BinaryOperator accumulator)</code></li> \n</ul> \n<p>有起始值，有运算规则，两个参数，此时返回的类型和起始值类型一致。</p> \n<pre><code>Integer[] ints = {0, 1, 2, 3};\nList&lt;Integer&gt; list = Arrays.asList(ints);\n\nOptional&lt;Integer&gt; optional = list.stream().reduce((a, b) -&gt; a + b);\nOptional&lt;Integer&gt; optional1 = list.stream().reduce(Integer::sum);\nSystem.out.println(optional.orElse(0));//6\nSystem.out.println(optional1.orElse(0));//6\n\nint reduce = list.stream().reduce(6, (a, b) -&gt; a + b);//12\nint reduce1 = list.stream().reduce(6, Integer::sum);//12\n</code></pre> \n<h5>Collect</h5> \n<p>​ Collect是一个非常有用的终端操作，以流的元素转变成一种不同的结果，例如一个List，Set或Map。Collect接受Collector包含四种不同操作的操作：供应商，累加器，组合器和修整器。这听起来非常复杂，但是Java 8通过Collectors类支持各种内置收集器。因此，对于最常见的操作，您不必自己实现收集器。</p> \n<h6>将所有人连接成一个字符串</h6> \n<pre><code>List&lt;Person&gt; persons =\nArrays.asList(\n    new Person(\"Max\", 18),\n    new Person(\"Peter\", 23),\n    new Person(\"Pamela\", 23),\n    new Person(\"David\", 12));\n\nString phrase = persons\n    .stream()\n    .filter(p -&gt; p.age &gt;= 18)\n    .map(p -&gt; p.name)\n    .collect(Collectors.joining(\" and \", \"In Germany \", \" are of legal age.\"));\n\nSystem.out.println(phrase);//In Germany Max and Peter and Pamela are of legal age.\n\nCollectors 还包括\nsummarizingInt 汇总收集器将返回一个特殊的内置摘要统计信息对象\naveragingInt 平均值\ngroupingBy 分组 等\n</code></pre> \n<h6>映射</h6> \n<p>​ ToMap 指定如何映射键和值。请记住，映射的键必须是唯一的，否则抛出一个IllegalStateException。您可以选择将合并函数作为附加参数传递以绕过异常：</p> \n<pre><code>Map&lt;Integer, String&gt; map = persons\n    .stream()\n    .collect(Collectors.toMap(\n    p -&gt; p.age,\n    p -&gt; p.name,\n    (name1, name2) -&gt; name1 + \";\" + name2));\n\nSystem.out.println(map);//{18=Max, 23=Peter;Pamela, 12=David}\n</code></pre> \n<h6>构建Collect</h6> \n<p>​ 希望将流的所有人转换为单个字符串，该字符串由|管道字符分隔的大写字母组成。为了实现这一目标，我们创建了一个新的<code>Collector.of()</code>。</p> \n<pre><code>Collector&lt;Person, StringJoiner, String&gt; personNameCollector =\n    Collector.of(\n    () -&gt; new StringJoiner(\" | \"),          // supplier\n    (j, p) -&gt; j.add(p.name.toUpperCase()),  // accumulator\n    StringJoiner::merge,                    // combiner\n    StringJoiner::toString);                // finisher\n\nString names = persons\n    .stream()\n    .collect(personNameCollector);\n\nSystem.out.println(names);// MAX | PETER | PAMELA | DAVID\n</code></pre> \n<p>​ 供应商最初使用适当的分隔符构造这样的StringJoiner。累加器用于将每个人的大写名称添加到StringJoiner。组合器知道如何将两个StringJoiners合并为一个。在最后一步中，整理器从StringJoiner构造所需的String。</p> \n<h5>FlatMap</h5> \n<p>​ Map有点受限，因为每个对象只能映射到另一个对象。但是如果我们想要将一个对象转换为多个其他对象或者根本不转换它们呢？这是flatMap救援的地方。</p> \n<p>​ FlatMap将流的每个元素转换为其他对象的流。因此，每个对象将被转换为由流支持的零个，一个或多个其他对象。然后将这些流的内容放入返回flatMap操作流中。</p> \n<pre><code>class Foo {\n    String name;\n    List&lt;Bar&gt; bars = new ArrayList&lt;&gt;();\n\n    Foo(String name) {\n        this.name = name;\n    }\n}\n\nclass Bar {\n    String name;\n\n    Bar(String name) {\n        this.name = name;\n    }\n}\n</code></pre> \n<h6>利用有关流的知识来实例化几个对象</h6> \n<pre><code>List&lt;Foo&gt; foos = new ArrayList&lt;&gt;();\n\n// create foos\nIntStream\n    .range(1, 4)\n    .forEach(i -&gt; foos.add(new Foo(\"Foo\" + i)));\n\n// create bars\nfoos.forEach(f -&gt;\n    IntStream\n        .range(1, 4)\n        .forEach(i -&gt; f.bars.add(new Bar(\"Bar\" + i + \" &lt;- \" + f.name))));\n</code></pre> \n<p>​ 现在我们列出了三个foos，每个foos由三个数据组成。</p> \n<p>​ FlatMap接受一个必须返回对象流的函数。所以为了解决每个foo的bar对象，我们只传递相应的函数：</p> \n<pre><code>foos.stream()\n    .flatMap(f -&gt; f.bars.stream())\n    .forEach(b -&gt; System.out.println(b.name));\n</code></pre> \n<p>​ 输出</p> \n<pre><code>Bar1 &lt;- Foo1\nBar2 &lt;- Foo1\nBar3 &lt;- Foo1\nBar1 &lt;- Foo2\nBar2 &lt;- Foo2\nBar3 &lt;- Foo2\nBar1 &lt;- Foo3\nBar2 &lt;- Foo3\nBar3 &lt;- Foo3\n</code></pre> \n<p>​ 成功将三个foo对象的流转换为九个bar对象的流。</p> \n<p>​ 上面的代码示例可以简化为流操作的单个管道：</p> \n<pre><code>IntStream.range(1, 4)\n    .mapToObj(i -&gt; new Foo(\"Foo\" + i))\n    .peek(f -&gt; IntStream.range(1, 4)\n        .mapToObj(i -&gt; new Bar(\"Bar\" + i + \" &lt;- \" f.name))\n        .forEach(f.bars::add))\n    .flatMap(f -&gt; f.bars.stream())\n    .forEach(b -&gt; System.out.println(b.name));\n</code></pre> \n<p>​ FlatMap也可用于Java 8中引入的Optional类。Optionals flatMap操作返回另一种类型的可选对象。因此，它可以用来防止令人讨厌的null检查。</p> \n<p>​ 这样一个高度分层的结构：</p> \n<pre><code>class Outer {\n    Nested nested;\n}\n\nclass Nested {\n    Inner inner;\n}\n\nclass Inner {\n    String foo;\n}\n</code></pre> \n<p>​ 为了解析foo外部实例的内部字符串，您必须添加多个空值检查以防止可能的NullPointerExceptions：</p> \n<pre><code>Outer outer = new Outer();\nif (outer != null &amp;&amp; outer.nested != null &amp;&amp; outer.nested.inner != null) {\n    System.out.println(outer.nested.inner.foo);\n}\n</code></pre> \n<p>​ 利用选项flatMap操作可以获得相同的行为：</p> \n<pre><code>Optional.of(new Outer())\n    .flatMap(o -&gt; Optional.ofNullable(o.nested))\n    .flatMap(n -&gt; Optional.ofNullable(n.inner))\n    .flatMap(i -&gt; Optional.ofNullable(i.foo))\n    .ifPresent(System.out::println);\n</code></pre>', '#### 一、什么是Stream?\n\n1.  Java Stream函数式编程接口最初是在Java 8中引入的，并且与lambda一起成为Java开发的里程碑式的功能特性，它极大的方便了开放人员处理集合类数据的效率。从笔者之前看过的调查文章显示，绝大部分的开发者使用的JDK版本是java 8，其中Java Stream和lambda功不可没。\n2.  Java Stream就是一个数据流经的管道，并且在管道中对数据进行操作，然后流入下一个管道。\n3.  管道的功能包括：Filter（过滤）、Map(映射)、sort(排序）等，集合数据通过Java Stream管道处理之后，转化为另一组集合或数据输出。\n4.  Stream流可以分两种\n    1.  顺序流 : 按照顺序对集合中的元素进行处理\n    2.  并行流 : 使用多线程同时对集合中多个元素进行处理 在使用并行流的时候就要注意线程安全的问题\n5.  元素流在管道中经过中间操作（intermediate operation）的处理，最后由终端操作 (terminal operation) 得到前面处理的结果。\n    1.  中间操作(intermediate operation): 中间操作会产生另一个流 ,( 流是一种惰性操作，所有对源数据的计算只在终止操作被初始化的时候才会执行), 而且中间操作还分无状态操作和有状态操作两种\n        *   无状态操作 : 在处理流中的元素时，会对当前的元素进行单独处理。 (例如:过滤操作)\n            *   有状态操作 : 某个元素的处理可能依赖于其他元素.( 例如:查找最小值，最大值，和排序 )\n    2.  终止操作 (terminal operation):消费 Stream 流，并且会产生一个结果 . 如果一个 Stream 流被消费过了，那它就不能被重用的。\n\n![](//upload-images.jianshu.io/upload_images/23896858-c0527380c986906c.jpg)\n\nStream.jpg\n\n##### 中间操作(intermediate operation)\n\n 包括 map (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 sequential、 unordered等.\n\n##### 终止操作 (terminal operation)\n\n 包括 forEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 iterator等\n\n#### 二、转换方式\n\n##### 数组\n\n    String[] array = {\"Monkey\", \"Lion\", \"Giraffe\", \"Lemur\"};\n    Stream<String> nameStrs2 = Stream.of(array);\n    \n    Stream<String> nameStrs3 = Stream.of(\"Monkey\", \"Lion\", \"Giraffe\", \"Lemur\");\n    \n\n##### 集合\n\n    List<String> list = Arrays.asList(\"Monkey\", \"Lion\", \"Giraffe\", \"Lemur\");\n    Stream<String> streamFromList = list.stream();\n    \n    Set<String> set = new HashSet<>(list);\n    Stream<String> streamFromSet = set.stream();\n    \n\n##### 文本文件\n\n 通过Files.lines方法将文本文件转换为管道流，下图中的Paths.get()方法作用就是获取文件，是Java NIO的API\n\n也就是说：我们可以很方便的使用Java Stream加载文本文件，然后逐行的对文件内容进行处理\n\n    Stream<String> lines = Files.lines(Paths.get(\"file.txt\"));\n    \n\n#### 三、简单使用\n\n    List<String> names = Arrays.asList(\"Monkey\", \"Lion\", \"Giraffe\",\"Lemur\",\"Lion\",\"Liu\",\"LiLi\");\n    \n    List<String> list = names.stream()\n        .filter(s -> s.startsWith(\"L\"))\n        .map(String::toUpperCase)\n        .sorted(Comparator.reverseOrder())\n        .distinct()\n        .skip(1)\n        .limit(2)\n        .collect(toList());\n    System.out.println(list);\n    \n    结果:[LION, LILI]\n    \n\n*   首先，我们使用Stream()函数，将一个List转换为管道流\n*   调用filter函数过滤数组元素，过滤方法使用lambda表达式，以L开头的元素返回true被保留，其他的List元素被过滤掉\n*   然后调用Map函数对管道流中每个元素进行处理，字母全部转换为大写\n*   然后调用sort函数，对管道流中数据进行排序(默认升序)\n*   然后调用distinct函数,对管道流中数据进行去重\n*   然后调用skip函数,跳过第一个元素\n*   然后调用limit函数,取前两个元素\n*   最后调用collect函数toList，将管道流转换为List返回\n\n##### 匹配\n\n*   anyMatch()，只要有一个元素匹配传入的条件，就返回 true。\n*   allMatch()，只有有一个元素不匹配传入的条件，就返回 false；如果全部匹配，则返回 true。\n*   noneMatch()，只要有一个元素匹配传入的条件，就返回 false；如果全部匹配，则返回 true。\n\n    List<String> list = new ArrayList<>();\n            list.add(\"周杰伦\");\n            list.add(\"王力宏\");\n            list.add(\"陶喆\");\n            list.add(\"林俊杰\");\n    \n    boolean  anyMatchFlag = list.stream().anyMatch(element -> element.contains(\"王\"));//true\n    boolean  allMatchFlag = list.stream().allMatch(element -> element.length() > 2);//false\n    boolean  noneMatchFlag = list.stream().noneMatch(element -> element.endsWith(\"沉\"));//true\n    \n\n##### 组合\n\n`reduce()` 方法的主要作用是把 Stream 中的元素组合起来，它有两种用法：\n\n*   Optional reduce(BinaryOperator accumulator)\n\n没有起始值，只有一个参数，就是运算规则，此时返回 [Optional](https://links.jianshu.com/go?to=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FPqK0KNVHyoEtZDtp5odocA)。\n\n*   T reduce(T identity, BinaryOperator accumulator)\n\n有起始值，有运算规则，两个参数，此时返回的类型和起始值类型一致。\n\n    Integer[] ints = {0, 1, 2, 3};\n    List<Integer> list = Arrays.asList(ints);\n    \n    Optional<Integer> optional = list.stream().reduce((a, b) -> a + b);\n    Optional<Integer> optional1 = list.stream().reduce(Integer::sum);\n    System.out.println(optional.orElse(0));//6\n    System.out.println(optional1.orElse(0));//6\n    \n    int reduce = list.stream().reduce(6, (a, b) -> a + b);//12\n    int reduce1 = list.stream().reduce(6, Integer::sum);//12\n    \n\n##### Collect\n\n Collect是一个非常有用的终端操作，以流的元素转变成一种不同的结果，例如一个List，Set或Map。Collect接受Collector包含四种不同操作的操作：供应商，累加器，组合器和修整器。这听起来非常复杂，但是Java 8通过Collectors类支持各种内置收集器。因此，对于最常见的操作，您不必自己实现收集器。\n\n###### 将所有人连接成一个字符串\n\n    List<Person> persons =\n    Arrays.asList(\n        new Person(\"Max\", 18),\n        new Person(\"Peter\", 23),\n        new Person(\"Pamela\", 23),\n        new Person(\"David\", 12));\n    \n    String phrase = persons\n        .stream()\n        .filter(p -> p.age >= 18)\n        .map(p -> p.name)\n        .collect(Collectors.joining(\" and \", \"In Germany \", \" are of legal age.\"));\n    \n    System.out.println(phrase);//In Germany Max and Peter and Pamela are of legal age.\n    \n    Collectors 还包括\n    summarizingInt 汇总收集器将返回一个特殊的内置摘要统计信息对象\n    averagingInt 平均值\n    groupingBy 分组 等\n    \n\n###### 映射\n\n ToMap 指定如何映射键和值。请记住，映射的键必须是唯一的，否则抛出一个IllegalStateException。您可以选择将合并函数作为附加参数传递以绕过异常：\n\n    Map<Integer, String> map = persons\n        .stream()\n        .collect(Collectors.toMap(\n        p -> p.age,\n        p -> p.name,\n        (name1, name2) -> name1 + \";\" + name2));\n    \n    System.out.println(map);//{18=Max, 23=Peter;Pamela, 12=David}\n    \n\n###### 构建Collect\n\n 希望将流的所有人转换为单个字符串，该字符串由|管道字符分隔的大写字母组成。为了实现这一目标，我们创建了一个新的`Collector.of()`。\n\n    Collector<Person, StringJoiner, String> personNameCollector =\n        Collector.of(\n        () -> new StringJoiner(\" | \"),          // supplier\n        (j, p) -> j.add(p.name.toUpperCase()),  // accumulator\n        StringJoiner::merge,                    // combiner\n        StringJoiner::toString);                // finisher\n    \n    String names = persons\n        .stream()\n        .collect(personNameCollector);\n    \n    System.out.println(names);// MAX | PETER | PAMELA | DAVID\n    \n\n 供应商最初使用适当的分隔符构造这样的StringJoiner。累加器用于将每个人的大写名称添加到StringJoiner。组合器知道如何将两个StringJoiners合并为一个。在最后一步中，整理器从StringJoiner构造所需的String。\n\n##### FlatMap\n\n Map有点受限，因为每个对象只能映射到另一个对象。但是如果我们想要将一个对象转换为多个其他对象或者根本不转换它们呢？这是flatMap救援的地方。\n\n FlatMap将流的每个元素转换为其他对象的流。因此，每个对象将被转换为由流支持的零个，一个或多个其他对象。然后将这些流的内容放入返回flatMap操作流中。\n\n    class Foo {\n        String name;\n        List<Bar> bars = new ArrayList<>();\n    \n        Foo(String name) {\n            this.name = name;\n        }\n    }\n    \n    class Bar {\n        String name;\n    \n        Bar(String name) {\n            this.name = name;\n        }\n    }\n    \n\n###### 利用有关流的知识来实例化几个对象\n\n    List<Foo> foos = new ArrayList<>();\n    \n    // create foos\n    IntStream\n        .range(1, 4)\n        .forEach(i -> foos.add(new Foo(\"Foo\" + i)));\n    \n    // create bars\n    foos.forEach(f ->\n        IntStream\n            .range(1, 4)\n            .forEach(i -> f.bars.add(new Bar(\"Bar\" + i + \" <- \" + f.name))));\n    \n\n 现在我们列出了三个foos，每个foos由三个数据组成。\n\n FlatMap接受一个必须返回对象流的函数。所以为了解决每个foo的bar对象，我们只传递相应的函数：\n\n    foos.stream()\n        .flatMap(f -> f.bars.stream())\n        .forEach(b -> System.out.println(b.name));\n    \n\n 输出\n\n    Bar1 <- Foo1\n    Bar2 <- Foo1\n    Bar3 <- Foo1\n    Bar1 <- Foo2\n    Bar2 <- Foo2\n    Bar3 <- Foo2\n    Bar1 <- Foo3\n    Bar2 <- Foo3\n    Bar3 <- Foo3\n    \n\n 成功将三个foo对象的流转换为九个bar对象的流。\n\n 上面的代码示例可以简化为流操作的单个管道：\n\n    IntStream.range(1, 4)\n        .mapToObj(i -> new Foo(\"Foo\" + i))\n        .peek(f -> IntStream.range(1, 4)\n            .mapToObj(i -> new Bar(\"Bar\" + i + \" <- \" f.name))\n            .forEach(f.bars::add))\n        .flatMap(f -> f.bars.stream())\n        .forEach(b -> System.out.println(b.name));\n    \n\n FlatMap也可用于Java 8中引入的Optional类。Optionals flatMap操作返回另一种类型的可选对象。因此，它可以用来防止令人讨厌的null检查。\n\n 这样一个高度分层的结构：\n\n    class Outer {\n        Nested nested;\n    }\n    \n    class Nested {\n        Inner inner;\n    }\n    \n    class Inner {\n        String foo;\n    }\n    \n\n 为了解析foo外部实例的内部字符串，您必须添加多个空值检查以防止可能的NullPointerExceptions：\n\n    Outer outer = new Outer();\n    if (outer != null && outer.nested != null && outer.nested.inner != null) {\n        System.out.println(outer.nested.inner.foo);\n    }\n    \n\n 利用选项flatMap操作可以获得相同的行为：\n\n    Optional.of(new Outer())\n        .flatMap(o -> Optional.ofNullable(o.nested))\n        .flatMap(n -> Optional.ofNullable(n.inner))\n        .flatMap(i -> Optional.ofNullable(i.foo))\n        .ifPresent(System.out::println);', '#### 一、什么是Stream?\n\n1.  Java Stream函数式编程接口最初是在Java 8中引入的，并且与lambda一起成为Java开发的里程碑式的功能特性，它极大的方便了开放人员处理集合类数据的效率。从笔者之前看过的调查文章显示，绝大部分的开发者使用的JDK版本是java 8，其中Java Stream和lambda功不可没。\n2.  Java Stream就是一个数据流经的管道，并且在管道中对数据进行操作，然后流入下一个管道。\n3.  管道的功能包括：Filter（过滤）、Map(映射)、sort(排序）等，集合数据通过Java Stream管道处理之后，转化为另一组集合或数据输出。\n4.  Stream流可以分两种\n    1.  顺序流 : 按照顺序对集合中的元素进行处理\n    2.  并行流 : 使用多线程同时对集合中多个元素进行处理 在使用并行流的时候就要注意线程安全的问题\n5.  元素流在管道中经过中间操作（intermediate operation）的处理，最后由终端操作 (terminal operation) 得到前面处理的结果。\n    1.  中间操作(intermediate operation): 中间操作会产生另一个流 ,( 流是一种惰性操作，所有对源数据的计算只在终止操作被初始化的时候才会执行), 而且中间操作还分无状态操作和有状态操作两种\n        *   无状态操作 : 在处理流中的元素时，会对当前的元素进行单独处理。 (例如:过滤操作)\n            *   有状态操作 : 某个元素的处理可能依赖于其他元素.( 例如:查找最小值，最大值，和排序 )\n    2.  终止操作 (terminal operation):消费 Stream 流，并且会产生一个结果 . 如果一个 Stream 流被消费过了，那它就不能被重用的。\n\n![](/articleFile/bca/uploadImg/20210813/1426084453729570816-pj7w6zwp.jpg)\n\nStream.jpg\n\n##### 中间操作(intermediate operation)\n\n 包括 map (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 sequential、 unordered等.\n\n##### 终止操作 (terminal operation)\n\n 包括 forEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 iterator等\n\n#### 二、转换方式\n\n##### 数组\n\n    String[] array = {\"Monkey\", \"Lion\", \"Giraffe\", \"Lemur\"};\n    Stream<String> nameStrs2 = Stream.of(array);\n    \n    Stream<String> nameStrs3 = Stream.of(\"Monkey\", \"Lion\", \"Giraffe\", \"Lemur\");\n    \n\n##### 集合\n\n    List<String> list = Arrays.asList(\"Monkey\", \"Lion\", \"Giraffe\", \"Lemur\");\n    Stream<String> streamFromList = list.stream();\n    \n    Set<String> set = new HashSet<>(list);\n    Stream<String> streamFromSet = set.stream();\n    \n\n##### 文本文件\n\n 通过Files.lines方法将文本文件转换为管道流，下图中的Paths.get()方法作用就是获取文件，是Java NIO的API\n\n也就是说：我们可以很方便的使用Java Stream加载文本文件，然后逐行的对文件内容进行处理\n\n    Stream<String> lines = Files.lines(Paths.get(\"file.txt\"));\n    \n\n#### 三、简单使用\n\n    List<String> names = Arrays.asList(\"Monkey\", \"Lion\", \"Giraffe\",\"Lemur\",\"Lion\",\"Liu\",\"LiLi\");\n    \n    List<String> list = names.stream()\n        .filter(s -> s.startsWith(\"L\"))\n        .map(String::toUpperCase)\n        .sorted(Comparator.reverseOrder())\n        .distinct()\n        .skip(1)\n        .limit(2)\n        .collect(toList());\n    System.out.println(list);\n    \n    结果:[LION, LILI]\n    \n\n*   首先，我们使用Stream()函数，将一个List转换为管道流\n*   调用filter函数过滤数组元素，过滤方法使用lambda表达式，以L开头的元素返回true被保留，其他的List元素被过滤掉\n*   然后调用Map函数对管道流中每个元素进行处理，字母全部转换为大写\n*   然后调用sort函数，对管道流中数据进行排序(默认升序)\n*   然后调用distinct函数,对管道流中数据进行去重\n*   然后调用skip函数,跳过第一个元素\n*   然后调用limit函数,取前两个元素\n*   最后调用collect函数toList，将管道流转换为List返回\n\n##### 匹配\n\n*   anyMatch()，只要有一个元素匹配传入的条件，就返回 true。\n*   allMatch()，只有有一个元素不匹配传入的条件，就返回 false；如果全部匹配，则返回 true。\n*   noneMatch()，只要有一个元素匹配传入的条件，就返回 false；如果全部匹配，则返回 true。\n\n    List<String> list = new ArrayList<>();\n            list.add(\"周杰伦\");\n            list.add(\"王力宏\");\n            list.add(\"陶喆\");\n            list.add(\"林俊杰\");\n    \n    boolean  anyMatchFlag = list.stream().anyMatch(element -> element.contains(\"王\"));//true\n    boolean  allMatchFlag = list.stream().allMatch(element -> element.length() > 2);//false\n    boolean  noneMatchFlag = list.stream().noneMatch(element -> element.endsWith(\"沉\"));//true\n    \n\n##### 组合\n\n`reduce()` 方法的主要作用是把 Stream 中的元素组合起来，它有两种用法：\n\n*   Optional reduce(BinaryOperator accumulator)\n\n没有起始值，只有一个参数，就是运算规则，此时返回 [Optional](https://links.jianshu.com/go?to=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FPqK0KNVHyoEtZDtp5odocA)。\n\n*   T reduce(T identity, BinaryOperator accumulator)\n\n有起始值，有运算规则，两个参数，此时返回的类型和起始值类型一致。\n\n    Integer[] ints = {0, 1, 2, 3};\n    List<Integer> list = Arrays.asList(ints);\n    \n    Optional<Integer> optional = list.stream().reduce((a, b) -> a + b);\n    Optional<Integer> optional1 = list.stream().reduce(Integer::sum);\n    System.out.println(optional.orElse(0));//6\n    System.out.println(optional1.orElse(0));//6\n    \n    int reduce = list.stream().reduce(6, (a, b) -> a + b);//12\n    int reduce1 = list.stream().reduce(6, Integer::sum);//12\n    \n\n##### Collect\n\n Collect是一个非常有用的终端操作，以流的元素转变成一种不同的结果，例如一个List，Set或Map。Collect接受Collector包含四种不同操作的操作：供应商，累加器，组合器和修整器。这听起来非常复杂，但是Java 8通过Collectors类支持各种内置收集器。因此，对于最常见的操作，您不必自己实现收集器。\n\n###### 将所有人连接成一个字符串\n\n    List<Person> persons =\n    Arrays.asList(\n        new Person(\"Max\", 18),\n        new Person(\"Peter\", 23),\n        new Person(\"Pamela\", 23),\n        new Person(\"David\", 12));\n    \n    String phrase = persons\n        .stream()\n        .filter(p -> p.age >= 18)\n        .map(p -> p.name)\n        .collect(Collectors.joining(\" and \", \"In Germany \", \" are of legal age.\"));\n    \n    System.out.println(phrase);//In Germany Max and Peter and Pamela are of legal age.\n    \n    Collectors 还包括\n    summarizingInt 汇总收集器将返回一个特殊的内置摘要统计信息对象\n    averagingInt 平均值\n    groupingBy 分组 等\n    \n\n###### 映射\n\n ToMap 指定如何映射键和值。请记住，映射的键必须是唯一的，否则抛出一个IllegalStateException。您可以选择将合并函数作为附加参数传递以绕过异常：\n\n    Map<Integer, String> map = persons\n        .stream()\n        .collect(Collectors.toMap(\n        p -> p.age,\n        p -> p.name,\n        (name1, name2) -> name1 + \";\" + name2));\n    \n    System.out.println(map);//{18=Max, 23=Peter;Pamela, 12=David}\n    \n\n###### 构建Collect\n\n 希望将流的所有人转换为单个字符串，该字符串由|管道字符分隔的大写字母组成。为了实现这一目标，我们创建了一个新的`Collector.of()`。\n\n    Collector<Person, StringJoiner, String> personNameCollector =\n        Collector.of(\n        () -> new StringJoiner(\" | \"),          // supplier\n        (j, p) -> j.add(p.name.toUpperCase()),  // accumulator\n        StringJoiner::merge,                    // combiner\n        StringJoiner::toString);                // finisher\n    \n    String names = persons\n        .stream()\n        .collect(personNameCollector);\n    \n    System.out.println(names);// MAX | PETER | PAMELA | DAVID\n    \n\n 供应商最初使用适当的分隔符构造这样的StringJoiner。累加器用于将每个人的大写名称添加到StringJoiner。组合器知道如何将两个StringJoiners合并为一个。在最后一步中，整理器从StringJoiner构造所需的String。\n\n##### FlatMap\n\n Map有点受限，因为每个对象只能映射到另一个对象。但是如果我们想要将一个对象转换为多个其他对象或者根本不转换它们呢？这是flatMap救援的地方。\n\n FlatMap将流的每个元素转换为其他对象的流。因此，每个对象将被转换为由流支持的零个，一个或多个其他对象。然后将这些流的内容放入返回flatMap操作流中。\n\n    class Foo {\n        String name;\n        List<Bar> bars = new ArrayList<>();\n    \n        Foo(String name) {\n            this.name = name;\n        }\n    }\n    \n    class Bar {\n        String name;\n    \n        Bar(String name) {\n            this.name = name;\n        }\n    }\n    \n\n###### 利用有关流的知识来实例化几个对象\n\n    List<Foo> foos = new ArrayList<>();\n    \n    // create foos\n    IntStream\n        .range(1, 4)\n        .forEach(i -> foos.add(new Foo(\"Foo\" + i)));\n    \n    // create bars\n    foos.forEach(f ->\n        IntStream\n            .range(1, 4)\n            .forEach(i -> f.bars.add(new Bar(\"Bar\" + i + \" <- \" + f.name))));\n    \n\n 现在我们列出了三个foos，每个foos由三个数据组成。\n\n FlatMap接受一个必须返回对象流的函数。所以为了解决每个foo的bar对象，我们只传递相应的函数：\n\n    foos.stream()\n        .flatMap(f -> f.bars.stream())\n        .forEach(b -> System.out.println(b.name));\n    \n\n 输出\n\n    Bar1 <- Foo1\n    Bar2 <- Foo1\n    Bar3 <- Foo1\n    Bar1 <- Foo2\n    Bar2 <- Foo2\n    Bar3 <- Foo2\n    Bar1 <- Foo3\n    Bar2 <- Foo3\n    Bar3 <- Foo3\n    \n\n 成功将三个foo对象的流转换为九个bar对象的流。\n\n 上面的代码示例可以简化为流操作的单个管道：\n\n    IntStream.range(1, 4)\n        .mapToObj(i -> new Foo(\"Foo\" + i))\n        .peek(f -> IntStream.range(1, 4)\n            .mapToObj(i -> new Bar(\"Bar\" + i + \" <- \" f.name))\n            .forEach(f.bars::add))\n        .flatMap(f -> f.bars.stream())\n        .forEach(b -> System.out.println(b.name));\n    \n\n FlatMap也可用于Java 8中引入的Optional类。Optionals flatMap操作返回另一种类型的可选对象。因此，它可以用来防止令人讨厌的null检查。\n\n 这样一个高度分层的结构：\n\n    class Outer {\n        Nested nested;\n    }\n    \n    class Nested {\n        Inner inner;\n    }\n    \n    class Inner {\n        String foo;\n    }\n    \n\n 为了解析foo外部实例的内部字符串，您必须添加多个空值检查以防止可能的NullPointerExceptions：\n\n    Outer outer = new Outer();\n    if (outer != null && outer.nested != null && outer.nested.inner != null) {\n        System.out.println(outer.nested.inner.foo);\n    }\n    \n\n 利用选项flatMap操作可以获得相同的行为：\n\n    Optional.of(new Outer())\n        .flatMap(o -> Optional.ofNullable(o.nested))\n        .flatMap(n -> Optional.ofNullable(n.inner))\n        .flatMap(i -> Optional.ofNullable(i.foo))\n        .ifPresent(System.out::println);', '2020-07-16 14:37:33', 'BrainlessLiLi', '2021-08-13 15:33:29', '2020-07-16 14:37:33', NULL);

-- ----------------------------
-- Table structure for t_article_7
-- ----------------------------
DROP TABLE IF EXISTS `t_article_7`;
CREATE TABLE `t_article_7`  (
  `article_id` bigint(20) NOT NULL,
  `tag` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '标签,使用\',\'拼接',
  `cover` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '封面,使用“,”拼接',
  `title` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '标题',
  `original_id` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '原始id',
  `original_url` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '原始地址',
  `original_type` smallint(3) NULL DEFAULT NULL COMMENT '类型',
  `digest` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '摘要',
  `text_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '原文字内容',
  `original_html_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '原html内容',
  `html_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '已处理图片的html内容',
  `original_md_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '未处理图片的md',
  `md_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '已处理图片的md',
  `original_date_str` varchar(25) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '发布时间',
  `original_author` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '作者',
  `create_date` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `original_date` datetime(0) NULL DEFAULT NULL COMMENT '发布时间',
  `topic_id` int(11) NULL DEFAULT NULL COMMENT '主题id',
  PRIMARY KEY (`article_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for t_article_8
-- ----------------------------
DROP TABLE IF EXISTS `t_article_8`;
CREATE TABLE `t_article_8`  (
  `article_id` bigint(20) NOT NULL,
  `tag` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '标签,使用\',\'拼接',
  `cover` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '封面,使用“,”拼接',
  `title` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '标题',
  `original_id` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '原始id',
  `original_url` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '原始地址',
  `original_type` smallint(3) NULL DEFAULT NULL COMMENT '类型',
  `digest` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '摘要',
  `text_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '原文字内容',
  `original_html_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '原html内容',
  `html_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '已处理图片的html内容',
  `original_md_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '未处理图片的md',
  `md_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '已处理图片的md',
  `original_date_str` varchar(25) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '发布时间',
  `original_author` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '作者',
  `create_date` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `original_date` datetime(0) NULL DEFAULT NULL COMMENT '发布时间',
  `topic_id` int(11) NULL DEFAULT NULL COMMENT '主题id',
  PRIMARY KEY (`article_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_article_8
-- ----------------------------
INSERT INTO `t_article_8` VALUES (1425732832109662208, 'Java,yaml,snakeyaml', NULL, '使用SnakeYAML读取yaml配置文件', '55101219', 'https://blog.csdn.net/top_code/article/details/55101219', 2, '很多应用都开始使用YAML作为程序配置文件，关于YAML详细介绍可以参考YAML 1.2 (3rd Edition)，本文使用SnakeYAML来解析YAML。 maven依赖 <dependency>\n    <groupId>org.yaml</groupId>\n    <artifactId>snakeyaml</artifactId>\n    <version>1.17</version>\n</dependency> 示例 sample.yml version: 1.0\nreleased: 2017-02-14\n\n# Connection parameters\nconnection:\n    driverClass: com.mysql.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/db\n    username: root\n    password: 12345\n    poolSize: 5\n\n# Protocols\nprotocols:\n   - http\n   - https\n\n# Developers\ndevelop', '很多应用都开始使用YAML作为程序配置文件，关于YAML详细介绍可以参考YAML 1.2 (3rd Edition)，本文使用SnakeYAML来解析YAML。 maven依赖 <dependency>\n    <groupId>org.yaml</groupId>\n    <artifactId>snakeyaml</artifactId>\n    <version>1.17</version>\n</dependency> 示例 sample.yml version: 1.0\nreleased: 2017-02-14\n\n# Connection parameters\nconnection:\n    driverClass: com.mysql.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/db\n    username: root\n    password: 12345\n    poolSize: 5\n\n# Protocols\nprotocols:\n   - http\n   - https\n\n# Developers\ndevelopers:\n    tom: tom@gmail.com\n    bob: bob@gmail.com 对应的JavaBean类 Connection.java package com.bytebeats.code.yaml.model;\n\n/**\n * ${DESCRIPTION}\n *\n * @author Ricky Fung\n * @date 2017-02-14 15:18\n */\npublic class Connection {\n    private String driverClass;\n    private String url;\n    private String username;\n    private String password;\n    private int poolSize;\n\n    public String getDriverClass() {\n        return driverClass;\n    }\n\n    public void setDriverClass(String driverClass) {\n        this.driverClass = driverClass;\n    }\n\n    public String getUrl() {\n        return url;\n    }\n\n    public void setUrl(String url) {\n        this.url = url;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public int getPoolSize() {\n        return poolSize;\n    }\n\n    public void setPoolSize(int poolSize) {\n        this.poolSize = poolSize;\n    }\n\n}\n Configuration.java package com.bytebeats.code.yaml.model;\n\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * ${DESCRIPTION}\n *\n * @author Ricky Fung\n * @date 2017-02-14 15:18\n */\npublic class Configuration {\n    private Date released;\n    private String version;\n    private Connection connection;\n    private List<String> protocols;\n    private Map<String, String> developers;\n\n    public Date getReleased() {\n        return released;\n    }\n\n    public void setReleased(Date released) {\n        this.released = released;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n\n    public void setVersion(String version) {\n        this.version = version;\n    }\n\n    public Connection getConnection() {\n        return connection;\n    }\n\n    public void setConnection(Connection connection) {\n        this.connection = connection;\n    }\n\n    public List<String> getProtocols() {\n        return protocols;\n    }\n\n    public void setProtocols(List<String> protocols) {\n        this.protocols = protocols;\n    }\n\n    public Map<String, String> getDevelopers() {\n        return developers;\n    }\n\n    public void setDevelopers(Map<String, String> developers) {\n        this.developers = developers;\n    }\n\n}\n 解析yaml \nYaml yaml = new Yaml();\ntry {\n    InputStream in = SnakeYAMLTest.class.getResourceAsStream(\"/sample.yml\");\n    Configuration config = yaml.loadAs(in, Configuration.class );\n    System.out.println(config);\n} catch (Exception e){\n    e.printStackTrace();\n}\n 序列化 Configuration config = new Configuration();\nconfig.setReleased(new Date());\nconfig.setVersion(\"1.0\");\n\nConnection connection = new Connection();\nconnection.setDriverClass(\"com.mysql.jdbc.Driver\");\nconnection.setUrl(\"jdbc:mysql://localhost:3306/db\");\nconnection.setUsername(\"root\");\nconnection.setPassword(\"root\");\nconnection.setPoolSize(10);\nconfig.setConnection(connection);\n\nconfig.setProtocols(Arrays.asList(\"http\", \"https\"));\nconfig.setDevelopers(new HashMap<String, String>());\n\nYaml yaml = new Yaml();\nString output = yaml.dump(config);\nSystem.out.println(output); 源代码 https://github.com/TiFG/daily-codelab/tree/master/yaml-sample', '<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n</svg> \n<p>很多应用都开始使用<a href=\"http://www.yaml.org/\">YAML</a>作为程序配置文件，关于YAML详细介绍可以参考<a href=\"http://yaml.org/spec/1.2/spec.html\">YAML 1.2 (3rd Edition)</a>，本文使用<a href=\"https://bitbucket.org/asomov/snakeyaml/wiki/Home\">SnakeYAML</a>来解析YAML。</p> \n<h3 id=\"maven依赖\">maven依赖</h3> \n<pre class=\"prettyprint\"><code class=\" hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">groupId</span>&gt;</span>org.yaml<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">artifactId</span>&gt;</span>snakeyaml<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">version</span>&gt;</span>1.17<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">dependency</span>&gt;</span></code></pre> \n<h3 id=\"示例\">示例</h3> \n<h4 id=\"sampleyml\">sample.yml</h4> \n<pre class=\"prettyprint\"><code class=\" hljs http\"><span class=\"hljs-attribute\">version</span>: <span class=\"hljs-string\">1.0</span>\n<span class=\"hljs-attribute\">released</span>: <span class=\"hljs-string\">2017-02-14</span>\n\n<span class=\"avrasm\"><span class=\"hljs-preprocessor\"># Connection parameters</span>\n<span class=\"hljs-label\">connection:</span>\n    driverClass: <span class=\"hljs-keyword\">com</span><span class=\"hljs-preprocessor\">.mysql</span><span class=\"hljs-preprocessor\">.jdbc</span><span class=\"hljs-preprocessor\">.Driver</span>\n    url: jdbc:mysql://localhost:<span class=\"hljs-number\">3306</span>/db\n    username: root\n    password: <span class=\"hljs-number\">12345</span>\n    poolSize: <span class=\"hljs-number\">5</span>\n\n<span class=\"hljs-preprocessor\"># Protocols</span>\n<span class=\"hljs-label\">protocols:</span>\n   - http\n   - https\n\n<span class=\"hljs-preprocessor\"># Developers</span>\n<span class=\"hljs-label\">developers:</span>\n    tom: tom@gmail<span class=\"hljs-preprocessor\">.com</span>\n    bob: bob@gmail<span class=\"hljs-preprocessor\">.com</span></span></code></pre> \n<h4 id=\"对应的javabean类\">对应的JavaBean类</h4> \n<p>Connection.java</p> \n<pre class=\"prettyprint\"><code class=\" hljs java\"><span class=\"hljs-keyword\">package</span> com.bytebeats.code.yaml.model;\n\n<span class=\"hljs-javadoc\">/**\n * ${DESCRIPTION}\n *\n *<span class=\"hljs-javadoctag\"> @author</span> Ricky Fung\n *<span class=\"hljs-javadoctag\"> @date</span> 2017-02-14 15:18\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Connection</span> {<!-- --></span>\n    <span class=\"hljs-keyword\">private</span> String driverClass;\n    <span class=\"hljs-keyword\">private</span> String url;\n    <span class=\"hljs-keyword\">private</span> String username;\n    <span class=\"hljs-keyword\">private</span> String password;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> poolSize;\n\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getDriverClass</span>() {\n        <span class=\"hljs-keyword\">return</span> driverClass;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setDriverClass</span>(String driverClass) {\n        <span class=\"hljs-keyword\">this</span>.driverClass = driverClass;\n    }\n\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getUrl</span>() {\n        <span class=\"hljs-keyword\">return</span> url;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setUrl</span>(String url) {\n        <span class=\"hljs-keyword\">this</span>.url = url;\n    }\n\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getUsername</span>() {\n        <span class=\"hljs-keyword\">return</span> username;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setUsername</span>(String username) {\n        <span class=\"hljs-keyword\">this</span>.username = username;\n    }\n\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getPassword</span>() {\n        <span class=\"hljs-keyword\">return</span> password;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setPassword</span>(String password) {\n        <span class=\"hljs-keyword\">this</span>.password = password;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getPoolSize</span>() {\n        <span class=\"hljs-keyword\">return</span> poolSize;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setPoolSize</span>(<span class=\"hljs-keyword\">int</span> poolSize) {\n        <span class=\"hljs-keyword\">this</span>.poolSize = poolSize;\n    }\n\n}\n</code></pre> \n<p>Configuration.java</p> \n<pre class=\"prettyprint\"><code class=\" hljs java\"><span class=\"hljs-keyword\">package</span> com.bytebeats.code.yaml.model;\n\n<span class=\"hljs-keyword\">import</span> java.util.Date;\n<span class=\"hljs-keyword\">import</span> java.util.List;\n<span class=\"hljs-keyword\">import</span> java.util.Map;\n\n<span class=\"hljs-javadoc\">/**\n * ${DESCRIPTION}\n *\n *<span class=\"hljs-javadoctag\"> @author</span> Ricky Fung\n *<span class=\"hljs-javadoctag\"> @date</span> 2017-02-14 15:18\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Configuration</span> {<!-- --></span>\n    <span class=\"hljs-keyword\">private</span> Date released;\n    <span class=\"hljs-keyword\">private</span> String version;\n    <span class=\"hljs-keyword\">private</span> Connection connection;\n    <span class=\"hljs-keyword\">private</span> List&lt;String&gt; protocols;\n    <span class=\"hljs-keyword\">private</span> Map&lt;String, String&gt; developers;\n\n    <span class=\"hljs-keyword\">public</span> Date <span class=\"hljs-title\">getReleased</span>() {\n        <span class=\"hljs-keyword\">return</span> released;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setReleased</span>(Date released) {\n        <span class=\"hljs-keyword\">this</span>.released = released;\n    }\n\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getVersion</span>() {\n        <span class=\"hljs-keyword\">return</span> version;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setVersion</span>(String version) {\n        <span class=\"hljs-keyword\">this</span>.version = version;\n    }\n\n    <span class=\"hljs-keyword\">public</span> Connection <span class=\"hljs-title\">getConnection</span>() {\n        <span class=\"hljs-keyword\">return</span> connection;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setConnection</span>(Connection connection) {\n        <span class=\"hljs-keyword\">this</span>.connection = connection;\n    }\n\n    <span class=\"hljs-keyword\">public</span> List&lt;String&gt; <span class=\"hljs-title\">getProtocols</span>() {\n        <span class=\"hljs-keyword\">return</span> protocols;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setProtocols</span>(List&lt;String&gt; protocols) {\n        <span class=\"hljs-keyword\">this</span>.protocols = protocols;\n    }\n\n    <span class=\"hljs-keyword\">public</span> Map&lt;String, String&gt; <span class=\"hljs-title\">getDevelopers</span>() {\n        <span class=\"hljs-keyword\">return</span> developers;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setDevelopers</span>(Map&lt;String, String&gt; developers) {\n        <span class=\"hljs-keyword\">this</span>.developers = developers;\n    }\n\n}\n</code></pre> \n<h4 id=\"解析yaml\">解析yaml</h4> \n<pre class=\"prettyprint\"><code class=\" hljs avrasm\">\nYaml yaml = new Yaml()<span class=\"hljs-comment\">;</span>\ntry {\n    InputStream <span class=\"hljs-keyword\">in</span> = SnakeYAMLTest<span class=\"hljs-preprocessor\">.class</span><span class=\"hljs-preprocessor\">.getResourceAsStream</span>(<span class=\"hljs-string\">\"/sample.yml\"</span>)<span class=\"hljs-comment\">;</span>\n    Configuration config = yaml<span class=\"hljs-preprocessor\">.loadAs</span>(<span class=\"hljs-keyword\">in</span>, Configuration<span class=\"hljs-preprocessor\">.class</span> )<span class=\"hljs-comment\">;</span>\n    System<span class=\"hljs-preprocessor\">.out</span><span class=\"hljs-preprocessor\">.println</span>(config)<span class=\"hljs-comment\">;</span>\n} catch (Exception e){\n    e<span class=\"hljs-preprocessor\">.printStackTrace</span>()<span class=\"hljs-comment\">;</span>\n}\n</code></pre> \n<p>序列化</p> \n<pre class=\"prettyprint\"><code class=\" hljs avrasm\">Configuration config = new Configuration()<span class=\"hljs-comment\">;</span>\nconfig<span class=\"hljs-preprocessor\">.setReleased</span>(new Date())<span class=\"hljs-comment\">;</span>\nconfig<span class=\"hljs-preprocessor\">.setVersion</span>(<span class=\"hljs-string\">\"1.0\"</span>)<span class=\"hljs-comment\">;</span>\n\nConnection connection = new Connection()<span class=\"hljs-comment\">;</span>\nconnection<span class=\"hljs-preprocessor\">.setDriverClass</span>(<span class=\"hljs-string\">\"com.mysql.jdbc.Driver\"</span>)<span class=\"hljs-comment\">;</span>\nconnection<span class=\"hljs-preprocessor\">.setUrl</span>(<span class=\"hljs-string\">\"jdbc:mysql://localhost:3306/db\"</span>)<span class=\"hljs-comment\">;</span>\nconnection<span class=\"hljs-preprocessor\">.setUsername</span>(<span class=\"hljs-string\">\"root\"</span>)<span class=\"hljs-comment\">;</span>\nconnection<span class=\"hljs-preprocessor\">.setPassword</span>(<span class=\"hljs-string\">\"root\"</span>)<span class=\"hljs-comment\">;</span>\nconnection<span class=\"hljs-preprocessor\">.setPoolSize</span>(<span class=\"hljs-number\">10</span>)<span class=\"hljs-comment\">;</span>\nconfig<span class=\"hljs-preprocessor\">.setConnection</span>(connection)<span class=\"hljs-comment\">;</span>\n\nconfig<span class=\"hljs-preprocessor\">.setProtocols</span>(Arrays<span class=\"hljs-preprocessor\">.asList</span>(<span class=\"hljs-string\">\"http\"</span>, <span class=\"hljs-string\">\"https\"</span>))<span class=\"hljs-comment\">;</span>\nconfig<span class=\"hljs-preprocessor\">.setDevelopers</span>(new HashMap&lt;String, String&gt;())<span class=\"hljs-comment\">;</span>\n\nYaml yaml = new Yaml()<span class=\"hljs-comment\">;</span>\nString output = yaml<span class=\"hljs-preprocessor\">.dump</span>(config)<span class=\"hljs-comment\">;</span>\nSystem<span class=\"hljs-preprocessor\">.out</span><span class=\"hljs-preprocessor\">.println</span>(output)<span class=\"hljs-comment\">;</span></code></pre> \n<h3 id=\"源代码\">源代码</h3> \n<p><a href=\"https://github.com/TiFG/daily-codelab/tree/master/yaml-sample\">https://github.com/TiFG/daily-codelab/tree/master/yaml-sample</a></p>', '<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n</svg> \n<p>很多应用都开始使用<a href=\"http://www.yaml.org/\">YAML</a>作为程序配置文件，关于YAML详细介绍可以参考<a href=\"http://yaml.org/spec/1.2/spec.html\">YAML 1.2 (3rd Edition)</a>，本文使用<a href=\"https://bitbucket.org/asomov/snakeyaml/wiki/Home\">SnakeYAML</a>来解析YAML。</p> \n<h3 id=\"maven依赖\">maven依赖</h3> \n<pre class=\"prettyprint\"><code class=\" hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">groupId</span>&gt;</span>org.yaml<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">artifactId</span>&gt;</span>snakeyaml<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">version</span>&gt;</span>1.17<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">dependency</span>&gt;</span></code></pre> \n<h3 id=\"示例\">示例</h3> \n<h4 id=\"sampleyml\">sample.yml</h4> \n<pre class=\"prettyprint\"><code class=\" hljs http\"><span class=\"hljs-attribute\">version</span>: <span class=\"hljs-string\">1.0</span>\n<span class=\"hljs-attribute\">released</span>: <span class=\"hljs-string\">2017-02-14</span>\n\n<span class=\"avrasm\"><span class=\"hljs-preprocessor\"># Connection parameters</span>\n<span class=\"hljs-label\">connection:</span>\n    driverClass: <span class=\"hljs-keyword\">com</span><span class=\"hljs-preprocessor\">.mysql</span><span class=\"hljs-preprocessor\">.jdbc</span><span class=\"hljs-preprocessor\">.Driver</span>\n    url: jdbc:mysql://localhost:<span class=\"hljs-number\">3306</span>/db\n    username: root\n    password: <span class=\"hljs-number\">12345</span>\n    poolSize: <span class=\"hljs-number\">5</span>\n\n<span class=\"hljs-preprocessor\"># Protocols</span>\n<span class=\"hljs-label\">protocols:</span>\n   - http\n   - https\n\n<span class=\"hljs-preprocessor\"># Developers</span>\n<span class=\"hljs-label\">developers:</span>\n    tom: tom@gmail<span class=\"hljs-preprocessor\">.com</span>\n    bob: bob@gmail<span class=\"hljs-preprocessor\">.com</span></span></code></pre> \n<h4 id=\"对应的javabean类\">对应的JavaBean类</h4> \n<p>Connection.java</p> \n<pre class=\"prettyprint\"><code class=\" hljs java\"><span class=\"hljs-keyword\">package</span> com.bytebeats.code.yaml.model;\n\n<span class=\"hljs-javadoc\">/**\n * ${DESCRIPTION}\n *\n *<span class=\"hljs-javadoctag\"> @author</span> Ricky Fung\n *<span class=\"hljs-javadoctag\"> @date</span> 2017-02-14 15:18\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Connection</span> {<!-- --></span>\n    <span class=\"hljs-keyword\">private</span> String driverClass;\n    <span class=\"hljs-keyword\">private</span> String url;\n    <span class=\"hljs-keyword\">private</span> String username;\n    <span class=\"hljs-keyword\">private</span> String password;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> poolSize;\n\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getDriverClass</span>() {\n        <span class=\"hljs-keyword\">return</span> driverClass;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setDriverClass</span>(String driverClass) {\n        <span class=\"hljs-keyword\">this</span>.driverClass = driverClass;\n    }\n\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getUrl</span>() {\n        <span class=\"hljs-keyword\">return</span> url;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setUrl</span>(String url) {\n        <span class=\"hljs-keyword\">this</span>.url = url;\n    }\n\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getUsername</span>() {\n        <span class=\"hljs-keyword\">return</span> username;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setUsername</span>(String username) {\n        <span class=\"hljs-keyword\">this</span>.username = username;\n    }\n\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getPassword</span>() {\n        <span class=\"hljs-keyword\">return</span> password;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setPassword</span>(String password) {\n        <span class=\"hljs-keyword\">this</span>.password = password;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getPoolSize</span>() {\n        <span class=\"hljs-keyword\">return</span> poolSize;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setPoolSize</span>(<span class=\"hljs-keyword\">int</span> poolSize) {\n        <span class=\"hljs-keyword\">this</span>.poolSize = poolSize;\n    }\n\n}\n</code></pre> \n<p>Configuration.java</p> \n<pre class=\"prettyprint\"><code class=\" hljs java\"><span class=\"hljs-keyword\">package</span> com.bytebeats.code.yaml.model;\n\n<span class=\"hljs-keyword\">import</span> java.util.Date;\n<span class=\"hljs-keyword\">import</span> java.util.List;\n<span class=\"hljs-keyword\">import</span> java.util.Map;\n\n<span class=\"hljs-javadoc\">/**\n * ${DESCRIPTION}\n *\n *<span class=\"hljs-javadoctag\"> @author</span> Ricky Fung\n *<span class=\"hljs-javadoctag\"> @date</span> 2017-02-14 15:18\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Configuration</span> {<!-- --></span>\n    <span class=\"hljs-keyword\">private</span> Date released;\n    <span class=\"hljs-keyword\">private</span> String version;\n    <span class=\"hljs-keyword\">private</span> Connection connection;\n    <span class=\"hljs-keyword\">private</span> List&lt;String&gt; protocols;\n    <span class=\"hljs-keyword\">private</span> Map&lt;String, String&gt; developers;\n\n    <span class=\"hljs-keyword\">public</span> Date <span class=\"hljs-title\">getReleased</span>() {\n        <span class=\"hljs-keyword\">return</span> released;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setReleased</span>(Date released) {\n        <span class=\"hljs-keyword\">this</span>.released = released;\n    }\n\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getVersion</span>() {\n        <span class=\"hljs-keyword\">return</span> version;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setVersion</span>(String version) {\n        <span class=\"hljs-keyword\">this</span>.version = version;\n    }\n\n    <span class=\"hljs-keyword\">public</span> Connection <span class=\"hljs-title\">getConnection</span>() {\n        <span class=\"hljs-keyword\">return</span> connection;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setConnection</span>(Connection connection) {\n        <span class=\"hljs-keyword\">this</span>.connection = connection;\n    }\n\n    <span class=\"hljs-keyword\">public</span> List&lt;String&gt; <span class=\"hljs-title\">getProtocols</span>() {\n        <span class=\"hljs-keyword\">return</span> protocols;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setProtocols</span>(List&lt;String&gt; protocols) {\n        <span class=\"hljs-keyword\">this</span>.protocols = protocols;\n    }\n\n    <span class=\"hljs-keyword\">public</span> Map&lt;String, String&gt; <span class=\"hljs-title\">getDevelopers</span>() {\n        <span class=\"hljs-keyword\">return</span> developers;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setDevelopers</span>(Map&lt;String, String&gt; developers) {\n        <span class=\"hljs-keyword\">this</span>.developers = developers;\n    }\n\n}\n</code></pre> \n<h4 id=\"解析yaml\">解析yaml</h4> \n<pre class=\"prettyprint\"><code class=\" hljs avrasm\">\nYaml yaml = new Yaml()<span class=\"hljs-comment\">;</span>\ntry {\n    InputStream <span class=\"hljs-keyword\">in</span> = SnakeYAMLTest<span class=\"hljs-preprocessor\">.class</span><span class=\"hljs-preprocessor\">.getResourceAsStream</span>(<span class=\"hljs-string\">\"/sample.yml\"</span>)<span class=\"hljs-comment\">;</span>\n    Configuration config = yaml<span class=\"hljs-preprocessor\">.loadAs</span>(<span class=\"hljs-keyword\">in</span>, Configuration<span class=\"hljs-preprocessor\">.class</span> )<span class=\"hljs-comment\">;</span>\n    System<span class=\"hljs-preprocessor\">.out</span><span class=\"hljs-preprocessor\">.println</span>(config)<span class=\"hljs-comment\">;</span>\n} catch (Exception e){\n    e<span class=\"hljs-preprocessor\">.printStackTrace</span>()<span class=\"hljs-comment\">;</span>\n}\n</code></pre> \n<p>序列化</p> \n<pre class=\"prettyprint\"><code class=\" hljs avrasm\">Configuration config = new Configuration()<span class=\"hljs-comment\">;</span>\nconfig<span class=\"hljs-preprocessor\">.setReleased</span>(new Date())<span class=\"hljs-comment\">;</span>\nconfig<span class=\"hljs-preprocessor\">.setVersion</span>(<span class=\"hljs-string\">\"1.0\"</span>)<span class=\"hljs-comment\">;</span>\n\nConnection connection = new Connection()<span class=\"hljs-comment\">;</span>\nconnection<span class=\"hljs-preprocessor\">.setDriverClass</span>(<span class=\"hljs-string\">\"com.mysql.jdbc.Driver\"</span>)<span class=\"hljs-comment\">;</span>\nconnection<span class=\"hljs-preprocessor\">.setUrl</span>(<span class=\"hljs-string\">\"jdbc:mysql://localhost:3306/db\"</span>)<span class=\"hljs-comment\">;</span>\nconnection<span class=\"hljs-preprocessor\">.setUsername</span>(<span class=\"hljs-string\">\"root\"</span>)<span class=\"hljs-comment\">;</span>\nconnection<span class=\"hljs-preprocessor\">.setPassword</span>(<span class=\"hljs-string\">\"root\"</span>)<span class=\"hljs-comment\">;</span>\nconnection<span class=\"hljs-preprocessor\">.setPoolSize</span>(<span class=\"hljs-number\">10</span>)<span class=\"hljs-comment\">;</span>\nconfig<span class=\"hljs-preprocessor\">.setConnection</span>(connection)<span class=\"hljs-comment\">;</span>\n\nconfig<span class=\"hljs-preprocessor\">.setProtocols</span>(Arrays<span class=\"hljs-preprocessor\">.asList</span>(<span class=\"hljs-string\">\"http\"</span>, <span class=\"hljs-string\">\"https\"</span>))<span class=\"hljs-comment\">;</span>\nconfig<span class=\"hljs-preprocessor\">.setDevelopers</span>(new HashMap&lt;String, String&gt;())<span class=\"hljs-comment\">;</span>\n\nYaml yaml = new Yaml()<span class=\"hljs-comment\">;</span>\nString output = yaml<span class=\"hljs-preprocessor\">.dump</span>(config)<span class=\"hljs-comment\">;</span>\nSystem<span class=\"hljs-preprocessor\">.out</span><span class=\"hljs-preprocessor\">.println</span>(output)<span class=\"hljs-comment\">;</span></code></pre> \n<h3 id=\"源代码\">源代码</h3> \n<p><a href=\"https://github.com/TiFG/daily-codelab/tree/master/yaml-sample\">https://github.com/TiFG/daily-codelab/tree/master/yaml-sample</a></p>', '很多应用都开始使用[YAML](http://www.yaml.org/)作为程序配置文件，关于YAML详细介绍可以参考[YAML 1.2 (3rd Edition)](http://yaml.org/spec/1.2/spec.html)，本文使用[SnakeYAML](https://bitbucket.org/asomov/snakeyaml/wiki/Home)来解析YAML。\n\n### maven依赖\n\n    <dependency>\n        <groupId>org.yaml</groupId>\n        <artifactId>snakeyaml</artifactId>\n        <version>1.17</version>\n    </dependency>\n\n### 示例\n\n#### sample.yml\n\n    version: 1.0\n    released: 2017-02-14\n    \n    # Connection parameters\n    connection:\n        driverClass: com.mysql.jdbc.Driver\n        url: jdbc:mysql://localhost:3306/db\n        username: root\n        password: 12345\n        poolSize: 5\n    \n    # Protocols\n    protocols:\n       - http\n       - https\n    \n    # Developers\n    developers:\n        tom: tom@gmail.com\n        bob: bob@gmail.com\n\n#### 对应的JavaBean类\n\nConnection.java\n\n    package com.bytebeats.code.yaml.model;\n    \n    /**\n     * ${DESCRIPTION}\n     *\n     * @author Ricky Fung\n     * @date 2017-02-14 15:18\n     */\n    public class Connection {\n        private String driverClass;\n        private String url;\n        private String username;\n        private String password;\n        private int poolSize;\n    \n        public String getDriverClass() {\n            return driverClass;\n        }\n    \n        public void setDriverClass(String driverClass) {\n            this.driverClass = driverClass;\n        }\n    \n        public String getUrl() {\n            return url;\n        }\n    \n        public void setUrl(String url) {\n            this.url = url;\n        }\n    \n        public String getUsername() {\n            return username;\n        }\n    \n        public void setUsername(String username) {\n            this.username = username;\n        }\n    \n        public String getPassword() {\n            return password;\n        }\n    \n        public void setPassword(String password) {\n            this.password = password;\n        }\n    \n        public int getPoolSize() {\n            return poolSize;\n        }\n    \n        public void setPoolSize(int poolSize) {\n            this.poolSize = poolSize;\n        }\n    \n    }\n    \n\nConfiguration.java\n\n    package com.bytebeats.code.yaml.model;\n    \n    import java.util.Date;\n    import java.util.List;\n    import java.util.Map;\n    \n    /**\n     * ${DESCRIPTION}\n     *\n     * @author Ricky Fung\n     * @date 2017-02-14 15:18\n     */\n    public class Configuration {\n        private Date released;\n        private String version;\n        private Connection connection;\n        private List<String> protocols;\n        private Map<String, String> developers;\n    \n        public Date getReleased() {\n            return released;\n        }\n    \n        public void setReleased(Date released) {\n            this.released = released;\n        }\n    \n        public String getVersion() {\n            return version;\n        }\n    \n        public void setVersion(String version) {\n            this.version = version;\n        }\n    \n        public Connection getConnection() {\n            return connection;\n        }\n    \n        public void setConnection(Connection connection) {\n            this.connection = connection;\n        }\n    \n        public List<String> getProtocols() {\n            return protocols;\n        }\n    \n        public void setProtocols(List<String> protocols) {\n            this.protocols = protocols;\n        }\n    \n        public Map<String, String> getDevelopers() {\n            return developers;\n        }\n    \n        public void setDevelopers(Map<String, String> developers) {\n            this.developers = developers;\n        }\n    \n    }\n    \n\n#### 解析yaml\n\n    \n    Yaml yaml = new Yaml();\n    try {\n        InputStream in = SnakeYAMLTest.class.getResourceAsStream(\"/sample.yml\");\n        Configuration config = yaml.loadAs(in, Configuration.class );\n        System.out.println(config);\n    } catch (Exception e){\n        e.printStackTrace();\n    }\n    \n\n序列化\n\n    Configuration config = new Configuration();\n    config.setReleased(new Date());\n    config.setVersion(\"1.0\");\n    \n    Connection connection = new Connection();\n    connection.setDriverClass(\"com.mysql.jdbc.Driver\");\n    connection.setUrl(\"jdbc:mysql://localhost:3306/db\");\n    connection.setUsername(\"root\");\n    connection.setPassword(\"root\");\n    connection.setPoolSize(10);\n    config.setConnection(connection);\n    \n    config.setProtocols(Arrays.asList(\"http\", \"https\"));\n    config.setDevelopers(new HashMap<String, String>());\n    \n    Yaml yaml = new Yaml();\n    String output = yaml.dump(config);\n    System.out.println(output);\n\n### 源代码\n\n[https://github.com/TiFG/daily-codelab/tree/master/yaml-sample](https://github.com/TiFG/daily-codelab/tree/master/yaml-sample)', '很多应用都开始使用[YAML](http://www.yaml.org/)作为程序配置文件，关于YAML详细介绍可以参考[YAML 1.2 (3rd Edition)](http://yaml.org/spec/1.2/spec.html)，本文使用[SnakeYAML](https://bitbucket.org/asomov/snakeyaml/wiki/Home)来解析YAML。\n\n### maven依赖\n\n    <dependency>\n        <groupId>org.yaml</groupId>\n        <artifactId>snakeyaml</artifactId>\n        <version>1.17</version>\n    </dependency>\n\n### 示例\n\n#### sample.yml\n\n    version: 1.0\n    released: 2017-02-14\n    \n    # Connection parameters\n    connection:\n        driverClass: com.mysql.jdbc.Driver\n        url: jdbc:mysql://localhost:3306/db\n        username: root\n        password: 12345\n        poolSize: 5\n    \n    # Protocols\n    protocols:\n       - http\n       - https\n    \n    # Developers\n    developers:\n        tom: tom@gmail.com\n        bob: bob@gmail.com\n\n#### 对应的JavaBean类\n\nConnection.java\n\n    package com.bytebeats.code.yaml.model;\n    \n    /**\n     * ${DESCRIPTION}\n     *\n     * @author Ricky Fung\n     * @date 2017-02-14 15:18\n     */\n    public class Connection {\n        private String driverClass;\n        private String url;\n        private String username;\n        private String password;\n        private int poolSize;\n    \n        public String getDriverClass() {\n            return driverClass;\n        }\n    \n        public void setDriverClass(String driverClass) {\n            this.driverClass = driverClass;\n        }\n    \n        public String getUrl() {\n            return url;\n        }\n    \n        public void setUrl(String url) {\n            this.url = url;\n        }\n    \n        public String getUsername() {\n            return username;\n        }\n    \n        public void setUsername(String username) {\n            this.username = username;\n        }\n    \n        public String getPassword() {\n            return password;\n        }\n    \n        public void setPassword(String password) {\n            this.password = password;\n        }\n    \n        public int getPoolSize() {\n            return poolSize;\n        }\n    \n        public void setPoolSize(int poolSize) {\n            this.poolSize = poolSize;\n        }\n    \n    }\n    \n\nConfiguration.java\n\n    package com.bytebeats.code.yaml.model;\n    \n    import java.util.Date;\n    import java.util.List;\n    import java.util.Map;\n    \n    /**\n     * ${DESCRIPTION}\n     *\n     * @author Ricky Fung\n     * @date 2017-02-14 15:18\n     */\n    public class Configuration {\n        private Date released;\n        private String version;\n        private Connection connection;\n        private List<String> protocols;\n        private Map<String, String> developers;\n    \n        public Date getReleased() {\n            return released;\n        }\n    \n        public void setReleased(Date released) {\n            this.released = released;\n        }\n    \n        public String getVersion() {\n            return version;\n        }\n    \n        public void setVersion(String version) {\n            this.version = version;\n        }\n    \n        public Connection getConnection() {\n            return connection;\n        }\n    \n        public void setConnection(Connection connection) {\n            this.connection = connection;\n        }\n    \n        public List<String> getProtocols() {\n            return protocols;\n        }\n    \n        public void setProtocols(List<String> protocols) {\n            this.protocols = protocols;\n        }\n    \n        public Map<String, String> getDevelopers() {\n            return developers;\n        }\n    \n        public void setDevelopers(Map<String, String> developers) {\n            this.developers = developers;\n        }\n    \n    }\n    \n\n#### 解析yaml\n\n    \n    Yaml yaml = new Yaml();\n    try {\n        InputStream in = SnakeYAMLTest.class.getResourceAsStream(\"/sample.yml\");\n        Configuration config = yaml.loadAs(in, Configuration.class );\n        System.out.println(config);\n    } catch (Exception e){\n        e.printStackTrace();\n    }\n    \n\n序列化\n\n    Configuration config = new Configuration();\n    config.setReleased(new Date());\n    config.setVersion(\"1.0\");\n    \n    Connection connection = new Connection();\n    connection.setDriverClass(\"com.mysql.jdbc.Driver\");\n    connection.setUrl(\"jdbc:mysql://localhost:3306/db\");\n    connection.setUsername(\"root\");\n    connection.setPassword(\"root\");\n    connection.setPoolSize(10);\n    config.setConnection(connection);\n    \n    config.setProtocols(Arrays.asList(\"http\", \"https\"));\n    config.setDevelopers(new HashMap<String, String>());\n    \n    Yaml yaml = new Yaml();\n    String output = yaml.dump(config);\n    System.out.println(output);\n\n### 源代码\n\n[https://github.com/TiFG/daily-codelab/tree/master/yaml-sample](https://github.com/TiFG/daily-codelab/tree/master/yaml-sample)', '2017-02-14 16:23:08', 'Ricky_Fung', '2021-08-12 16:16:11', '2017-02-14 16:23:08', NULL);
INSERT INTO `t_article_8` VALUES (1425754784236965888, 'Linux', NULL, 'Linux 的文件的基本属性', '116602099', 'https://blog.csdn.net/qq_34637782/article/details/116602099', 2, 'Linux 的文件的基本属性 1. 两个指令 chown #修该所属用户与组合\nchmod #修改用户的权限\n 首先这两个指令很重要，我们以后会经常用到，其次，这两个指令也引出的两个概念 一个文件一定属于某个用户 及 某个用户组 用户和用户组对该文件的权限可以做限制 2. 两张图 第一张 全览 这里需要在引入另一个指令 ls -l # 或者 ll\n 通过上述指令 我们可以得到这个文件所属的用户和组，及用户和组拥有的权限 我们比较关心的是前面一组权限 及 后面的user 和gourp 上图我们可以看到这些文件都属于用户shum和用户组staff 但是对于前面的权限可能看起来有些迷惑 不要紧 我们来看第二张图 第二张 十个符号 如我这小节的标题，该权限永远是由十个符号组成，记住这点，这就是我们记忆的锚点，这将有助于我们记忆 和理解 接下来我们看第二张图 这十个字母分四个部分 第一部分 文件类型 第一部分现实该文件的文件类型，因为在linux中一切皆文件，就算是设备在linux系统中也是文件 所以有了文件类型这个概念 具体类型如下 d 目录 - 文件 l 连接文件 b 借口设备 c 串行接口', 'Linux 的文件的基本属性 1. 两个指令 chown #修该所属用户与组合\nchmod #修改用户的权限\n 首先这两个指令很重要，我们以后会经常用到，其次，这两个指令也引出的两个概念 一个文件一定属于某个用户 及 某个用户组 用户和用户组对该文件的权限可以做限制 2. 两张图 第一张 全览 这里需要在引入另一个指令 ls -l # 或者 ll\n 通过上述指令 我们可以得到这个文件所属的用户和组，及用户和组拥有的权限 我们比较关心的是前面一组权限 及 后面的user 和gourp 上图我们可以看到这些文件都属于用户shum和用户组staff 但是对于前面的权限可能看起来有些迷惑 不要紧 我们来看第二张图 第二张 十个符号 如我这小节的标题，该权限永远是由十个符号组成，记住这点，这就是我们记忆的锚点，这将有助于我们记忆 和理解 接下来我们看第二张图 这十个字母分四个部分 第一部分 文件类型 第一部分现实该文件的文件类型，因为在linux中一切皆文件，就算是设备在linux系统中也是文件 所以有了文件类型这个概念 具体类型如下 d 目录 - 文件 l 连接文件 b 借口设备 c 串行接口设别 第二至四部分 权限 第二到第四部分分别对应文件所属用户，文件所属组，其他组用户权限。每个部分又由三个符号组成 满配置 为 rwx 即读，写，执行的权限，这个顺序是不变的，若缺少某个权限就换成- 比如 所属用户只有读写权限 那么第二部分就是 rw- 3. 指令深入学习 通过前面的学习，我们已经了解了文件属于用户 和 某个用户组，且用户 用户组 及 为用户组用户 分别由对该文件的权限 这两个概念 现在我们要继续学习指令的使用 以便我们工作的开展 变更组 chgrp [-r] group_name file_name\n -r 是可选项 表示 递归 变更用户 chown [-r] own_name:group_name file_name\n 变更权限 变更权限有两种方式 通过数字变更 先看一个样例 chmod -r 777 file_name\n 如上就是给该文件用户 用户组 其他组用户 都安上了 rwx 属性 那么这个7表示什么意思呢？ 其实它是三个数字的相加 即 4 + 2 + 1', '<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n</svg> \n<h1><a id=\"Linux__0\"></a>Linux 的文件的基本属性</h1> \n<h2><a id=\"1__2\"></a>1. 两个指令</h2> \n<pre><code class=\"prism language-sh\">chown #修该所属用户与组合\nchmod #修改用户的权限\n</code></pre> \n<p>首先这两个指令很重要，我们以后会经常用到，其次，这两个指令也引出的两个概念</p> \n<ul>\n <li>一个文件一定属于某个用户 及 某个用户组</li>\n <li>用户和用户组对该文件的权限可以做限制</li>\n</ul> \n<h2><a id=\"2__16\"></a>2. 两张图</h2> \n<h3><a id=\"__18\"></a>第一张 全览</h3> \n<p>这里需要在引入另一个指令</p> \n<pre><code class=\"prism language-sh\">ls -l # 或者 ll\n</code></pre> \n<p>通过上述指令 我们可以得到这个文件所属的用户和组，及用户和组拥有的权限</p> \n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2d0d43e8b4dfdfd98fda1e9e9084067c.png\" alt=\"img\"></p> \n<p>我们比较关心的是前面一组权限 及 后面的user 和gourp</p> \n<p>上图我们可以看到这些文件都属于用户shum和用户组staff 但是对于前面的权限可能看起来有些迷惑 不要紧 我们来看第二张图</p> \n<h3><a id=\"__34\"></a>第二张 十个符号</h3> \n<p>如我这小节的标题，该权限永远是由十个符号组成，记住这点，这就是我们记忆的锚点，这将有助于我们记忆 和理解 接下来我们看第二张图</p> \n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/35bf85b2988d84cd8ccb7f72814cc20d.png\" alt=\"363003_1227493859FdXT\"></p> \n<p>这十个字母分四个部分</p> \n<h4><a id=\"__42\"></a>第一部分 文件类型</h4> \n<p>第一部分现实该文件的文件类型，因为在linux中一切皆文件，就算是设备在linux系统中也是文件 所以有了文件类型这个概念 具体类型如下</p> \n<ul>\n <li>d 目录</li>\n <li>- 文件</li>\n <li>l 连接文件</li>\n <li>b 借口设备</li>\n <li>c 串行接口设别</li>\n</ul> \n<h4><a id=\"__52\"></a>第二至四部分 权限</h4> \n<p>第二到第四部分分别对应文件所属用户，文件所属组，其他组用户权限。每个部分又由三个符号组成 满配置 为 rwx 即读，写，执行的权限，这个顺序是不变的，若缺少某个权限就换成- 比如 所属用户只有读写权限 那么第二部分就是 rw-</p> \n<h2><a id=\"3__56\"></a>3. 指令深入学习</h2> \n<p>通过前面的学习，我们已经了解了文件属于<strong>用户 和 某个用户组，且用户 用户组 及 为用户组用户 分别由对该文件的权限 这两个概念</strong></p> \n<p>现在我们要继续学习指令的使用 以便我们工作的开展</p> \n<h4><a id=\"_64\"></a>变更组</h4> \n<pre><code class=\"prism language-sh\">chgrp [-r] group_name file_name\n</code></pre> \n<p>-r 是可选项 表示 递归</p> \n<h4><a id=\"_72\"></a>变更用户</h4> \n<pre><code class=\"prism language-sh\">chown [-r] own_name:group_name file_name\n</code></pre> \n<h4><a id=\"_78\"></a>变更权限</h4> \n<p>变更权限有两种方式</p> \n<ol>\n <li> <p>通过数字变更 先看一个样例</p> <pre><code class=\"prism language-sh\">chmod -r 777 file_name\n</code></pre> <p>如上就是给该文件用户 用户组 其他组用户 都安上了 rwx 属性</p> <p>那么这个7表示什么意思呢？</p> <p>其实它是三个数字的相加 即 4 + 2 + 1</p> </li>\n</ol>', '<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n</svg> \n<h1><a id=\"Linux__0\"></a>Linux 的文件的基本属性</h1> \n<h2><a id=\"1__2\"></a>1. 两个指令</h2> \n<pre><code class=\"prism language-sh\">chown #修该所属用户与组合\nchmod #修改用户的权限\n</code></pre> \n<p>首先这两个指令很重要，我们以后会经常用到，其次，这两个指令也引出的两个概念</p> \n<ul>\n <li>一个文件一定属于某个用户 及 某个用户组</li>\n <li>用户和用户组对该文件的权限可以做限制</li>\n</ul> \n<h2><a id=\"2__16\"></a>2. 两张图</h2> \n<h3><a id=\"__18\"></a>第一张 全览</h3> \n<p>这里需要在引入另一个指令</p> \n<pre><code class=\"prism language-sh\">ls -l # 或者 ll\n</code></pre> \n<p>通过上述指令 我们可以得到这个文件所属的用户和组，及用户和组拥有的权限</p> \n<p><img src=\"/articleFile/bca/uploadImg/20210812/1425754784236965888-v021ykqs.png\" alt=\"img\"></p> \n<p>我们比较关心的是前面一组权限 及 后面的user 和gourp</p> \n<p>上图我们可以看到这些文件都属于用户shum和用户组staff 但是对于前面的权限可能看起来有些迷惑 不要紧 我们来看第二张图</p> \n<h3><a id=\"__34\"></a>第二张 十个符号</h3> \n<p>如我这小节的标题，该权限永远是由十个符号组成，记住这点，这就是我们记忆的锚点，这将有助于我们记忆 和理解 接下来我们看第二张图</p> \n<p><img src=\"/articleFile/bca/uploadImg/20210812/1425754784236965888-0t9e6mcf.png\" alt=\"363003_1227493859FdXT\"></p> \n<p>这十个字母分四个部分</p> \n<h4><a id=\"__42\"></a>第一部分 文件类型</h4> \n<p>第一部分现实该文件的文件类型，因为在linux中一切皆文件，就算是设备在linux系统中也是文件 所以有了文件类型这个概念 具体类型如下</p> \n<ul>\n <li>d 目录</li>\n <li>- 文件</li>\n <li>l 连接文件</li>\n <li>b 借口设备</li>\n <li>c 串行接口设别</li>\n</ul> \n<h4><a id=\"__52\"></a>第二至四部分 权限</h4> \n<p>第二到第四部分分别对应文件所属用户，文件所属组，其他组用户权限。每个部分又由三个符号组成 满配置 为 rwx 即读，写，执行的权限，这个顺序是不变的，若缺少某个权限就换成- 比如 所属用户只有读写权限 那么第二部分就是 rw-</p> \n<h2><a id=\"3__56\"></a>3. 指令深入学习</h2> \n<p>通过前面的学习，我们已经了解了文件属于<strong>用户 和 某个用户组，且用户 用户组 及 为用户组用户 分别由对该文件的权限 这两个概念</strong></p> \n<p>现在我们要继续学习指令的使用 以便我们工作的开展</p> \n<h4><a id=\"_64\"></a>变更组</h4> \n<pre><code class=\"prism language-sh\">chgrp [-r] group_name file_name\n</code></pre> \n<p>-r 是可选项 表示 递归</p> \n<h4><a id=\"_72\"></a>变更用户</h4> \n<pre><code class=\"prism language-sh\">chown [-r] own_name:group_name file_name\n</code></pre> \n<h4><a id=\"_78\"></a>变更权限</h4> \n<p>变更权限有两种方式</p> \n<ol>\n <li> <p>通过数字变更 先看一个样例</p> <pre><code class=\"prism language-sh\">chmod -r 777 file_name\n</code></pre> <p>如上就是给该文件用户 用户组 其他组用户 都安上了 rwx 属性</p> <p>那么这个7表示什么意思呢？</p> <p>其实它是三个数字的相加 即 4 + 2 + 1</p> </li>\n</ol>', 'Linux 的文件的基本属性\n==============\n\n1\\. 两个指令\n--------\n\n    chown #修该所属用户与组合\n    chmod #修改用户的权限\n    \n\n首先这两个指令很重要，我们以后会经常用到，其次，这两个指令也引出的两个概念\n\n*   一个文件一定属于某个用户 及 某个用户组\n*   用户和用户组对该文件的权限可以做限制\n\n2\\. 两张图\n-------\n\n### 第一张 全览\n\n这里需要在引入另一个指令\n\n    ls -l # 或者 ll\n    \n\n通过上述指令 我们可以得到这个文件所属的用户和组，及用户和组拥有的权限\n\n![img](https://img-blog.csdnimg.cn/img_convert/2d0d43e8b4dfdfd98fda1e9e9084067c.png)\n\n我们比较关心的是前面一组权限 及 后面的user 和gourp\n\n上图我们可以看到这些文件都属于用户shum和用户组staff 但是对于前面的权限可能看起来有些迷惑 不要紧 我们来看第二张图\n\n### 第二张 十个符号\n\n如我这小节的标题，该权限永远是由十个符号组成，记住这点，这就是我们记忆的锚点，这将有助于我们记忆 和理解 接下来我们看第二张图\n\n![363003_1227493859FdXT](https://img-blog.csdnimg.cn/img_convert/35bf85b2988d84cd8ccb7f72814cc20d.png)\n\n这十个字母分四个部分\n\n#### 第一部分 文件类型\n\n第一部分现实该文件的文件类型，因为在linux中一切皆文件，就算是设备在linux系统中也是文件 所以有了文件类型这个概念 具体类型如下\n\n*   d 目录\n*   \\- 文件\n*   l 连接文件\n*   b 借口设备\n*   c 串行接口设别\n\n#### 第二至四部分 权限\n\n第二到第四部分分别对应文件所属用户，文件所属组，其他组用户权限。每个部分又由三个符号组成 满配置 为 rwx 即读，写，执行的权限，这个顺序是不变的，若缺少某个权限就换成- 比如 所属用户只有读写权限 那么第二部分就是 rw-\n\n3\\. 指令深入学习\n----------\n\n通过前面的学习，我们已经了解了文件属于**用户 和 某个用户组，且用户 用户组 及 为用户组用户 分别由对该文件的权限 这两个概念**\n\n现在我们要继续学习指令的使用 以便我们工作的开展\n\n#### 变更组\n\n    chgrp [-r] group_name file_name\n    \n\n\\-r 是可选项 表示 递归\n\n#### 变更用户\n\n    chown [-r] own_name:group_name file_name\n    \n\n#### 变更权限\n\n变更权限有两种方式\n\n1.  通过数字变更 先看一个样例\n    \n        chmod -r 777 file_name\n        \n    \n    如上就是给该文件用户 用户组 其他组用户 都安上了 rwx 属性\n    \n    那么这个7表示什么意思呢？\n    \n    其实它是三个数字的相加 即 4 + 2 + 1', 'Linux 的文件的基本属性\n==============\n\n1\\. 两个指令\n--------\n\n    chown #修该所属用户与组合\n    chmod #修改用户的权限\n    \n\n首先这两个指令很重要，我们以后会经常用到，其次，这两个指令也引出的两个概念\n\n*   一个文件一定属于某个用户 及 某个用户组\n*   用户和用户组对该文件的权限可以做限制\n\n2\\. 两张图\n-------\n\n### 第一张 全览\n\n这里需要在引入另一个指令\n\n    ls -l # 或者 ll\n    \n\n通过上述指令 我们可以得到这个文件所属的用户和组，及用户和组拥有的权限\n\n![img](/articleFile/bca/uploadImg/20210812/1425754784236965888-v021ykqs.png)\n\n我们比较关心的是前面一组权限 及 后面的user 和gourp\n\n上图我们可以看到这些文件都属于用户shum和用户组staff 但是对于前面的权限可能看起来有些迷惑 不要紧 我们来看第二张图\n\n### 第二张 十个符号\n\n如我这小节的标题，该权限永远是由十个符号组成，记住这点，这就是我们记忆的锚点，这将有助于我们记忆 和理解 接下来我们看第二张图\n\n![363003_1227493859FdXT](/articleFile/bca/uploadImg/20210812/1425754784236965888-0t9e6mcf.png)\n\n这十个字母分四个部分\n\n#### 第一部分 文件类型\n\n第一部分现实该文件的文件类型，因为在linux中一切皆文件，就算是设备在linux系统中也是文件 所以有了文件类型这个概念 具体类型如下\n\n*   d 目录\n*   \\- 文件\n*   l 连接文件\n*   b 借口设备\n*   c 串行接口设别\n\n#### 第二至四部分 权限\n\n第二到第四部分分别对应文件所属用户，文件所属组，其他组用户权限。每个部分又由三个符号组成 满配置 为 rwx 即读，写，执行的权限，这个顺序是不变的，若缺少某个权限就换成- 比如 所属用户只有读写权限 那么第二部分就是 rw-\n\n3\\. 指令深入学习\n----------\n\n通过前面的学习，我们已经了解了文件属于**用户 和 某个用户组，且用户 用户组 及 为用户组用户 分别由对该文件的权限 这两个概念**\n\n现在我们要继续学习指令的使用 以便我们工作的开展\n\n#### 变更组\n\n    chgrp [-r] group_name file_name\n    \n\n\\-r 是可选项 表示 递归\n\n#### 变更用户\n\n    chown [-r] own_name:group_name file_name\n    \n\n#### 变更权限\n\n变更权限有两种方式\n\n1.  通过数字变更 先看一个样例\n    \n        chmod -r 777 file_name\n        \n    \n    如上就是给该文件用户 用户组 其他组用户 都安上了 rwx 属性\n    \n    那么这个7表示什么意思呢？\n    \n    其实它是三个数字的相加 即 4 + 2 + 1', '2021-05-10 17:18:25', '量子玫瑰', '2021-08-12 17:43:25', '2021-05-10 17:18:25', 3);

-- ----------------------------
-- Table structure for t_article_9
-- ----------------------------
DROP TABLE IF EXISTS `t_article_9`;
CREATE TABLE `t_article_9`  (
  `article_id` bigint(20) NOT NULL,
  `tag` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '标签,使用\',\'拼接',
  `cover` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '封面,使用“,”拼接',
  `title` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '标题',
  `original_id` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '原始id',
  `original_url` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '原始地址',
  `original_type` smallint(3) NULL DEFAULT NULL COMMENT '类型',
  `digest` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '摘要',
  `text_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '原文字内容',
  `original_html_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '原html内容',
  `html_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '已处理图片的html内容',
  `original_md_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '未处理图片的md',
  `md_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '已处理图片的md',
  `original_date_str` varchar(25) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '发布时间',
  `original_author` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '作者',
  `original_date` datetime(0) NULL DEFAULT NULL COMMENT '发布时间',
  `create_date` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `topic_id` int(11) NULL DEFAULT NULL COMMENT '主题id',
  PRIMARY KEY (`article_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for t_article_img
-- ----------------------------
DROP TABLE IF EXISTS `t_article_img`;
CREATE TABLE `t_article_img`  (
  `img_id` bigint(20) UNSIGNED NOT NULL,
  `article_id` bigint(20) NOT NULL,
  `original_url` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '原图片链接',
  `img_url` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '新图片链接',
  `img_size` double(11, 2) NULL DEFAULT NULL COMMENT '图片大小kb',
  `img_key` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'oss的key',
  `local_img_key` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '本地oss的key',
  PRIMARY KEY (`img_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for t_article_img_0
-- ----------------------------
DROP TABLE IF EXISTS `t_article_img_0`;
CREATE TABLE `t_article_img_0`  (
  `img_id` bigint(20) UNSIGNED NOT NULL,
  `article_id` bigint(20) NOT NULL,
  `original_url` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '原图片链接',
  `img_url` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '新图片链接',
  `img_size` double(11, 2) NULL DEFAULT NULL COMMENT '图片大小kb',
  `img_key` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'oss的key',
  `local_img_key` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '本地oss的key',
  PRIMARY KEY (`img_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_article_img_0
-- ----------------------------
INSERT INTO `t_article_img_0` VALUES (1425741123917328384, 1425741082653757440, 'https://static001.geekbang.org/infoq/4b/4bcc0d315b82296a54ad8cb3ed6f7f94.png', '', 5.19, 'bca/uploadImg/20210812/1425741082653757440-mkl6wrpd.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-mkl6wrpd.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328385, 1425741082653757440, 'https://static001.geekbang.org/infoq/66/66602a650ba523cd308072c0f634a515.png', '', 153.83, 'bca/uploadImg/20210812/1425741082653757440-wj7xynlp.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-wj7xynlp.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328386, 1425741082653757440, 'https://static001.geekbang.org/infoq/a1/a1825db5a775fedae7ea555bdf01b9ed.png', '', 17.17, 'bca/uploadImg/20210812/1425741082653757440-1l9hroql.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-1l9hroql.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328387, 1425741082653757440, 'https://static001.geekbang.org/infoq/03/0341908adffb4190c79ec47972d74b9d.png', '', 11.35, 'bca/uploadImg/20210812/1425741082653757440-th3lsner.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-th3lsner.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328388, 1425741082653757440, 'https://static001.geekbang.org/infoq/0e/0e00b46030203af8327cc45680d6213c.png', '', 39.50, 'bca/uploadImg/20210812/1425741082653757440-vun1uhge.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-vun1uhge.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328389, 1425741082653757440, 'https://static001.geekbang.org/infoq/6e/6e472a6c455f4b5213eb9dd1ecc1e549.png', '', 28.55, 'bca/uploadImg/20210812/1425741082653757440-nkh93df5.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-nkh93df5.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328390, 1425741082653757440, 'https://static001.geekbang.org/infoq/63/63485b64e9750e80d1edf48b5676bcf7.png', '', 131.14, 'bca/uploadImg/20210812/1425741082653757440-1fkoqk3o.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-1fkoqk3o.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328391, 1425741082653757440, 'https://static001.geekbang.org/infoq/32/321f7a08cc843dc05c7cafdc33331be5.png', '', 7.90, 'bca/uploadImg/20210812/1425741082653757440-55u4ivra.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-55u4ivra.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328392, 1425741082653757440, 'https://static001.geekbang.org/infoq/e0/e0ac61cb0a1b7ae3b7a31cf5e59422bd.png', '', 157.78, 'bca/uploadImg/20210812/1425741082653757440-kufy1fmp.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-kufy1fmp.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328393, 1425741082653757440, 'https://static001.geekbang.org/infoq/06/06940331a44696f8b79e67e176df68ed.png', '', 20.43, 'bca/uploadImg/20210812/1425741082653757440-ldkapqyi.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-ldkapqyi.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328394, 1425741082653757440, 'https://static001.geekbang.org/infoq/e4/e465c6bdceab09c59d5a550ff8d893ba.png', '', 122.88, 'bca/uploadImg/20210812/1425741082653757440-f6s7gfnx.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-f6s7gfnx.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328395, 1425741082653757440, 'https://static001.geekbang.org/infoq/9a/9a0dbd93fdcf661647d24633c5e8e21d.png', '', 145.73, 'bca/uploadImg/20210812/1425741082653757440-64dk2z9e.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-64dk2z9e.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328396, 1425741082653757440, 'https://static001.geekbang.org/infoq/91/91bcc7f3ad73eca3eefeb45576f209c5.png', '', 162.94, 'bca/uploadImg/20210812/1425741082653757440-iu8t6ru6.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-iu8t6ru6.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328397, 1425741082653757440, 'https://static001.geekbang.org/infoq/3d/3d229eb461253b81b9d64f562e837672.png', '', 160.98, 'bca/uploadImg/20210812/1425741082653757440-94g0zl83.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-94g0zl83.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328398, 1425741082653757440, 'https://static001.geekbang.org/infoq/59/590007fd78eac91d8eab8690f7ff7faa.png', '', 19.92, 'bca/uploadImg/20210812/1425741082653757440-g82eg48v.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-g82eg48v.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328399, 1425741082653757440, 'https://static001.geekbang.org/infoq/4b/4be670ca0c0da233be8033006b96920d.png', '', 7.41, 'bca/uploadImg/20210812/1425741082653757440-vltxpsc2.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-vltxpsc2.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328400, 1425741082653757440, 'https://static001.geekbang.org/infoq/3e/3ecb295eca2657f6d92ce6fd98ead3e9.png', '', 162.82, 'bca/uploadImg/20210812/1425741082653757440-j2lxsuth.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-j2lxsuth.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328401, 1425741082653757440, 'https://static001.geekbang.org/infoq/25/25b96fc01a45a585d4b98791a83c880c.png', '', 124.31, 'bca/uploadImg/20210812/1425741082653757440-r9oplt82.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-r9oplt82.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328402, 1425741082653757440, 'https://static001.geekbang.org/infoq/65/654a7b32abd4d03028170bdee882c654.png', '', 26.10, 'bca/uploadImg/20210812/1425741082653757440-7v4uhb7e.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-7v4uhb7e.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328403, 1425741082653757440, 'https://static001.geekbang.org/infoq/1a/1ae13fa5c74d6a6c566d982c8a5c819e.png', '', 155.05, 'bca/uploadImg/20210812/1425741082653757440-4n2ok2jd.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-4n2ok2jd.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328404, 1425741082653757440, 'https://static001.geekbang.org/infoq/5b/5bf6e1298a1474e8143811ff39e0828a.png', '', 162.92, 'bca/uploadImg/20210812/1425741082653757440-j8lskb53.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-j8lskb53.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328405, 1425741082653757440, 'https://static001.geekbang.org/infoq/0d/0d17501f803208a1a76d18e956b4986b.png', '', 140.81, 'bca/uploadImg/20210812/1425741082653757440-v5enzage.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-v5enzage.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328406, 1425741082653757440, 'https://static001.geekbang.org/infoq/17/174ef2de639d1349e8cb04da376ca069.png', '', 148.68, 'bca/uploadImg/20210812/1425741082653757440-h51nyhe7.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-h51nyhe7.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328407, 1425741082653757440, 'https://static001.geekbang.org/infoq/17/170f98e7dbfdbb5c714c02b6cbec506f.png', '', 126.30, 'bca/uploadImg/20210812/1425741082653757440-bpb4eq0d.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-bpb4eq0d.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328408, 1425741082653757440, 'https://static001.geekbang.org/infoq/6a/6af38243a5e0c7d7e61b854cac44869b.png', '', 20.81, 'bca/uploadImg/20210812/1425741082653757440-asyh9tu3.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-asyh9tu3.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328409, 1425741082653757440, 'https://static001.geekbang.org/infoq/b7/b7a2d78b3717687b4ebe0d9446cbb327.png', '', 141.68, 'bca/uploadImg/20210812/1425741082653757440-af4t701p.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-af4t701p.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328410, 1425741082653757440, 'https://static001.geekbang.org/infoq/05/0550e8ba2996c1e1a86f5f1fa52db934.png', '', 21.11, 'bca/uploadImg/20210812/1425741082653757440-9m9t3whb.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-9m9t3whb.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328411, 1425741082653757440, 'https://static001.geekbang.org/infoq/e7/e7a0fe029c4ab5c6f32f555356199c71.png', '', 134.17, 'bca/uploadImg/20210812/1425741082653757440-6csytrzu.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-6csytrzu.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328412, 1425741082653757440, 'https://static001.geekbang.org/infoq/75/7565afd103fa8aaf5215532aff3a8187.png', '', 131.75, 'bca/uploadImg/20210812/1425741082653757440-mix7men2.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-mix7men2.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328413, 1425741082653757440, 'https://static001.geekbang.org/infoq/41/417353b4a91b94b1169c7ffccd0c9623.png', '', 147.89, 'bca/uploadImg/20210812/1425741082653757440-p8ownpv7.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-p8ownpv7.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328414, 1425741082653757440, 'https://static001.geekbang.org/infoq/60/60806d7ff52f8771b49010f0c4944a09.png', '', 36.64, 'bca/uploadImg/20210812/1425741082653757440-0tihju59.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-0tihju59.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328415, 1425741082653757440, 'https://static001.geekbang.org/infoq/df/df2d313e92ca57060c8429d06dd5c17f.png', '', 139.47, 'bca/uploadImg/20210812/1425741082653757440-c6oas5w7.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-c6oas5w7.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328416, 1425741082653757440, 'https://static001.geekbang.org/infoq/40/4038f74beaf3af24332c78aa0f8a20f1.png', '', 33.20, 'bca/uploadImg/20210812/1425741082653757440-qfz72hy0.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-qfz72hy0.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328417, 1425741082653757440, 'https://static001.geekbang.org/infoq/8b/8b46db40fff84d2333bc5f45e5bd4741.png', '', 161.74, 'bca/uploadImg/20210812/1425741082653757440-a35x72tx.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-a35x72tx.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328418, 1425741082653757440, 'https://static001.geekbang.org/infoq/6a/6aca0e282fff7574076ec2563ab334d4.png', '', 22.59, 'bca/uploadImg/20210812/1425741082653757440-zutwqvdh.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-zutwqvdh.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328419, 1425741082653757440, 'https://static001.geekbang.org/infoq/c4/c42b906f6f0e913e5650d9bd79c4a883.png', '', 28.43, 'bca/uploadImg/20210812/1425741082653757440-fm6qrizq.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-fm6qrizq.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328420, 1425741082653757440, 'https://static001.geekbang.org/infoq/16/162f0ad2bbc06fd97314e6b7e560724a.png', '', 228.44, 'bca/uploadImg/20210812/1425741082653757440-u2vhptns.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-u2vhptns.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328421, 1425741082653757440, 'https://static001.geekbang.org/infoq/a3/a37f93d308cf1a07fc54ee91345473d1.png', '', 154.17, 'bca/uploadImg/20210812/1425741082653757440-06eu4h0l.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-06eu4h0l.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328422, 1425741082653757440, 'https://static001.geekbang.org/infoq/75/752a748310165ad0e762332418564398.png', '', 157.16, 'bca/uploadImg/20210812/1425741082653757440-qeue6kzh.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-qeue6kzh.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328423, 1425741082653757440, 'https://static001.geekbang.org/infoq/67/67daeb3014229501de5dfd2153497fb8.png', '', 148.88, 'bca/uploadImg/20210812/1425741082653757440-mqj470bv.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-mqj470bv.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328424, 1425741082653757440, 'https://static001.geekbang.org/infoq/59/59400dfaedf0db1780537ca0d09587db.png', '', 150.10, 'bca/uploadImg/20210812/1425741082653757440-btucxc3h.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-btucxc3h.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328425, 1425741082653757440, 'https://static001.geekbang.org/infoq/99/99c4172bc0168511beb4404dd685ce47.png', '', 119.50, 'bca/uploadImg/20210812/1425741082653757440-lz6fyld6.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-lz6fyld6.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328426, 1425741082653757440, 'https://static001.geekbang.org/infoq/0e/0e3ecfba3f1114aad3907b4578fbaede.png', '', 151.74, 'bca/uploadImg/20210812/1425741082653757440-jg0kzaig.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-jg0kzaig.png');
INSERT INTO `t_article_img_0` VALUES (1425741123917328427, 1425741082653757440, 'https://static001.geekbang.org/infoq/01/01550e4716d48ded67429c40aab4da5e.png', '', 2.55, 'bca/uploadImg/20210812/1425741082653757440-rgvgz25b.png', '/articleFile/bca/uploadImg/20210812/1425741082653757440-rgvgz25b.png');
INSERT INTO `t_article_img_0` VALUES (1425745811467284480, 1425745774360268800, 'https://images2018.cnblogs.com/blog/1413299/201807/1413299-20180711140724447-1433892235.png', '', 3.25, 'bca/uploadImg/20210812/1425745774360268800-1ehffiwc.png', '/articleFile/bca/uploadImg/20210812/1425745774360268800-1ehffiwc.png');
INSERT INTO `t_article_img_0` VALUES (1425745811467284481, 1425745774360268800, 'https://images2018.cnblogs.com/blog/1413299/201807/1413299-20180711143058389-1231745826.png', '', 5.40, 'bca/uploadImg/20210812/1425745774360268800-ueueu6c1.png', '/articleFile/bca/uploadImg/20210812/1425745774360268800-ueueu6c1.png');
INSERT INTO `t_article_img_0` VALUES (1425745811467284482, 1425745774360268800, 'https://images2018.cnblogs.com/blog/1413299/201807/1413299-20180711140420456-1688517117.png', '', 45.46, 'bca/uploadImg/20210812/1425745774360268800-qf4ebosl.png', '/articleFile/bca/uploadImg/20210812/1425745774360268800-qf4ebosl.png');
INSERT INTO `t_article_img_0` VALUES (1425745811467284483, 1425745774360268800, 'https://images2018.cnblogs.com/blog/1413299/201807/1413299-20180711141319941-1398494589.png', '', 7.28, 'bca/uploadImg/20210812/1425745774360268800-a5xqsrgr.png', '/articleFile/bca/uploadImg/20210812/1425745774360268800-a5xqsrgr.png');
INSERT INTO `t_article_img_0` VALUES (1425754767040327680, 1425754765710725120, 'https://img-blog.csdnimg.cn/img_convert/932ffb3b54a53ed775a72b03197f210d.png', '', 59.33, 'bca/uploadImg/20210812/1425754765710725120-8axzbjll.png', '/articleFile/bca/uploadImg/20210812/1425754765710725120-8axzbjll.png');

-- ----------------------------
-- Table structure for t_article_img_1
-- ----------------------------
DROP TABLE IF EXISTS `t_article_img_1`;
CREATE TABLE `t_article_img_1`  (
  `img_id` bigint(20) UNSIGNED NOT NULL,
  `article_id` bigint(20) NOT NULL,
  `original_url` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '原图片链接',
  `img_url` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '新图片链接',
  `img_size` double(11, 2) NULL DEFAULT NULL COMMENT '图片大小kb',
  `img_key` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'oss的key',
  `local_img_key` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '本地oss的key',
  PRIMARY KEY (`img_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for t_article_img_2
-- ----------------------------
DROP TABLE IF EXISTS `t_article_img_2`;
CREATE TABLE `t_article_img_2`  (
  `img_id` bigint(20) UNSIGNED NOT NULL,
  `article_id` bigint(20) NOT NULL,
  `original_url` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '原图片链接',
  `img_url` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '新图片链接',
  `img_size` double(11, 2) NULL DEFAULT NULL COMMENT '图片大小kb',
  `img_key` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'oss的key',
  `local_img_key` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '本地oss的key',
  PRIMARY KEY (`img_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for t_article_img_3
-- ----------------------------
DROP TABLE IF EXISTS `t_article_img_3`;
CREATE TABLE `t_article_img_3`  (
  `img_id` bigint(20) UNSIGNED NOT NULL,
  `article_id` bigint(20) NOT NULL,
  `original_url` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '原图片链接',
  `img_url` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '新图片链接',
  `img_size` double(11, 2) NULL DEFAULT NULL COMMENT '图片大小kb',
  `img_key` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'oss的key',
  `local_img_key` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '本地oss的key',
  PRIMARY KEY (`img_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for t_article_img_4
-- ----------------------------
DROP TABLE IF EXISTS `t_article_img_4`;
CREATE TABLE `t_article_img_4`  (
  `img_id` bigint(20) UNSIGNED NOT NULL,
  `article_id` bigint(20) NOT NULL,
  `original_url` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '原图片链接',
  `img_url` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '新图片链接',
  `img_size` double(11, 2) NULL DEFAULT NULL COMMENT '图片大小kb',
  `img_key` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'oss的key',
  `local_img_key` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '本地oss的key',
  PRIMARY KEY (`img_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_article_img_4
-- ----------------------------
INSERT INTO `t_article_img_4` VALUES (1425754784471855104, 1425754781024129024, 'https://img-blog.csdnimg.cn/img_convert/86afe866e95b42f7de4f5caa3370eafa.png', '', 629.18, 'bca/uploadImg/20210812/1425754781024129024-xeuws9n3.png', '/articleFile/bca/uploadImg/20210812/1425754781024129024-xeuws9n3.png');

-- ----------------------------
-- Table structure for t_article_img_5
-- ----------------------------
DROP TABLE IF EXISTS `t_article_img_5`;
CREATE TABLE `t_article_img_5`  (
  `img_id` bigint(20) UNSIGNED NOT NULL,
  `article_id` bigint(20) NOT NULL,
  `original_url` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '原图片链接',
  `img_url` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '新图片链接',
  `img_size` double(11, 2) NULL DEFAULT NULL COMMENT '图片大小kb',
  `img_key` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'oss的key',
  `local_img_key` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '本地oss的key',
  PRIMARY KEY (`img_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for t_article_img_6
-- ----------------------------
DROP TABLE IF EXISTS `t_article_img_6`;
CREATE TABLE `t_article_img_6`  (
  `img_id` bigint(20) UNSIGNED NOT NULL,
  `article_id` bigint(20) NOT NULL,
  `original_url` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '原图片链接',
  `img_url` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '新图片链接',
  `img_size` double(11, 2) NULL DEFAULT NULL COMMENT '图片大小kb',
  `img_key` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'oss的key',
  `local_img_key` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '本地oss的key',
  PRIMARY KEY (`img_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_article_img_6
-- ----------------------------
INSERT INTO `t_article_img_6` VALUES (1425750929499631616, 1425750928589459456, 'https://img-blog.csdnimg.cn/20190919171306212.png', '', 8.87, 'bca/uploadImg/20210812/1425750928589459456-fbveppf6.png', '/articleFile/bca/uploadImg/20210812/1425750928589459456-fbveppf6.png');
INSERT INTO `t_article_img_6` VALUES (1426084475300884480, 1426084453729570816, '//upload-images.jianshu.io/upload_images/23896858-c0527380c986906c.jpg', '', 30.23, 'bca/uploadImg/20210813/1426084453729570816-pj7w6zwp.jpg', '/articleFile/bca/uploadImg/20210813/1426084453729570816-pj7w6zwp.jpg');

-- ----------------------------
-- Table structure for t_article_img_7
-- ----------------------------
DROP TABLE IF EXISTS `t_article_img_7`;
CREATE TABLE `t_article_img_7`  (
  `img_id` bigint(20) UNSIGNED NOT NULL,
  `article_id` bigint(20) NOT NULL,
  `original_url` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '原图片链接',
  `img_url` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '新图片链接',
  `img_size` double(11, 2) NULL DEFAULT NULL COMMENT '图片大小kb',
  `img_key` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'oss的key',
  `local_img_key` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '本地oss的key',
  PRIMARY KEY (`img_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for t_article_img_8
-- ----------------------------
DROP TABLE IF EXISTS `t_article_img_8`;
CREATE TABLE `t_article_img_8`  (
  `img_id` bigint(20) UNSIGNED NOT NULL,
  `article_id` bigint(20) NOT NULL,
  `original_url` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '原图片链接',
  `img_url` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '新图片链接',
  `img_size` double(11, 2) NULL DEFAULT NULL COMMENT '图片大小kb',
  `img_key` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'oss的key',
  `local_img_key` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '本地oss的key',
  PRIMARY KEY (`img_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_article_img_8
-- ----------------------------
INSERT INTO `t_article_img_8` VALUES (1425754785390407680, 1425754784236965888, 'https://img-blog.csdnimg.cn/img_convert/35bf85b2988d84cd8ccb7f72814cc20d.png', '', 43.00, 'bca/uploadImg/20210812/1425754784236965888-0t9e6mcf.png', '/articleFile/bca/uploadImg/20210812/1425754784236965888-0t9e6mcf.png');
INSERT INTO `t_article_img_8` VALUES (1425754785390407681, 1425754784236965888, 'https://img-blog.csdnimg.cn/img_convert/2d0d43e8b4dfdfd98fda1e9e9084067c.png', '', 58.93, 'bca/uploadImg/20210812/1425754784236965888-v021ykqs.png', '/articleFile/bca/uploadImg/20210812/1425754784236965888-v021ykqs.png');

-- ----------------------------
-- Table structure for t_article_img_9
-- ----------------------------
DROP TABLE IF EXISTS `t_article_img_9`;
CREATE TABLE `t_article_img_9`  (
  `img_id` bigint(20) UNSIGNED NOT NULL,
  `article_id` bigint(20) NOT NULL,
  `original_url` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '原图片链接',
  `img_url` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '新图片链接',
  `img_size` double(11, 2) NULL DEFAULT NULL COMMENT '图片大小kb',
  `img_key` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'oss的key',
  `local_img_key` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '本地oss的key',
  PRIMARY KEY (`img_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for t_history_task
-- ----------------------------
DROP TABLE IF EXISTS `t_history_task`;
CREATE TABLE `t_history_task`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `original_url` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '原始地址',
  `original_type` smallint(3) NULL DEFAULT NULL COMMENT '来源类型',
  `run_status` smallint(3) NULL DEFAULT NULL COMMENT '运行状态 -1待开始 0停止 1进行中 2异常 3完成',
  `error_msg` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '错误信息',
  `user_id` int(11) NULL DEFAULT NULL COMMENT '提交用户',
  `create_time` datetime(0) NULL DEFAULT NULL,
  `update_time` datetime(0) NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP(0),
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '爬虫任务历史记录表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for t_link_task
-- ----------------------------
DROP TABLE IF EXISTS `t_link_task`;
CREATE TABLE `t_link_task`  (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '标签id',
  `link_url` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '标签地址',
  `link_title` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '标签标题',
  `original_type` smallint(3) NULL DEFAULT NULL COMMENT '来源类型',
  `run_status` smallint(3) NULL DEFAULT NULL COMMENT '运行状态',
  `error_msg` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '错误信息',
  `user_id` int(11) NULL DEFAULT NULL COMMENT '提交用户',
  `file_key` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '文件地址',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime(0) NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '标签任务信息表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for t_run_task
-- ----------------------------
DROP TABLE IF EXISTS `t_run_task`;
CREATE TABLE `t_run_task`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `original_url` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '原始地址',
  `original_type` smallint(3) NULL DEFAULT NULL COMMENT '来源类型',
  `run_status` smallint(3) NULL DEFAULT NULL COMMENT '运行状态 0停止 1进行中 2异常 3完成(进入history)',
  `error_msg` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '错误信息',
  `user_id` int(11) NULL DEFAULT NULL COMMENT '提交用户',
  `create_time` datetime(0) NULL DEFAULT NULL,
  `update_time` datetime(0) NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP(0),
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 134 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '爬虫任务运行表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_run_task
-- ----------------------------
INSERT INTO `t_run_task` VALUES (118, 'https://blog.csdn.net/top_code/article/details/55101219', 2, 3, NULL, NULL, '2021-08-12 16:16:10', '2021-08-12 16:16:11');
INSERT INTO `t_run_task` VALUES (119, 'https://xie.infoq.cn/article/1b10dd84c1c9d7b969022607b', 13, 0, NULL, NULL, '2021-08-12 16:18:43', '2021-08-12 16:27:28');
INSERT INTO `t_run_task` VALUES (124, 'https://xie.infoq.cn/article/1b10dd84c1c9d7b969022607b', 13, 3, NULL, NULL, '2021-08-12 16:48:52', '2021-08-12 16:49:11');
INSERT INTO `t_run_task` VALUES (125, 'https://www.cnblogs.com/52lnamp/p/9294330.html', 3, 3, NULL, NULL, '2021-08-12 17:07:36', '2021-08-12 17:07:45');
INSERT INTO `t_run_task` VALUES (126, 'https://blog.csdn.net/qq_34637782/article/details/101029487', 2, 3, NULL, NULL, '2021-08-12 17:28:05', '2021-08-12 17:28:05');
INSERT INTO `t_run_task` VALUES (127, 'https://blog.csdn.net/qq_34637782/article/details/117607110', 2, 3, NULL, NULL, '2021-08-12 17:43:15', '2021-08-12 17:43:16');
INSERT INTO `t_run_task` VALUES (128, 'https://blog.csdn.net/qq_34637782/article/details/116602145', 2, 3, NULL, NULL, '2021-08-12 17:43:20', '2021-08-12 17:43:20');
INSERT INTO `t_run_task` VALUES (129, 'https://blog.csdn.net/qq_34637782/article/details/116602117', 2, 3, NULL, NULL, '2021-08-12 17:43:23', '2021-08-12 17:43:25');
INSERT INTO `t_run_task` VALUES (130, 'https://blog.csdn.net/qq_34637782/article/details/116602099', 2, 3, NULL, NULL, '2021-08-12 17:43:24', '2021-08-12 17:43:25');
INSERT INTO `t_run_task` VALUES (131, 'https://www.jianshu.com/p/44af618dfb5d', 6, 3, NULL, NULL, '2021-08-13 15:21:41', '2021-08-13 15:21:48');
INSERT INTO `t_run_task` VALUES (132, 'https://www.jianshu.com/p/44af618dfb5d', 6, 3, NULL, NULL, '2021-08-13 15:29:11', '2021-08-13 15:29:16');
INSERT INTO `t_run_task` VALUES (133, 'https://www.jianshu.com/p/44af618dfb5d', 6, 3, NULL, NULL, '2021-08-13 15:33:23', '2021-08-13 15:33:29');

-- ----------------------------
-- Table structure for t_topic
-- ----------------------------
DROP TABLE IF EXISTS `t_topic`;
CREATE TABLE `t_topic`  (
  `topic_id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '主题id',
  `topic_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '主题名称',
  `original_url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '地址',
  `original_type` smallint(3) NULL DEFAULT NULL COMMENT '类型',
  `size` int(10) NULL DEFAULT NULL COMMENT '数量',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime(0) NULL DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`topic_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '主题专栏' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_topic
-- ----------------------------
INSERT INTO `t_topic` VALUES (3, 'Linux', 'https://blog.csdn.net/qq_34637782/category_11048882.html', 2, 4, '2021-08-12 17:43:14', NULL);

-- ----------------------------
-- Table structure for t_unique
-- ----------------------------
DROP TABLE IF EXISTS `t_unique`;
CREATE TABLE `t_unique`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `original_id` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '原始id',
  `original_url` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '原始地址',
  `original_type` smallint(3) NULL DEFAULT NULL COMMENT '类型',
  `create_time` datetime(0) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_unique_originalIdType`(`original_id`, `original_type`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 90 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '记录唯一文章值\r\n' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_unique
-- ----------------------------
INSERT INTO `t_unique` VALUES (79, '55101219', 'https://blog.csdn.net/top_code/article/details/55101219', 2, '2021-08-12 16:16:11');
INSERT INTO `t_unique` VALUES (80, '1b10dd84c1c9d7b969022607b', 'https://xie.infoq.cn/article/1b10dd84c1c9d7b969022607b', 13, '2021-08-12 16:49:11');
INSERT INTO `t_unique` VALUES (81, '9294330', 'https://www.cnblogs.com/52lnamp/p/9294330.html', 3, '2021-08-12 17:07:45');
INSERT INTO `t_unique` VALUES (82, '101029487', 'https://blog.csdn.net/qq_34637782/article/details/101029487', 2, '2021-08-12 17:28:05');
INSERT INTO `t_unique` VALUES (83, '117607110', 'https://blog.csdn.net/qq_34637782/article/details/117607110', 2, '2021-08-12 17:43:16');
INSERT INTO `t_unique` VALUES (84, '116602145', 'https://blog.csdn.net/qq_34637782/article/details/116602145', 2, '2021-08-12 17:43:20');
INSERT INTO `t_unique` VALUES (85, '116602117', 'https://blog.csdn.net/qq_34637782/article/details/116602117', 2, '2021-08-12 17:43:25');
INSERT INTO `t_unique` VALUES (86, '116602099', 'https://blog.csdn.net/qq_34637782/article/details/116602099', 2, '2021-08-12 17:43:25');
INSERT INTO `t_unique` VALUES (89, '44af618dfb5d', 'https://www.jianshu.com/p/44af618dfb5d', 6, '2021-08-13 15:33:29');

SET FOREIGN_KEY_CHECKS = 1;
